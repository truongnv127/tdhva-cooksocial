{"ast":null,"code":"import { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { assertAuthTokens, assertDeviceMetadata } from '../utils/types.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport '../utils/refreshAuthTokens.mjs';\nimport '../tokenProvider/errorHelpers.mjs';\nimport { tokenOrchestrator } from '../tokenProvider/tokenProvider.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../types/errors.mjs';\nimport { createForgetDeviceClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createForgetDeviceClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Forget a remembered device while authenticated.\n *\n * @param input - The ForgetDeviceInput object.\n * @throws - {@link ForgetDeviceException} - Cognito service errors thrown when\n * forgetting device with invalid device key\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function forgetDevice(input) {\n  var _Amplify$getConfig$Au;\n  const {\n    device: {\n      id: externalDeviceKey\n    } = {\n      id: undefined\n    }\n  } = input !== null && input !== void 0 ? input : {};\n  const authConfig = (_Amplify$getConfig$Au = Amplify.getConfig().Auth) === null || _Amplify$getConfig$Au === void 0 ? void 0 : _Amplify$getConfig$Au.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolEndpoint,\n    userPoolId\n  } = authConfig;\n  const {\n    tokens\n  } = await fetchAuthSession();\n  assertAuthTokens(tokens);\n  const deviceMetadata = await tokenOrchestrator.getDeviceMetadata();\n  const currentDeviceKey = deviceMetadata === null || deviceMetadata === void 0 ? void 0 : deviceMetadata.deviceKey;\n  if (!externalDeviceKey) assertDeviceMetadata(deviceMetadata);\n  const serviceForgetDevice = createForgetDeviceClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  await serviceForgetDevice({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ForgetDevice)\n  }, {\n    AccessToken: tokens.accessToken.toString(),\n    DeviceKey: externalDeviceKey !== null && externalDeviceKey !== void 0 ? externalDeviceKey : currentDeviceKey\n  });\n  if (!externalDeviceKey || externalDeviceKey === currentDeviceKey) await tokenOrchestrator.clearDeviceMetadata();\n}\nexport { forgetDevice };","map":{"version":3,"names":["forgetDevice","input","_Amplify$getConfig$Au","device","id","externalDeviceKey","undefined","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","userPoolEndpoint","userPoolId","tokens","fetchAuthSession","assertAuthTokens","deviceMetadata","tokenOrchestrator","getDeviceMetadata","currentDeviceKey","deviceKey","assertDeviceMetadata","serviceForgetDevice","createForgetDeviceClient","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","region","getRegionFromUserPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","ForgetDevice","AccessToken","accessToken","toString","DeviceKey","clearDeviceMetadata"],"sources":["/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@aws-amplify/auth/src/providers/cognito/apis/forgetDevice.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { assertAuthTokens, assertDeviceMetadata } from '../utils/types';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { tokenOrchestrator } from '../tokenProvider';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { createForgetDeviceClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\n/**\n * Forget a remembered device while authenticated.\n *\n * @param input - The ForgetDeviceInput object.\n * @throws - {@link ForgetDeviceException} - Cognito service errors thrown when\n * forgetting device with invalid device key\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function forgetDevice(input) {\n    const { device: { id: externalDeviceKey } = { id: undefined } } = input ?? {};\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolEndpoint, userPoolId } = authConfig;\n    const { tokens } = await fetchAuthSession();\n    assertAuthTokens(tokens);\n    const deviceMetadata = await tokenOrchestrator.getDeviceMetadata();\n    const currentDeviceKey = deviceMetadata?.deviceKey;\n    if (!externalDeviceKey)\n        assertDeviceMetadata(deviceMetadata);\n    const serviceForgetDevice = createForgetDeviceClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    await serviceForgetDevice({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ForgetDevice),\n    }, {\n        AccessToken: tokens.accessToken.toString(),\n        DeviceKey: externalDeviceKey ?? currentDeviceKey,\n    });\n    if (!externalDeviceKey || externalDeviceKey === currentDeviceKey)\n        await tokenOrchestrator.clearDeviceMetadata();\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,YAAYA,CAACC,KAAK,EAAE;EAAA,IAAAC,qBAAA;EACtC,MAAM;IAAEC,MAAM,EAAE;MAAEC,EAAE,EAAEC;IAAiB,CAAE,GAAG;MAAED,EAAE,EAAEE;IAAS;EAAE,CAAE,GAAGL,KAAK,aAALA,KAAK,cAALA,KAAK,GAAI,EAAE;EAC7E,MAAMM,UAAU,IAAAL,qBAAA,GAAGM,OAAO,CAACC,SAAS,EAAE,CAACC,IAAI,cAAAR,qBAAA,uBAAxBA,qBAAA,CAA0BS,OAAO;EACpDC,yBAAyB,CAACL,UAAU,CAAC;EACrC,MAAM;IAAEM,gBAAgB;IAAEC;EAAU,CAAE,GAAGP,UAAU;EACnD,MAAM;IAAEQ;EAAM,CAAE,GAAG,MAAMC,gBAAgB,EAAE;EAC3CC,gBAAgB,CAACF,MAAM,CAAC;EACxB,MAAMG,cAAc,GAAG,MAAMC,iBAAiB,CAACC,iBAAiB,EAAE;EAClE,MAAMC,gBAAgB,GAAGH,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEI,SAAS;EAClD,IAAI,CAACjB,iBAAiB,EAClBkB,oBAAoB,CAACL,cAAc,CAAC;EACxC,MAAMM,mBAAmB,GAAGC,wBAAwB,CAAC;IACjDC,gBAAgB,EAAEC,qCAAqC,CAAC;MACpDC,gBAAgB,EAAEf;IAC9B,CAAS;EACT,CAAK,CAAC;EACF,MAAMW,mBAAmB,CAAC;IACtBK,MAAM,EAAEC,uBAAuB,CAAChB,UAAU,CAAC;IAC3CiB,cAAc,EAAEC,qBAAqB,CAACC,UAAU,CAACC,YAAY;EACrE,CAAK,EAAE;IACCC,WAAW,EAAEpB,MAAM,CAACqB,WAAW,CAACC,QAAQ,EAAE;IAC1CC,SAAS,EAAEjC,iBAAiB,aAAjBA,iBAAiB,cAAjBA,iBAAiB,GAAIgB;EACxC,CAAK,CAAC;EACF,IAAI,CAAChB,iBAAiB,IAAIA,iBAAiB,KAAKgB,gBAAgB,EAC5D,MAAMF,iBAAiB,CAACoB,mBAAmB,EAAE;AACrD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}