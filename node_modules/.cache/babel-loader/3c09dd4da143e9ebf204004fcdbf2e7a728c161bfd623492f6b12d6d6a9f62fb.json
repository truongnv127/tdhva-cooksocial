{"ast":null,"code":"import _objectSpread from \"/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig } from '@aws-amplify/core/internals/utils';\nimport '../../../client/utils/store/autoSignInStore.mjs';\nimport { signInStore, setActiveSignInState, resetActiveSignInState } from '../../../client/utils/store/signInStore.mjs';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { handleChallengeName, getSignInResult, getSignInResultFromError } from '../utils/signInHelpers.mjs';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { AuthErrorCodes } from '../../../common/AuthErrorStrings.mjs';\nimport { cacheCognitoTokens } from '../tokenProvider/cacheTokens.mjs';\nimport '../utils/refreshAuthTokens.mjs';\nimport '../tokenProvider/errorHelpers.mjs';\nimport '../utils/types.mjs';\nimport { tokenOrchestrator } from '../tokenProvider/tokenProvider.mjs';\nimport { dispatchSignedInHubEvent } from '../utils/dispatchSignedInHubEvent.mjs';\nimport { getNewDeviceMetadata } from '../utils/getNewDeviceMetadata.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Continues or completes the sign in process when required by the initial call to `signIn`.\n *\n * @param input -  The ConfirmSignInInput object\n * @returns ConfirmSignInOutput\n * @throws  -{@link VerifySoftwareTokenException }:\n * Thrown due to an invalid MFA token.\n * @throws  -{@link RespondToAuthChallengeException }:\n * Thrown due to an invalid auth challenge response.\n * @throws  -{@link AssociateSoftwareTokenException}:\n * Thrown due to a service error during the MFA setup process.\n * @throws  -{@link AuthValidationErrorCode }:\n * Thrown when `challengeResponse` is not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function confirmSignIn(input) {\n  var _Amplify$getConfig$Au;\n  const {\n    challengeResponse,\n    options\n  } = input;\n  const {\n    username,\n    challengeName,\n    signInSession,\n    signInDetails\n  } = signInStore.getState();\n  const authConfig = (_Amplify$getConfig$Au = Amplify.getConfig().Auth) === null || _Amplify$getConfig$Au === void 0 ? void 0 : _Amplify$getConfig$Au.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const clientMetaData = options === null || options === void 0 ? void 0 : options.clientMetadata;\n  assertValidationError(!!challengeResponse, AuthValidationErrorCode.EmptyChallengeResponse);\n  if (!username || !challengeName || !signInSession)\n    // TODO: remove this error message for production apps\n    throw new AuthError({\n      name: AuthErrorCodes.SignInException,\n      message: \"\\n\\t\\t\\tAn error occurred during the sign in process.\\n\\n\\t\\t\\tThis most likely occurred due to:\\n\\t\\t\\t1. signIn was not called before confirmSignIn.\\n\\t\\t\\t2. signIn threw an exception.\\n\\t\\t\\t3. page was refreshed during the sign in flow and session has expired.\\n\\t\\t\\t\",\n      recoverySuggestion: 'Make sure a successful call to signIn is made before calling confirmSignIn' + 'and that the session has not expired.'\n    });\n  try {\n    const {\n      Session,\n      ChallengeName: handledChallengeName,\n      AuthenticationResult,\n      ChallengeParameters: handledChallengeParameters\n    } = await handleChallengeName(username, challengeName, signInSession, challengeResponse, authConfig, tokenOrchestrator, clientMetaData, options);\n    // sets up local state used during the sign-in process\n    setActiveSignInState({\n      signInSession: Session,\n      username,\n      challengeName: handledChallengeName,\n      signInDetails\n    });\n    if (AuthenticationResult) {\n      await cacheCognitoTokens(_objectSpread(_objectSpread({\n        username\n      }, AuthenticationResult), {}, {\n        NewDeviceMetadata: await getNewDeviceMetadata({\n          userPoolId: authConfig.userPoolId,\n          userPoolEndpoint: authConfig.userPoolEndpoint,\n          newDeviceMetadata: AuthenticationResult.NewDeviceMetadata,\n          accessToken: AuthenticationResult.AccessToken\n        }),\n        signInDetails\n      }));\n      resetActiveSignInState();\n      await dispatchSignedInHubEvent();\n      return {\n        isSignedIn: true,\n        nextStep: {\n          signInStep: 'DONE'\n        }\n      };\n    }\n    return getSignInResult({\n      challengeName: handledChallengeName,\n      challengeParameters: handledChallengeParameters\n    });\n  } catch (error) {\n    assertServiceError(error);\n    const result = getSignInResultFromError(error.name);\n    if (result) return result;\n    throw error;\n  }\n}\nexport { confirmSignIn };","map":{"version":3,"names":["confirmSignIn","input","_Amplify$getConfig$Au","challengeResponse","options","username","challengeName","signInSession","signInDetails","signInStore","getState","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","clientMetaData","clientMetadata","assertValidationError","AuthValidationErrorCode","EmptyChallengeResponse","AuthError","name","AuthErrorCodes","SignInException","message","recoverySuggestion","Session","ChallengeName","handledChallengeName","AuthenticationResult","ChallengeParameters","handledChallengeParameters","handleChallengeName","tokenOrchestrator","setActiveSignInState","cacheCognitoTokens","_objectSpread","NewDeviceMetadata","getNewDeviceMetadata","userPoolId","userPoolEndpoint","newDeviceMetadata","accessToken","AccessToken","resetActiveSignInState","dispatchSignedInHubEvent","isSignedIn","nextStep","signInStep","getSignInResult","challengeParameters","error","assertServiceError","result","getSignInResultFromError"],"sources":["/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@aws-amplify/auth/src/providers/cognito/apis/confirmSignIn.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig } from '@aws-amplify/core/internals/utils';\nimport { resetActiveSignInState, setActiveSignInState, signInStore, } from '../../../client/utils/store';\nimport { AuthError } from '../../../errors/AuthError';\nimport { getSignInResult, getSignInResultFromError, handleChallengeName, } from '../utils/signInHelpers';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { AuthErrorCodes } from '../../../common/AuthErrorStrings';\nimport { cacheCognitoTokens } from '../tokenProvider/cacheTokens';\nimport { tokenOrchestrator } from '../tokenProvider';\nimport { dispatchSignedInHubEvent } from '../utils/dispatchSignedInHubEvent';\nimport { getNewDeviceMetadata } from '../utils/getNewDeviceMetadata';\n/**\n * Continues or completes the sign in process when required by the initial call to `signIn`.\n *\n * @param input -  The ConfirmSignInInput object\n * @returns ConfirmSignInOutput\n * @throws  -{@link VerifySoftwareTokenException }:\n * Thrown due to an invalid MFA token.\n * @throws  -{@link RespondToAuthChallengeException }:\n * Thrown due to an invalid auth challenge response.\n * @throws  -{@link AssociateSoftwareTokenException}:\n * Thrown due to a service error during the MFA setup process.\n * @throws  -{@link AuthValidationErrorCode }:\n * Thrown when `challengeResponse` is not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function confirmSignIn(input) {\n    const { challengeResponse, options } = input;\n    const { username, challengeName, signInSession, signInDetails } = signInStore.getState();\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const clientMetaData = options?.clientMetadata;\n    assertValidationError(!!challengeResponse, AuthValidationErrorCode.EmptyChallengeResponse);\n    if (!username || !challengeName || !signInSession)\n        // TODO: remove this error message for production apps\n        throw new AuthError({\n            name: AuthErrorCodes.SignInException,\n            message: `\n\t\t\tAn error occurred during the sign in process.\n\n\t\t\tThis most likely occurred due to:\n\t\t\t1. signIn was not called before confirmSignIn.\n\t\t\t2. signIn threw an exception.\n\t\t\t3. page was refreshed during the sign in flow and session has expired.\n\t\t\t`,\n            recoverySuggestion: 'Make sure a successful call to signIn is made before calling confirmSignIn' +\n                'and that the session has not expired.',\n        });\n    try {\n        const { Session, ChallengeName: handledChallengeName, AuthenticationResult, ChallengeParameters: handledChallengeParameters, } = await handleChallengeName(username, challengeName, signInSession, challengeResponse, authConfig, tokenOrchestrator, clientMetaData, options);\n        // sets up local state used during the sign-in process\n        setActiveSignInState({\n            signInSession: Session,\n            username,\n            challengeName: handledChallengeName,\n            signInDetails,\n        });\n        if (AuthenticationResult) {\n            await cacheCognitoTokens({\n                username,\n                ...AuthenticationResult,\n                NewDeviceMetadata: await getNewDeviceMetadata({\n                    userPoolId: authConfig.userPoolId,\n                    userPoolEndpoint: authConfig.userPoolEndpoint,\n                    newDeviceMetadata: AuthenticationResult.NewDeviceMetadata,\n                    accessToken: AuthenticationResult.AccessToken,\n                }),\n                signInDetails,\n            });\n            resetActiveSignInState();\n            await dispatchSignedInHubEvent();\n            return {\n                isSignedIn: true,\n                nextStep: { signInStep: 'DONE' },\n            };\n        }\n        return getSignInResult({\n            challengeName: handledChallengeName,\n            challengeParameters: handledChallengeParameters,\n        });\n    }\n    catch (error) {\n        assertServiceError(error);\n        const result = getSignInResultFromError(error.name);\n        if (result)\n            return result;\n        throw error;\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,aAAaA,CAACC,KAAK,EAAE;EAAA,IAAAC,qBAAA;EACvC,MAAM;IAAEC,iBAAiB;IAAEC;EAAO,CAAE,GAAGH,KAAK;EAC5C,MAAM;IAAEI,QAAQ;IAAEC,aAAa;IAAEC,aAAa;IAAEC;EAAa,CAAE,GAAGC,WAAW,CAACC,QAAQ,EAAE;EACxF,MAAMC,UAAU,IAAAT,qBAAA,GAAGU,OAAO,CAACC,SAAS,EAAE,CAACC,IAAI,cAAAZ,qBAAA,uBAAxBA,qBAAA,CAA0Ba,OAAO;EACpDC,yBAAyB,CAACL,UAAU,CAAC;EACrC,MAAMM,cAAc,GAAGb,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEc,cAAc;EAC9CC,qBAAqB,CAAC,CAAC,CAAChB,iBAAiB,EAAEiB,uBAAuB,CAACC,sBAAsB,CAAC;EAC1F,IAAI,CAAChB,QAAQ,IAAI,CAACC,aAAa,IAAI,CAACC,aAAa;IACrD;IACQ,MAAM,IAAIe,SAAS,CAAC;MAChBC,IAAI,EAAEC,cAAc,CAACC,eAAe;MACpCC,OAAO,qRAOf;MACQC,kBAAkB,EAAE,4EAA4E,GAC5F;IAChB,CAAS,CAAC;EACN,IAAI;IACA,MAAM;MAAEC,OAAO;MAAEC,aAAa,EAAEC,oBAAoB;MAAEC,oBAAoB;MAAEC,mBAAmB,EAAEC;IAA0B,CAAG,GAAG,MAAMC,mBAAmB,CAAC7B,QAAQ,EAAEC,aAAa,EAAEC,aAAa,EAAEJ,iBAAiB,EAAEQ,UAAU,EAAEwB,iBAAiB,EAAElB,cAAc,EAAEb,OAAO,CAAC;IACrR;IACQgC,oBAAoB,CAAC;MACjB7B,aAAa,EAAEqB,OAAO;MACtBvB,QAAQ;MACRC,aAAa,EAAEwB,oBAAoB;MACnCtB;IACZ,CAAS,CAAC;IACF,IAAIuB,oBAAoB,EAAE;MACtB,MAAMM,kBAAkB,CAAAC,aAAA,CAAAA,aAAA;QACpBjC;MAAQ,GACL0B,oBAAoB;QACvBQ,iBAAiB,EAAE,MAAMC,oBAAoB,CAAC;UAC1CC,UAAU,EAAE9B,UAAU,CAAC8B,UAAU;UACjCC,gBAAgB,EAAE/B,UAAU,CAAC+B,gBAAgB;UAC7CC,iBAAiB,EAAEZ,oBAAoB,CAACQ,iBAAiB;UACzDK,WAAW,EAAEb,oBAAoB,CAACc;QACtD,CAAiB,CAAC;QACFrC;MAAa,EAChB,CAAC;MACFsC,sBAAsB,EAAE;MACxB,MAAMC,wBAAwB,EAAE;MAChC,OAAO;QACHC,UAAU,EAAE,IAAI;QAChBC,QAAQ,EAAE;UAAEC,UAAU,EAAE;QAAM;MAC9C,CAAa;IACL;IACA,OAAOC,eAAe,CAAC;MACnB7C,aAAa,EAAEwB,oBAAoB;MACnCsB,mBAAmB,EAAEnB;IACjC,CAAS,CAAC;EACN,EACA,OAAOoB,KAAK,EAAE;IACVC,kBAAkB,CAACD,KAAK,CAAC;IACzB,MAAME,MAAM,GAAGC,wBAAwB,CAACH,KAAK,CAAC9B,IAAI,CAAC;IACnD,IAAIgC,MAAM,EACN,OAAOA,MAAM;IACjB,MAAMF,KAAK;EACf;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}