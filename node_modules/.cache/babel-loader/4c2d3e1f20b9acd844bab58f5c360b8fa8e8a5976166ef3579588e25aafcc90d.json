{"ast":null,"code":"import _objectSpread from \"/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport '../../../types/errors.mjs';\nimport '../../../errors/errorHelpers.mjs';\nimport { getClientInfo } from '../../../utils/getClientInfo/getClientInfo.mjs';\nimport '../../../utils/retry/retry.mjs';\nimport '../../../parseAWSExports.mjs';\nimport { amplifyUuid } from '../../../utils/amplifyUuid/index.mjs';\nimport '../../../singleton/Auth/utils/errorHelpers.mjs';\nimport '@aws-crypto/sha256-js';\nimport '@smithy/util-hex-encoding';\nimport '../../../Platform/index.mjs';\nimport '../../../Platform/types.mjs';\nimport '../../../BackgroundProcessManager/types.mjs';\nimport '../../../Reachability/Reachability.mjs';\nimport '../../../Hub/index.mjs';\nimport '../../../utils/sessionListener/index.mjs';\nimport '../../../awsClients/pinpoint/errorHelpers.mjs';\nimport { updateEndpoint as updateEndpoint$1 } from '../../../awsClients/pinpoint/updateEndpoint.mjs';\nimport { cacheEndpointId } from '../utils/cacheEndpointId.mjs';\nimport { createEndpointId, clearCreatedEndpointId } from '../utils/createEndpointId.mjs';\nimport { getEndpointId } from '../utils/getEndpointId.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * @internal\n */\nconst updateEndpoint = async _ref => {\n  let {\n    address,\n    appId,\n    category,\n    channelType,\n    credentials,\n    identityId,\n    optOut,\n    region,\n    userAttributes,\n    userId,\n    userProfile,\n    userAgentValue\n  } = _ref;\n  const endpointId = await getEndpointId(appId, category);\n  // only generate a new endpoint id if one was not found in cache\n  const createdEndpointId = !endpointId ? createEndpointId(appId, category) : undefined;\n  const {\n    customProperties,\n    demographic,\n    email,\n    location,\n    metrics,\n    name,\n    plan\n  } = userProfile !== null && userProfile !== void 0 ? userProfile : {};\n  // only automatically populate the endpoint with client info and identity id upon endpoint creation to\n  // avoid overwriting the endpoint with these values every time the endpoint is updated\n  const demographicsFromClientInfo = {};\n  const resolvedUserId = createdEndpointId ? userId !== null && userId !== void 0 ? userId : identityId : userId;\n  if (createdEndpointId) {\n    const clientInfo = getClientInfo();\n    demographicsFromClientInfo.appVersion = clientInfo.appVersion;\n    demographicsFromClientInfo.make = clientInfo.make;\n    demographicsFromClientInfo.model = clientInfo.model;\n    demographicsFromClientInfo.modelVersion = clientInfo.version;\n    demographicsFromClientInfo.platform = clientInfo.platform;\n  }\n  const mergedDemographic = _objectSpread(_objectSpread({}, demographicsFromClientInfo), demographic);\n  const attributes = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, email && {\n    email: [email]\n  }), name && {\n    name: [name]\n  }), plan && {\n    plan: [plan]\n  }), customProperties);\n  const shouldAddDemographics = createdEndpointId || demographic;\n  const shouldAddAttributes = email || customProperties || name || plan;\n  const shouldAddUser = resolvedUserId || userAttributes;\n  const input = {\n    ApplicationId: appId,\n    EndpointId: endpointId !== null && endpointId !== void 0 ? endpointId : createdEndpointId,\n    EndpointRequest: _objectSpread(_objectSpread(_objectSpread(_objectSpread({\n      RequestId: amplifyUuid(),\n      EffectiveDate: new Date().toISOString(),\n      ChannelType: channelType,\n      Address: address\n    }, shouldAddAttributes && {\n      Attributes: attributes\n    }), shouldAddDemographics && {\n      Demographic: {\n        AppVersion: mergedDemographic.appVersion,\n        Locale: mergedDemographic.locale,\n        Make: mergedDemographic.make,\n        Model: mergedDemographic.model,\n        ModelVersion: mergedDemographic.modelVersion,\n        Platform: mergedDemographic.platform,\n        PlatformVersion: mergedDemographic.platformVersion,\n        Timezone: mergedDemographic.timezone\n      }\n    }), location && {\n      Location: {\n        City: location.city,\n        Country: location.country,\n        Latitude: location.latitude,\n        Longitude: location.longitude,\n        PostalCode: location.postalCode,\n        Region: location.region\n      }\n    }), {}, {\n      Metrics: metrics,\n      OptOut: optOut\n    }, shouldAddUser && {\n      User: {\n        UserId: resolvedUserId,\n        UserAttributes: userAttributes\n      }\n    })\n  };\n  try {\n    await updateEndpoint$1({\n      credentials,\n      region,\n      userAgentValue\n    }, input);\n    // if we had to create an endpoint id, we need to now cache it\n    if (createdEndpointId) {\n      await cacheEndpointId(appId, category, createdEndpointId);\n    }\n  } finally {\n    // at this point, we completely reset the behavior so even if the update was unsuccessful\n    // we can just start over with a newly created endpoint id\n    if (createdEndpointId) {\n      clearCreatedEndpointId(appId, category);\n    }\n  }\n};\nexport { updateEndpoint };","map":{"version":3,"names":["updateEndpoint","_ref","address","appId","category","channelType","credentials","identityId","optOut","region","userAttributes","userId","userProfile","userAgentValue","endpointId","getEndpointId","createdEndpointId","createEndpointId","undefined","customProperties","demographic","email","location","metrics","name","plan","demographicsFromClientInfo","resolvedUserId","clientInfo","getClientInfo","appVersion","make","model","modelVersion","version","platform","mergedDemographic","_objectSpread","attributes","shouldAddDemographics","shouldAddAttributes","shouldAddUser","input","ApplicationId","EndpointId","EndpointRequest","RequestId","amplifyUuid","EffectiveDate","Date","toISOString","ChannelType","Address","Attributes","Demographic","AppVersion","Locale","locale","Make","Model","ModelVersion","Platform","PlatformVersion","platformVersion","Timezone","timezone","Location","City","city","Country","country","Latitude","latitude","Longitude","longitude","PostalCode","postalCode","Region","Metrics","OptOut","User","UserId","UserAttributes","updateEndpoint$1","cacheEndpointId","clearCreatedEndpointId"],"sources":["/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@aws-amplify/core/src/providers/pinpoint/apis/updateEndpoint.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { updateEndpoint as clientUpdateEndpoint, } from '../../../awsClients/pinpoint';\nimport { amplifyUuid } from '../../../utils/amplifyUuid';\nimport { getClientInfo } from '../../../utils/getClientInfo';\nimport { cacheEndpointId } from '../utils/cacheEndpointId';\nimport { clearCreatedEndpointId, createEndpointId, } from '../utils/createEndpointId';\nimport { getEndpointId } from '../utils/getEndpointId';\n/**\n * @internal\n */\nexport const updateEndpoint = async ({ address, appId, category, channelType, credentials, identityId, optOut, region, userAttributes, userId, userProfile, userAgentValue, }) => {\n    const endpointId = await getEndpointId(appId, category);\n    // only generate a new endpoint id if one was not found in cache\n    const createdEndpointId = !endpointId\n        ? createEndpointId(appId, category)\n        : undefined;\n    const { customProperties, demographic, email, location, metrics, name, plan, } = userProfile ?? {};\n    // only automatically populate the endpoint with client info and identity id upon endpoint creation to\n    // avoid overwriting the endpoint with these values every time the endpoint is updated\n    const demographicsFromClientInfo = {};\n    const resolvedUserId = createdEndpointId ? (userId ?? identityId) : userId;\n    if (createdEndpointId) {\n        const clientInfo = getClientInfo();\n        demographicsFromClientInfo.appVersion = clientInfo.appVersion;\n        demographicsFromClientInfo.make = clientInfo.make;\n        demographicsFromClientInfo.model = clientInfo.model;\n        demographicsFromClientInfo.modelVersion = clientInfo.version;\n        demographicsFromClientInfo.platform = clientInfo.platform;\n    }\n    const mergedDemographic = {\n        ...demographicsFromClientInfo,\n        ...demographic,\n    };\n    const attributes = {\n        ...(email && { email: [email] }),\n        ...(name && { name: [name] }),\n        ...(plan && { plan: [plan] }),\n        ...customProperties,\n    };\n    const shouldAddDemographics = createdEndpointId || demographic;\n    const shouldAddAttributes = email || customProperties || name || plan;\n    const shouldAddUser = resolvedUserId || userAttributes;\n    const input = {\n        ApplicationId: appId,\n        EndpointId: endpointId ?? createdEndpointId,\n        EndpointRequest: {\n            RequestId: amplifyUuid(),\n            EffectiveDate: new Date().toISOString(),\n            ChannelType: channelType,\n            Address: address,\n            ...(shouldAddAttributes && { Attributes: attributes }),\n            ...(shouldAddDemographics && {\n                Demographic: {\n                    AppVersion: mergedDemographic.appVersion,\n                    Locale: mergedDemographic.locale,\n                    Make: mergedDemographic.make,\n                    Model: mergedDemographic.model,\n                    ModelVersion: mergedDemographic.modelVersion,\n                    Platform: mergedDemographic.platform,\n                    PlatformVersion: mergedDemographic.platformVersion,\n                    Timezone: mergedDemographic.timezone,\n                },\n            }),\n            ...(location && {\n                Location: {\n                    City: location.city,\n                    Country: location.country,\n                    Latitude: location.latitude,\n                    Longitude: location.longitude,\n                    PostalCode: location.postalCode,\n                    Region: location.region,\n                },\n            }),\n            Metrics: metrics,\n            OptOut: optOut,\n            ...(shouldAddUser && {\n                User: {\n                    UserId: resolvedUserId,\n                    UserAttributes: userAttributes,\n                },\n            }),\n        },\n    };\n    try {\n        await clientUpdateEndpoint({ credentials, region, userAgentValue }, input);\n        // if we had to create an endpoint id, we need to now cache it\n        if (createdEndpointId) {\n            await cacheEndpointId(appId, category, createdEndpointId);\n        }\n    }\n    finally {\n        // at this point, we completely reset the behavior so even if the update was unsuccessful\n        // we can just start over with a newly created endpoint id\n        if (createdEndpointId) {\n            clearCreatedEndpointId(appId, category);\n        }\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}