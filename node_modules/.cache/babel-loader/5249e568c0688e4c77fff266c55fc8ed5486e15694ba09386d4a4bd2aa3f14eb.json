{"ast":null,"code":"import _objectSpread from \"/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError.mjs';\nimport { handleCustomAuthFlowWithoutSRP, getActiveSignInUsername, getSignInResult, getSignInResultFromError } from '../utils/signInHelpers.mjs';\nimport { setActiveSignInState, resetActiveSignInState } from '../../../client/utils/store/signInStore.mjs';\nimport { cacheCognitoTokens } from '../tokenProvider/cacheTokens.mjs';\nimport '../utils/refreshAuthTokens.mjs';\nimport '../tokenProvider/errorHelpers.mjs';\nimport '../utils/types.mjs';\nimport { tokenOrchestrator } from '../tokenProvider/tokenProvider.mjs';\nimport { dispatchSignedInHubEvent } from '../utils/dispatchSignedInHubEvent.mjs';\nimport { retryOnResourceNotFoundException } from '../utils/retryOnResourceNotFoundException.mjs';\nimport { getNewDeviceMetadata } from '../utils/getNewDeviceMetadata.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Signs a user in using a custom authentication flow without password\n *\n * @param input -  The SignInWithCustomAuthInput object\n * @returns AuthSignInResult\n * @throws service: {@link InitiateAuthException } - Cognito service errors thrown during the sign-in process.\n * @throws validation: {@link AuthValidationErrorCode  } - Validation errors thrown when either username or password\n *  are not defined.\n * @throws SignInWithCustomAuthOutput - Thrown when the token provider config is invalid.\n */\nasync function signInWithCustomAuth(input) {\n  var _Amplify$getConfig$Au;\n  const authConfig = (_Amplify$getConfig$Au = Amplify.getConfig().Auth) === null || _Amplify$getConfig$Au === void 0 ? void 0 : _Amplify$getConfig$Au.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    username,\n    password,\n    options\n  } = input;\n  const signInDetails = {\n    loginId: username,\n    authFlowType: 'CUSTOM_WITHOUT_SRP'\n  };\n  const metadata = options === null || options === void 0 ? void 0 : options.clientMetadata;\n  assertValidationError(!!username, AuthValidationErrorCode.EmptySignInUsername);\n  assertValidationError(!password, AuthValidationErrorCode.CustomAuthSignInPassword);\n  try {\n    const {\n      ChallengeName: retriedChallengeName,\n      ChallengeParameters: retiredChallengeParameters,\n      AuthenticationResult,\n      Session\n    } = await retryOnResourceNotFoundException(handleCustomAuthFlowWithoutSRP, [username, metadata, authConfig, tokenOrchestrator], username, tokenOrchestrator);\n    const activeUsername = getActiveSignInUsername(username);\n    // sets up local state used during the sign-in process\n    setActiveSignInState({\n      signInSession: Session,\n      username: activeUsername,\n      challengeName: retriedChallengeName,\n      signInDetails\n    });\n    if (AuthenticationResult) {\n      await cacheCognitoTokens(_objectSpread(_objectSpread({\n        username: activeUsername\n      }, AuthenticationResult), {}, {\n        NewDeviceMetadata: await getNewDeviceMetadata({\n          userPoolId: authConfig.userPoolId,\n          userPoolEndpoint: authConfig.userPoolEndpoint,\n          newDeviceMetadata: AuthenticationResult.NewDeviceMetadata,\n          accessToken: AuthenticationResult.AccessToken\n        }),\n        signInDetails\n      }));\n      resetActiveSignInState();\n      await dispatchSignedInHubEvent();\n      return {\n        isSignedIn: true,\n        nextStep: {\n          signInStep: 'DONE'\n        }\n      };\n    }\n    return getSignInResult({\n      challengeName: retriedChallengeName,\n      challengeParameters: retiredChallengeParameters\n    });\n  } catch (error) {\n    resetActiveSignInState();\n    assertServiceError(error);\n    const result = getSignInResultFromError(error.name);\n    if (result) return result;\n    throw error;\n  }\n}\nexport { signInWithCustomAuth };","map":{"version":3,"names":["signInWithCustomAuth","input","_Amplify$getConfig$Au","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","username","password","options","signInDetails","loginId","authFlowType","metadata","clientMetadata","assertValidationError","AuthValidationErrorCode","EmptySignInUsername","CustomAuthSignInPassword","ChallengeName","retriedChallengeName","ChallengeParameters","retiredChallengeParameters","AuthenticationResult","Session","retryOnResourceNotFoundException","handleCustomAuthFlowWithoutSRP","tokenOrchestrator","activeUsername","getActiveSignInUsername","setActiveSignInState","signInSession","challengeName","cacheCognitoTokens","_objectSpread","NewDeviceMetadata","getNewDeviceMetadata","userPoolId","userPoolEndpoint","newDeviceMetadata","accessToken","AccessToken","resetActiveSignInState","dispatchSignedInHubEvent","isSignedIn","nextStep","signInStep","getSignInResult","challengeParameters","error","assertServiceError","result","getSignInResultFromError","name"],"sources":["/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@aws-amplify/auth/src/providers/cognito/apis/signInWithCustomAuth.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError';\nimport { getActiveSignInUsername, getSignInResult, getSignInResultFromError, handleCustomAuthFlowWithoutSRP, } from '../utils/signInHelpers';\nimport { resetActiveSignInState, setActiveSignInState, } from '../../../client/utils/store/signInStore';\nimport { cacheCognitoTokens } from '../tokenProvider/cacheTokens';\nimport { tokenOrchestrator } from '../tokenProvider';\nimport { dispatchSignedInHubEvent } from '../utils/dispatchSignedInHubEvent';\nimport { retryOnResourceNotFoundException } from '../utils/retryOnResourceNotFoundException';\nimport { getNewDeviceMetadata } from '../utils/getNewDeviceMetadata';\n/**\n * Signs a user in using a custom authentication flow without password\n *\n * @param input -  The SignInWithCustomAuthInput object\n * @returns AuthSignInResult\n * @throws service: {@link InitiateAuthException } - Cognito service errors thrown during the sign-in process.\n * @throws validation: {@link AuthValidationErrorCode  } - Validation errors thrown when either username or password\n *  are not defined.\n * @throws SignInWithCustomAuthOutput - Thrown when the token provider config is invalid.\n */\nexport async function signInWithCustomAuth(input) {\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { username, password, options } = input;\n    const signInDetails = {\n        loginId: username,\n        authFlowType: 'CUSTOM_WITHOUT_SRP',\n    };\n    const metadata = options?.clientMetadata;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptySignInUsername);\n    assertValidationError(!password, AuthValidationErrorCode.CustomAuthSignInPassword);\n    try {\n        const { ChallengeName: retriedChallengeName, ChallengeParameters: retiredChallengeParameters, AuthenticationResult, Session, } = await retryOnResourceNotFoundException(handleCustomAuthFlowWithoutSRP, [username, metadata, authConfig, tokenOrchestrator], username, tokenOrchestrator);\n        const activeUsername = getActiveSignInUsername(username);\n        // sets up local state used during the sign-in process\n        setActiveSignInState({\n            signInSession: Session,\n            username: activeUsername,\n            challengeName: retriedChallengeName,\n            signInDetails,\n        });\n        if (AuthenticationResult) {\n            await cacheCognitoTokens({\n                username: activeUsername,\n                ...AuthenticationResult,\n                NewDeviceMetadata: await getNewDeviceMetadata({\n                    userPoolId: authConfig.userPoolId,\n                    userPoolEndpoint: authConfig.userPoolEndpoint,\n                    newDeviceMetadata: AuthenticationResult.NewDeviceMetadata,\n                    accessToken: AuthenticationResult.AccessToken,\n                }),\n                signInDetails,\n            });\n            resetActiveSignInState();\n            await dispatchSignedInHubEvent();\n            return {\n                isSignedIn: true,\n                nextStep: { signInStep: 'DONE' },\n            };\n        }\n        return getSignInResult({\n            challengeName: retriedChallengeName,\n            challengeParameters: retiredChallengeParameters,\n        });\n    }\n    catch (error) {\n        resetActiveSignInState();\n        assertServiceError(error);\n        const result = getSignInResultFromError(error.name);\n        if (result)\n            return result;\n        throw error;\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,oBAAoBA,CAACC,KAAK,EAAE;EAAA,IAAAC,qBAAA;EAC9C,MAAMC,UAAU,IAAAD,qBAAA,GAAGE,OAAO,CAACC,SAAS,EAAE,CAACC,IAAI,cAAAJ,qBAAA,uBAAxBA,qBAAA,CAA0BK,OAAO;EACpDC,yBAAyB,CAACL,UAAU,CAAC;EACrC,MAAM;IAAEM,QAAQ;IAAEC,QAAQ;IAAEC;EAAO,CAAE,GAAGV,KAAK;EAC7C,MAAMW,aAAa,GAAG;IAClBC,OAAO,EAAEJ,QAAQ;IACjBK,YAAY,EAAE;EACtB,CAAK;EACD,MAAMC,QAAQ,GAAGJ,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEK,cAAc;EACxCC,qBAAqB,CAAC,CAAC,CAACR,QAAQ,EAAES,uBAAuB,CAACC,mBAAmB,CAAC;EAC9EF,qBAAqB,CAAC,CAACP,QAAQ,EAAEQ,uBAAuB,CAACE,wBAAwB,CAAC;EAClF,IAAI;IACA,MAAM;MAAEC,aAAa,EAAEC,oBAAoB;MAAEC,mBAAmB,EAAEC,0BAA0B;MAAEC,oBAAoB;MAAEC;IAAO,CAAG,GAAG,MAAMC,gCAAgC,CAACC,8BAA8B,EAAE,CAACnB,QAAQ,EAAEM,QAAQ,EAAEZ,UAAU,EAAE0B,iBAAiB,CAAC,EAAEpB,QAAQ,EAAEoB,iBAAiB,CAAC;IACzR,MAAMC,cAAc,GAAGC,uBAAuB,CAACtB,QAAQ,CAAC;IAChE;IACQuB,oBAAoB,CAAC;MACjBC,aAAa,EAAEP,OAAO;MACtBjB,QAAQ,EAAEqB,cAAc;MACxBI,aAAa,EAAEZ,oBAAoB;MACnCV;IACZ,CAAS,CAAC;IACF,IAAIa,oBAAoB,EAAE;MACtB,MAAMU,kBAAkB,CAAAC,aAAA,CAAAA,aAAA;QACpB3B,QAAQ,EAAEqB;MAAc,GACrBL,oBAAoB;QACvBY,iBAAiB,EAAE,MAAMC,oBAAoB,CAAC;UAC1CC,UAAU,EAAEpC,UAAU,CAACoC,UAAU;UACjCC,gBAAgB,EAAErC,UAAU,CAACqC,gBAAgB;UAC7CC,iBAAiB,EAAEhB,oBAAoB,CAACY,iBAAiB;UACzDK,WAAW,EAAEjB,oBAAoB,CAACkB;QACtD,CAAiB,CAAC;QACF/B;MAAa,EAChB,CAAC;MACFgC,sBAAsB,EAAE;MACxB,MAAMC,wBAAwB,EAAE;MAChC,OAAO;QACHC,UAAU,EAAE,IAAI;QAChBC,QAAQ,EAAE;UAAEC,UAAU,EAAE;QAAM;MAC9C,CAAa;IACL;IACA,OAAOC,eAAe,CAAC;MACnBf,aAAa,EAAEZ,oBAAoB;MACnC4B,mBAAmB,EAAE1B;IACjC,CAAS,CAAC;EACN,EACA,OAAO2B,KAAK,EAAE;IACVP,sBAAsB,EAAE;IACxBQ,kBAAkB,CAACD,KAAK,CAAC;IACzB,MAAME,MAAM,GAAGC,wBAAwB,CAACH,KAAK,CAACI,IAAI,CAAC;IACnD,IAAIF,MAAM,EACN,OAAOA,MAAM;IACjB,MAAMF,KAAK;EACf;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}