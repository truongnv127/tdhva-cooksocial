{"ast":null,"code":"import { base64Decoder } from '../../../utils/convert/base64/base64Decoder.mjs';\nimport '../../../types/errors.mjs';\nimport '../../../errors/errorHelpers.mjs';\nimport { assert, AuthConfigurationErrorCode } from './errorHelpers.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nfunction assertTokenProviderConfig(cognitoConfig) {\n  let assertionValid = true; // assume valid until otherwise proveed\n  if (!cognitoConfig) {\n    assertionValid = false;\n  } else {\n    assertionValid = !!cognitoConfig.userPoolId && !!cognitoConfig.userPoolClientId;\n  }\n  assert(assertionValid, AuthConfigurationErrorCode.AuthUserPoolException);\n}\nfunction assertOAuthConfig(cognitoConfig) {\n  var _cognitoConfig$loginW, _cognitoConfig$loginW2, _cognitoConfig$loginW3, _cognitoConfig$loginW4;\n  const validOAuthConfig = !!(cognitoConfig !== null && cognitoConfig !== void 0 && (_cognitoConfig$loginW = cognitoConfig.loginWith) !== null && _cognitoConfig$loginW !== void 0 && (_cognitoConfig$loginW = _cognitoConfig$loginW.oauth) !== null && _cognitoConfig$loginW !== void 0 && _cognitoConfig$loginW.domain) && !!(cognitoConfig !== null && cognitoConfig !== void 0 && (_cognitoConfig$loginW2 = cognitoConfig.loginWith) !== null && _cognitoConfig$loginW2 !== void 0 && (_cognitoConfig$loginW2 = _cognitoConfig$loginW2.oauth) !== null && _cognitoConfig$loginW2 !== void 0 && _cognitoConfig$loginW2.redirectSignOut) && !!(cognitoConfig !== null && cognitoConfig !== void 0 && (_cognitoConfig$loginW3 = cognitoConfig.loginWith) !== null && _cognitoConfig$loginW3 !== void 0 && (_cognitoConfig$loginW3 = _cognitoConfig$loginW3.oauth) !== null && _cognitoConfig$loginW3 !== void 0 && _cognitoConfig$loginW3.redirectSignIn) && !!(cognitoConfig !== null && cognitoConfig !== void 0 && (_cognitoConfig$loginW4 = cognitoConfig.loginWith) !== null && _cognitoConfig$loginW4 !== void 0 && (_cognitoConfig$loginW4 = _cognitoConfig$loginW4.oauth) !== null && _cognitoConfig$loginW4 !== void 0 && _cognitoConfig$loginW4.responseType);\n  assert(validOAuthConfig, AuthConfigurationErrorCode.OAuthNotConfigureException);\n}\nfunction assertIdentityPoolIdConfig(cognitoConfig) {\n  const validConfig = !!(cognitoConfig !== null && cognitoConfig !== void 0 && cognitoConfig.identityPoolId);\n  assert(validConfig, AuthConfigurationErrorCode.InvalidIdentityPoolIdException);\n}\n/**\n * Decodes payload of JWT token\n *\n * @param {String} token A string representing a token to be decoded\n * @throws {@link Error} - Throws error when token is invalid or payload malformed.\n */\nfunction decodeJWT(token) {\n  const tokenParts = token.split('.');\n  if (tokenParts.length !== 3) {\n    throw new Error('Invalid token');\n  }\n  try {\n    const base64WithUrlSafe = tokenParts[1];\n    const base64 = base64WithUrlSafe.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonStr = decodeURIComponent(base64Decoder.convert(base64).split('').map(char => \"%\".concat(\"00\".concat(char.charCodeAt(0).toString(16)).slice(-2))).join(''));\n    const payload = JSON.parse(jsonStr);\n    return {\n      toString: () => token,\n      payload\n    };\n  } catch (err) {\n    throw new Error('Invalid token payload');\n  }\n}\nexport { assertIdentityPoolIdConfig, assertOAuthConfig, assertTokenProviderConfig, decodeJWT };","map":{"version":3,"names":["assertTokenProviderConfig","cognitoConfig","assertionValid","userPoolId","userPoolClientId","assert","AuthConfigurationErrorCode","AuthUserPoolException","assertOAuthConfig","_cognitoConfig$loginW","_cognitoConfig$loginW2","_cognitoConfig$loginW3","_cognitoConfig$loginW4","validOAuthConfig","loginWith","oauth","domain","redirectSignOut","redirectSignIn","responseType","OAuthNotConfigureException","assertIdentityPoolIdConfig","validConfig","identityPoolId","InvalidIdentityPoolIdException","decodeJWT","token","tokenParts","split","length","Error","base64WithUrlSafe","base64","replace","jsonStr","decodeURIComponent","base64Decoder","convert","map","char","concat","charCodeAt","toString","slice","join","payload","JSON","parse","err"],"sources":["/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@aws-amplify/core/src/singleton/Auth/utils/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { base64Decoder } from '../../../utils/convert';\nimport { AuthConfigurationErrorCode, assert } from './errorHelpers';\nexport function assertTokenProviderConfig(cognitoConfig) {\n    let assertionValid = true; // assume valid until otherwise proveed\n    if (!cognitoConfig) {\n        assertionValid = false;\n    }\n    else {\n        assertionValid =\n            !!cognitoConfig.userPoolId && !!cognitoConfig.userPoolClientId;\n    }\n    assert(assertionValid, AuthConfigurationErrorCode.AuthUserPoolException);\n}\nexport function assertOAuthConfig(cognitoConfig) {\n    const validOAuthConfig = !!cognitoConfig?.loginWith?.oauth?.domain &&\n        !!cognitoConfig?.loginWith?.oauth?.redirectSignOut &&\n        !!cognitoConfig?.loginWith?.oauth?.redirectSignIn &&\n        !!cognitoConfig?.loginWith?.oauth?.responseType;\n    assert(validOAuthConfig, AuthConfigurationErrorCode.OAuthNotConfigureException);\n}\nexport function assertIdentityPoolIdConfig(cognitoConfig) {\n    const validConfig = !!cognitoConfig?.identityPoolId;\n    assert(validConfig, AuthConfigurationErrorCode.InvalidIdentityPoolIdException);\n}\n/**\n * Decodes payload of JWT token\n *\n * @param {String} token A string representing a token to be decoded\n * @throws {@link Error} - Throws error when token is invalid or payload malformed.\n */\nexport function decodeJWT(token) {\n    const tokenParts = token.split('.');\n    if (tokenParts.length !== 3) {\n        throw new Error('Invalid token');\n    }\n    try {\n        const base64WithUrlSafe = tokenParts[1];\n        const base64 = base64WithUrlSafe.replace(/-/g, '+').replace(/_/g, '/');\n        const jsonStr = decodeURIComponent(base64Decoder\n            .convert(base64)\n            .split('')\n            .map(char => `%${`00${char.charCodeAt(0).toString(16)}`.slice(-2)}`)\n            .join(''));\n        const payload = JSON.parse(jsonStr);\n        return {\n            toString: () => token,\n            payload,\n        };\n    }\n    catch (err) {\n        throw new Error('Invalid token payload');\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}