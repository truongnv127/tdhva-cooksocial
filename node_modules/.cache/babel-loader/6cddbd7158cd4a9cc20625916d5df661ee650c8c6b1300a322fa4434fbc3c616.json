{"ast":null,"code":"import { AuthError } from '../../../errors/AuthError.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../types/errors.mjs';\nimport { createRespondToAuthChallengeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\nimport '@aws-amplify/core';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport BigInteger from './srp/BigInteger/BigInteger.mjs';\nimport './srp/constants.mjs';\nimport '@aws-crypto/sha256-js';\nimport { getNowString } from './srp/getNowString.mjs';\nimport { getSignatureString } from './srp/getSignatureString.mjs';\nimport { getUserContextData } from './userContextData.mjs';\nimport { handleDeviceSRPAuth } from './handleDeviceSRPAuth.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nasync function handlePasswordVerifierChallenge(password, challengeParameters, clientMetadata, session, authenticationHelper, config, tokenOrchestrator) {\n  const {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = config;\n  const userPoolName = userPoolId?.split('_')[1] || '';\n  const serverBValue = new BigInteger(challengeParameters?.SRP_B, 16);\n  const salt = new BigInteger(challengeParameters?.SALT, 16);\n  const username = challengeParameters?.USER_ID_FOR_SRP;\n  if (!username) throw new AuthError({\n    name: 'EmptyUserIdForSRPException',\n    message: 'USER_ID_FOR_SRP was not found in challengeParameters'\n  });\n  const hkdf = await authenticationHelper.getPasswordAuthenticationKey({\n    username,\n    password,\n    serverBValue,\n    salt\n  });\n  const dateNow = getNowString();\n  const challengeResponses = {\n    USERNAME: username,\n    PASSWORD_CLAIM_SECRET_BLOCK: challengeParameters?.SECRET_BLOCK,\n    TIMESTAMP: dateNow,\n    PASSWORD_CLAIM_SIGNATURE: getSignatureString({\n      username,\n      userPoolName,\n      challengeParameters,\n      dateNow,\n      hkdf\n    })\n  };\n  const deviceMetadata = await tokenOrchestrator.getDeviceMetadata(username);\n  if (deviceMetadata && deviceMetadata.deviceKey) {\n    challengeResponses.DEVICE_KEY = deviceMetadata.deviceKey;\n  }\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const jsonReqResponseChallenge = {\n    ChallengeName: 'PASSWORD_VERIFIER',\n    ChallengeResponses: challengeResponses,\n    ClientMetadata: clientMetadata,\n    Session: session,\n    ClientId: userPoolClientId,\n    UserContextData\n  };\n  const respondToAuthChallenge = createRespondToAuthChallengeClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const response = await respondToAuthChallenge({\n    region: getRegionFromUserPoolId(userPoolId)\n  }, jsonReqResponseChallenge);\n  if (response.ChallengeName === 'DEVICE_SRP_AUTH') return handleDeviceSRPAuth({\n    username,\n    config,\n    clientMetadata,\n    session: response.Session,\n    tokenOrchestrator\n  });\n  return response;\n}\nexport { handlePasswordVerifierChallenge };","map":{"version":3,"names":["handlePasswordVerifierChallenge","password","challengeParameters","clientMetadata","session","authenticationHelper","config","tokenOrchestrator","userPoolId","userPoolClientId","userPoolEndpoint","userPoolName","split","serverBValue","BigInteger","SRP_B","salt","SALT","username","USER_ID_FOR_SRP","AuthError","name","message","hkdf","getPasswordAuthenticationKey","dateNow","getNowString","challengeResponses","USERNAME","PASSWORD_CLAIM_SECRET_BLOCK","SECRET_BLOCK","TIMESTAMP","PASSWORD_CLAIM_SIGNATURE","getSignatureString","deviceMetadata","getDeviceMetadata","deviceKey","DEVICE_KEY","UserContextData","getUserContextData","jsonReqResponseChallenge","ChallengeName","ChallengeResponses","ClientMetadata","Session","ClientId","respondToAuthChallenge","createRespondToAuthChallengeClient","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","response","region","getRegionFromUserPoolId","handleDeviceSRPAuth"],"sources":["/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/node_modules/@aws-amplify/auth/src/providers/cognito/utils/handlePasswordVerifierChallenge.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AuthError } from '../../../errors/AuthError';\nimport { createRespondToAuthChallengeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { getNowString, getSignatureString } from './srp';\nimport { BigInteger } from './srp/BigInteger';\nimport { getUserContextData } from './userContextData';\nimport { handleDeviceSRPAuth } from './handleDeviceSRPAuth';\nexport async function handlePasswordVerifierChallenge(password, challengeParameters, clientMetadata, session, authenticationHelper, config, tokenOrchestrator) {\n    const { userPoolId, userPoolClientId, userPoolEndpoint } = config;\n    const userPoolName = userPoolId?.split('_')[1] || '';\n    const serverBValue = new BigInteger(challengeParameters?.SRP_B, 16);\n    const salt = new BigInteger(challengeParameters?.SALT, 16);\n    const username = challengeParameters?.USER_ID_FOR_SRP;\n    if (!username)\n        throw new AuthError({\n            name: 'EmptyUserIdForSRPException',\n            message: 'USER_ID_FOR_SRP was not found in challengeParameters',\n        });\n    const hkdf = await authenticationHelper.getPasswordAuthenticationKey({\n        username,\n        password,\n        serverBValue,\n        salt,\n    });\n    const dateNow = getNowString();\n    const challengeResponses = {\n        USERNAME: username,\n        PASSWORD_CLAIM_SECRET_BLOCK: challengeParameters?.SECRET_BLOCK,\n        TIMESTAMP: dateNow,\n        PASSWORD_CLAIM_SIGNATURE: getSignatureString({\n            username,\n            userPoolName,\n            challengeParameters,\n            dateNow,\n            hkdf,\n        }),\n    };\n    const deviceMetadata = await tokenOrchestrator.getDeviceMetadata(username);\n    if (deviceMetadata && deviceMetadata.deviceKey) {\n        challengeResponses.DEVICE_KEY = deviceMetadata.deviceKey;\n    }\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const jsonReqResponseChallenge = {\n        ChallengeName: 'PASSWORD_VERIFIER',\n        ChallengeResponses: challengeResponses,\n        ClientMetadata: clientMetadata,\n        Session: session,\n        ClientId: userPoolClientId,\n        UserContextData,\n    };\n    const respondToAuthChallenge = createRespondToAuthChallengeClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const response = await respondToAuthChallenge({ region: getRegionFromUserPoolId(userPoolId) }, jsonReqResponseChallenge);\n    if (response.ChallengeName === 'DEVICE_SRP_AUTH')\n        return handleDeviceSRPAuth({\n            username,\n            config,\n            clientMetadata,\n            session: response.Session,\n            tokenOrchestrator,\n        });\n    return response;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AASO,eAAeA,+BAA+BA,CAACC,QAAQ,EAAEC,mBAAmB,EAAEC,cAAc,EAAEC,OAAO,EAAEC,oBAAoB,EAAEC,MAAM,EAAEC,iBAAiB,EAAE;EAC3J,MAAM;IAAEC,UAAU;IAAEC,gBAAgB;IAAEC;EAAgB,CAAE,GAAGJ,MAAM;EACjE,MAAMK,YAAY,GAAGH,UAAU,EAAEI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;EACpD,MAAMC,YAAY,GAAG,IAAIC,UAAU,CAACZ,mBAAmB,EAAEa,KAAK,EAAE,EAAE,CAAC;EACnE,MAAMC,IAAI,GAAG,IAAIF,UAAU,CAACZ,mBAAmB,EAAEe,IAAI,EAAE,EAAE,CAAC;EAC1D,MAAMC,QAAQ,GAAGhB,mBAAmB,EAAEiB,eAAe;EACrD,IAAI,CAACD,QAAQ,EACT,MAAM,IAAIE,SAAS,CAAC;IAChBC,IAAI,EAAE,4BAA4B;IAClCC,OAAO,EAAE;EACrB,CAAS,CAAC;EACN,MAAMC,IAAI,GAAG,MAAMlB,oBAAoB,CAACmB,4BAA4B,CAAC;IACjEN,QAAQ;IACRjB,QAAQ;IACRY,YAAY;IACZG;EACR,CAAK,CAAC;EACF,MAAMS,OAAO,GAAGC,YAAY,EAAE;EAC9B,MAAMC,kBAAkB,GAAG;IACvBC,QAAQ,EAAEV,QAAQ;IAClBW,2BAA2B,EAAE3B,mBAAmB,EAAE4B,YAAY;IAC9DC,SAAS,EAAEN,OAAO;IAClBO,wBAAwB,EAAEC,kBAAkB,CAAC;MACzCf,QAAQ;MACRP,YAAY;MACZT,mBAAmB;MACnBuB,OAAO;MACPF;IACZ,CAAS;EACT,CAAK;EACD,MAAMW,cAAc,GAAG,MAAM3B,iBAAiB,CAAC4B,iBAAiB,CAACjB,QAAQ,CAAC;EAC1E,IAAIgB,cAAc,IAAIA,cAAc,CAACE,SAAS,EAAE;IAC5CT,kBAAkB,CAACU,UAAU,GAAGH,cAAc,CAACE,SAAS;EAC5D;EACA,MAAME,eAAe,GAAGC,kBAAkB,CAAC;IACvCrB,QAAQ;IACRV,UAAU;IACVC;EACR,CAAK,CAAC;EACF,MAAM+B,wBAAwB,GAAG;IAC7BC,aAAa,EAAE,mBAAmB;IAClCC,kBAAkB,EAAEf,kBAAkB;IACtCgB,cAAc,EAAExC,cAAc;IAC9ByC,OAAO,EAAExC,OAAO;IAChByC,QAAQ,EAAEpC,gBAAgB;IAC1B6B;EACR,CAAK;EACD,MAAMQ,sBAAsB,GAAGC,kCAAkC,CAAC;IAC9DC,gBAAgB,EAAEC,qCAAqC,CAAC;MACpDC,gBAAgB,EAAExC;IAC9B,CAAS;EACT,CAAK,CAAC;EACF,MAAMyC,QAAQ,GAAG,MAAML,sBAAsB,CAAC;IAAEM,MAAM,EAAEC,uBAAuB,CAAC7C,UAAU;EAAC,CAAE,EAAEgC,wBAAwB,CAAC;EACxH,IAAIW,QAAQ,CAACV,aAAa,KAAK,iBAAiB,EAC5C,OAAOa,mBAAmB,CAAC;IACvBpC,QAAQ;IACRZ,MAAM;IACNH,cAAc;IACdC,OAAO,EAAE+C,QAAQ,CAACP,OAAO;IACzBrC;EACZ,CAAS,CAAC;EACN,OAAO4C,QAAQ;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}