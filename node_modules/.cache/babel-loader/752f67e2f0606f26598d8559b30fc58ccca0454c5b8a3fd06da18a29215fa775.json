{"ast":null,"code":"import { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { SETUP_TOTP_EXCEPTION } from '../types/errors.mjs';\nimport { getTOTPSetupDetails } from '../utils/signInHelpers.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { assertAuthTokens } from '../utils/types.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport { createAssociateSoftwareTokenClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createAssociateSoftwareTokenClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Sets up TOTP for the user.\n *\n * @returns SetUpTOTPOutput\n * @throws -{@link AssociateSoftwareTokenException}\n * Thrown if a service occurs while setting up TOTP.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n **/\nasync function setUpTOTP() {\n  var _Amplify$getConfig$Au, _tokens$idToken$paylo, _tokens$idToken;\n  const authConfig = (_Amplify$getConfig$Au = Amplify.getConfig().Auth) === null || _Amplify$getConfig$Au === void 0 ? void 0 : _Amplify$getConfig$Au.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolEndpoint,\n    userPoolId\n  } = authConfig;\n  const {\n    tokens\n  } = await fetchAuthSession({\n    forceRefresh: false\n  });\n  assertAuthTokens(tokens);\n  const username = (_tokens$idToken$paylo = (_tokens$idToken = tokens.idToken) === null || _tokens$idToken === void 0 ? void 0 : _tokens$idToken.payload['cognito:username']) !== null && _tokens$idToken$paylo !== void 0 ? _tokens$idToken$paylo : '';\n  const associateSoftwareToken = createAssociateSoftwareTokenClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const {\n    SecretCode\n  } = await associateSoftwareToken({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.SetUpTOTP)\n  }, {\n    AccessToken: tokens.accessToken.toString()\n  });\n  if (!SecretCode) {\n    // This should never happen.\n    throw new AuthError({\n      name: SETUP_TOTP_EXCEPTION,\n      message: 'Failed to set up TOTP.'\n    });\n  }\n  return getTOTPSetupDetails(SecretCode, JSON.stringify(username));\n}\nexport { setUpTOTP };","map":{"version":3,"names":["setUpTOTP","_Amplify$getConfig$Au","_tokens$idToken$paylo","_tokens$idToken","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","userPoolEndpoint","userPoolId","tokens","fetchAuthSession","forceRefresh","assertAuthTokens","username","idToken","payload","associateSoftwareToken","createAssociateSoftwareTokenClient","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","SecretCode","region","getRegionFromUserPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","SetUpTOTP","AccessToken","accessToken","toString","AuthError","name","SETUP_TOTP_EXCEPTION","message","getTOTPSetupDetails","JSON","stringify"],"sources":["/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@aws-amplify/auth/src/providers/cognito/apis/setUpTOTP.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { AuthError } from '../../../errors/AuthError';\nimport { SETUP_TOTP_EXCEPTION, } from '../types/errors';\nimport { getTOTPSetupDetails } from '../utils/signInHelpers';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { assertAuthTokens } from '../utils/types';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { createAssociateSoftwareTokenClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\n/**\n * Sets up TOTP for the user.\n *\n * @returns SetUpTOTPOutput\n * @throws -{@link AssociateSoftwareTokenException}\n * Thrown if a service occurs while setting up TOTP.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n **/\nexport async function setUpTOTP() {\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolEndpoint, userPoolId } = authConfig;\n    const { tokens } = await fetchAuthSession({ forceRefresh: false });\n    assertAuthTokens(tokens);\n    const username = tokens.idToken?.payload['cognito:username'] ?? '';\n    const associateSoftwareToken = createAssociateSoftwareTokenClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const { SecretCode } = await associateSoftwareToken({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.SetUpTOTP),\n    }, {\n        AccessToken: tokens.accessToken.toString(),\n    });\n    if (!SecretCode) {\n        // This should never happen.\n        throw new AuthError({\n            name: SETUP_TOTP_EXCEPTION,\n            message: 'Failed to set up TOTP.',\n        });\n    }\n    return getTOTPSetupDetails(SecretCode, JSON.stringify(username));\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,SAASA,CAAA,EAAG;EAAA,IAAAC,qBAAA,EAAAC,qBAAA,EAAAC,eAAA;EAC9B,MAAMC,UAAU,IAAAH,qBAAA,GAAGI,OAAO,CAACC,SAAS,EAAE,CAACC,IAAI,cAAAN,qBAAA,uBAAxBA,qBAAA,CAA0BO,OAAO;EACpDC,yBAAyB,CAACL,UAAU,CAAC;EACrC,MAAM;IAAEM,gBAAgB;IAAEC;EAAU,CAAE,GAAGP,UAAU;EACnD,MAAM;IAAEQ;EAAM,CAAE,GAAG,MAAMC,gBAAgB,CAAC;IAAEC,YAAY,EAAE;EAAK,CAAE,CAAC;EAClEC,gBAAgB,CAACH,MAAM,CAAC;EACxB,MAAMI,QAAQ,IAAAd,qBAAA,IAAAC,eAAA,GAAGS,MAAM,CAACK,OAAO,cAAAd,eAAA,uBAAdA,eAAA,CAAgBe,OAAO,CAAC,kBAAkB,CAAC,cAAAhB,qBAAA,cAAAA,qBAAA,GAAI,EAAE;EAClE,MAAMiB,sBAAsB,GAAGC,kCAAkC,CAAC;IAC9DC,gBAAgB,EAAEC,qCAAqC,CAAC;MACpDC,gBAAgB,EAAEb;IAC9B,CAAS;EACT,CAAK,CAAC;EACF,MAAM;IAAEc;EAAU,CAAE,GAAG,MAAML,sBAAsB,CAAC;IAChDM,MAAM,EAAEC,uBAAuB,CAACf,UAAU,CAAC;IAC3CgB,cAAc,EAAEC,qBAAqB,CAACC,UAAU,CAACC,SAAS;EAClE,CAAK,EAAE;IACCC,WAAW,EAAEnB,MAAM,CAACoB,WAAW,CAACC,QAAQ;EAChD,CAAK,CAAC;EACF,IAAI,CAACT,UAAU,EAAE;IACrB;IACQ,MAAM,IAAIU,SAAS,CAAC;MAChBC,IAAI,EAAEC,oBAAoB;MAC1BC,OAAO,EAAE;IACrB,CAAS,CAAC;EACN;EACA,OAAOC,mBAAmB,CAACd,UAAU,EAAEe,IAAI,CAACC,SAAS,CAACxB,QAAQ,CAAC,CAAC;AACpE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}