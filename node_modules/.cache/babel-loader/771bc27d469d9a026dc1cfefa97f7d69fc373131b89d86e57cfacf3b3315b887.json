{"ast":null,"code":"import { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { assertAuthTokens } from '../utils/types.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../types/errors.mjs';\nimport { createListDevicesClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createListDevicesClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n// Cognito Documentation for max device\n// https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ListDevices.html#API_ListDevices_RequestSyntax\nconst MAX_DEVICES = 60;\n/**\n * Fetches devices that have been remembered using {@link rememberDevice}\n * for the currently authenticated user.\n *\n * @returns FetchDevicesOutput\n * @throws {@link ListDevicesException}\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function fetchDevices() {\n  var _Amplify$getConfig$Au, _response$Devices;\n  const authConfig = (_Amplify$getConfig$Au = Amplify.getConfig().Auth) === null || _Amplify$getConfig$Au === void 0 ? void 0 : _Amplify$getConfig$Au.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolEndpoint,\n    userPoolId\n  } = authConfig;\n  const {\n    tokens\n  } = await fetchAuthSession();\n  assertAuthTokens(tokens);\n  const listDevices = createListDevicesClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const response = await listDevices({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.FetchDevices)\n  }, {\n    AccessToken: tokens.accessToken.toString(),\n    Limit: MAX_DEVICES\n  });\n  return parseDevicesResponse((_response$Devices = response.Devices) !== null && _response$Devices !== void 0 ? _response$Devices : []);\n}\nconst parseDevicesResponse = async devices => {\n  return devices.map(_ref => {\n    let {\n      DeviceKey: id = '',\n      DeviceAttributes = [],\n      DeviceCreateDate,\n      DeviceLastModifiedDate,\n      DeviceLastAuthenticatedDate\n    } = _ref;\n    let deviceName;\n    const attributes = DeviceAttributes.reduce((attrs, _ref2) => {\n      let {\n        Name,\n        Value\n      } = _ref2;\n      if (Name && Value) {\n        if (Name === 'device_name') deviceName = Value;\n        attrs[Name] = Value;\n      }\n      return attrs;\n    }, {});\n    const result = {\n      id,\n      name: deviceName,\n      attributes,\n      createDate: DeviceCreateDate ? new Date(DeviceCreateDate * 1000) : undefined,\n      lastModifiedDate: DeviceLastModifiedDate ? new Date(DeviceLastModifiedDate * 1000) : undefined,\n      lastAuthenticatedDate: DeviceLastAuthenticatedDate ? new Date(DeviceLastAuthenticatedDate * 1000) : undefined\n    };\n    return result;\n  });\n};\nexport { fetchDevices };","map":{"version":3,"names":["MAX_DEVICES","fetchDevices","_Amplify$getConfig$Au","_response$Devices","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","userPoolEndpoint","userPoolId","tokens","fetchAuthSession","assertAuthTokens","listDevices","createListDevicesClient","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","response","region","getRegionFromUserPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","FetchDevices","AccessToken","accessToken","toString","Limit","parseDevicesResponse","Devices","devices","map","_ref","DeviceKey","id","DeviceAttributes","DeviceCreateDate","DeviceLastModifiedDate","DeviceLastAuthenticatedDate","deviceName","attributes","reduce","attrs","_ref2","Name","Value","result","name","createDate","Date","undefined","lastModifiedDate","lastAuthenticatedDate"],"sources":["/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@aws-amplify/auth/src/providers/cognito/apis/fetchDevices.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { assertAuthTokens } from '../utils/types';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { createListDevicesClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\n// Cognito Documentation for max device\n// https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ListDevices.html#API_ListDevices_RequestSyntax\nconst MAX_DEVICES = 60;\n/**\n * Fetches devices that have been remembered using {@link rememberDevice}\n * for the currently authenticated user.\n *\n * @returns FetchDevicesOutput\n * @throws {@link ListDevicesException}\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function fetchDevices() {\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolEndpoint, userPoolId } = authConfig;\n    const { tokens } = await fetchAuthSession();\n    assertAuthTokens(tokens);\n    const listDevices = createListDevicesClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const response = await listDevices({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.FetchDevices),\n    }, {\n        AccessToken: tokens.accessToken.toString(),\n        Limit: MAX_DEVICES,\n    });\n    return parseDevicesResponse(response.Devices ?? []);\n}\nconst parseDevicesResponse = async (devices) => {\n    return devices.map(({ DeviceKey: id = '', DeviceAttributes = [], DeviceCreateDate, DeviceLastModifiedDate, DeviceLastAuthenticatedDate, }) => {\n        let deviceName;\n        const attributes = DeviceAttributes.reduce((attrs, { Name, Value }) => {\n            if (Name && Value) {\n                if (Name === 'device_name')\n                    deviceName = Value;\n                attrs[Name] = Value;\n            }\n            return attrs;\n        }, {});\n        const result = {\n            id,\n            name: deviceName,\n            attributes,\n            createDate: DeviceCreateDate\n                ? new Date(DeviceCreateDate * 1000)\n                : undefined,\n            lastModifiedDate: DeviceLastModifiedDate\n                ? new Date(DeviceLastModifiedDate * 1000)\n                : undefined,\n            lastAuthenticatedDate: DeviceLastAuthenticatedDate\n                ? new Date(DeviceLastAuthenticatedDate * 1000)\n                : undefined,\n        };\n        return result;\n    });\n};\n"],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AAQA;AACA;AACA,MAAMA,WAAW,GAAG,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeC,YAAYA,CAAA,EAAG;EAAA,IAAAC,qBAAA,EAAAC,iBAAA;EACjC,MAAMC,UAAU,IAAAF,qBAAA,GAAGG,OAAO,CAACC,SAAS,EAAE,CAACC,IAAI,cAAAL,qBAAA,uBAAxBA,qBAAA,CAA0BM,OAAO;EACpDC,yBAAyB,CAACL,UAAU,CAAC;EACrC,MAAM;IAAEM,gBAAgB;IAAEC;EAAU,CAAE,GAAGP,UAAU;EACnD,MAAM;IAAEQ;EAAM,CAAE,GAAG,MAAMC,gBAAgB,EAAE;EAC3CC,gBAAgB,CAACF,MAAM,CAAC;EACxB,MAAMG,WAAW,GAAGC,uBAAuB,CAAC;IACxCC,gBAAgB,EAAEC,qCAAqC,CAAC;MACpDC,gBAAgB,EAAET;IAC9B,CAAS;EACT,CAAK,CAAC;EACF,MAAMU,QAAQ,GAAG,MAAML,WAAW,CAAC;IAC/BM,MAAM,EAAEC,uBAAuB,CAACX,UAAU,CAAC;IAC3CY,cAAc,EAAEC,qBAAqB,CAACC,UAAU,CAACC,YAAY;EACrE,CAAK,EAAE;IACCC,WAAW,EAAEf,MAAM,CAACgB,WAAW,CAACC,QAAQ,EAAE;IAC1CC,KAAK,EAAE9B;EACf,CAAK,CAAC;EACF,OAAO+B,oBAAoB,EAAA5B,iBAAA,GAACiB,QAAQ,CAACY,OAAO,cAAA7B,iBAAA,cAAAA,iBAAA,GAAI,EAAE,CAAC;AACvD;AACA,MAAM4B,oBAAoB,GAAG,MAAOE,OAAO,IAAK;EAC5C,OAAOA,OAAO,CAACC,GAAG,CAACC,IAAA,IAA2H;IAAA,IAA1H;MAAEC,SAAS,EAAEC,EAAE,GAAG,EAAE;MAAEC,gBAAgB,GAAG,EAAE;MAAEC,gBAAgB;MAAEC,sBAAsB;MAAEC;IAA2B,CAAG,GAAAN,IAAA;IACrI,IAAIO,UAAU;IACd,MAAMC,UAAU,GAAGL,gBAAgB,CAACM,MAAM,CAAC,CAACC,KAAK,EAAAC,KAAA,KAAsB;MAAA,IAApB;QAAEC,IAAI;QAAEC;MAAK,CAAE,GAAAF,KAAA;MAC9D,IAAIC,IAAI,IAAIC,KAAK,EAAE;QACf,IAAID,IAAI,KAAK,aAAa,EACtBL,UAAU,GAAGM,KAAK;QACtBH,KAAK,CAACE,IAAI,CAAC,GAAGC,KAAK;MACvB;MACA,OAAOH,KAAK;IAChB,CAAC,EAAE,EAAE,CAAC;IACN,MAAMI,MAAM,GAAG;MACXZ,EAAE;MACFa,IAAI,EAAER,UAAU;MAChBC,UAAU;MACVQ,UAAU,EAAEZ,gBAAA,GACN,IAAIa,IAAI,CAACb,gBAAgB,GAAG,IAAI,IAChCc,SAAS;MACfC,gBAAgB,EAAEd,sBAAA,GACZ,IAAIY,IAAI,CAACZ,sBAAsB,GAAG,IAAI,IACtCa,SAAS;MACfE,qBAAqB,EAAEd,2BAAA,GACjB,IAAIW,IAAI,CAACX,2BAA2B,GAAG,IAAI,IAC3CY;IAClB,CAAS;IACD,OAAOJ,MAAM;EACjB,CAAC,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}