{"ast":null,"code":"import _objectSpread from \"/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"expiration\"];\nimport { AmplifyUrl } from '../../../../../utils/amplifyUrl/index.mjs';\nimport { HOST_HEADER, SHA256_ALGORITHM_IDENTIFIER, TOKEN_QUERY_PARAM, EXPIRES_QUERY_PARAM, SIGNED_HEADERS_QUERY_PARAM, AMZ_DATE_QUERY_PARAM, CREDENTIAL_QUERY_PARAM, ALGORITHM_QUERY_PARAM, SIGNATURE_QUERY_PARAM } from './constants.mjs';\nimport { getSigningValues } from './utils/getSigningValues.mjs';\nimport { getSignature } from './utils/getSignature.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Given a `Presignable` object, returns a Signature Version 4 presigned `URL` object.\n *\n * @param presignable `Presignable` object containing at least a url to be presigned with authentication query params.\n * @param presignUrlOptions `PresignUrlOptions` object containing values used to construct the signature.\n * @returns A `URL` with authentication query params which can grant temporary access to AWS resources.\n */\nconst presignUrl = (_ref, _ref2) => {\n  let {\n    body,\n    method = 'GET',\n    url\n  } = _ref;\n  let {\n      expiration\n    } = _ref2,\n    options = _objectWithoutProperties(_ref2, _excluded);\n  const signingValues = getSigningValues(options);\n  const {\n    accessKeyId,\n    credentialScope,\n    longDate,\n    sessionToken\n  } = signingValues;\n  // create the request to sign\n  const presignedUrl = new AmplifyUrl(url);\n  Object.entries(_objectSpread(_objectSpread({\n    [ALGORITHM_QUERY_PARAM]: SHA256_ALGORITHM_IDENTIFIER,\n    [CREDENTIAL_QUERY_PARAM]: \"\".concat(accessKeyId, \"/\").concat(credentialScope),\n    [AMZ_DATE_QUERY_PARAM]: longDate,\n    [SIGNED_HEADERS_QUERY_PARAM]: HOST_HEADER\n  }, expiration && {\n    [EXPIRES_QUERY_PARAM]: expiration.toString()\n  }), sessionToken && {\n    [TOKEN_QUERY_PARAM]: sessionToken\n  })).forEach(_ref3 => {\n    let [key, value] = _ref3;\n    presignedUrl.searchParams.append(key, value);\n  });\n  const requestToSign = {\n    body,\n    headers: {\n      [HOST_HEADER]: url.host\n    },\n    method,\n    url: presignedUrl\n  };\n  // calculate and add the signature to the url\n  const signature = getSignature(requestToSign, signingValues);\n  presignedUrl.searchParams.append(SIGNATURE_QUERY_PARAM, signature);\n  return presignedUrl;\n};\nexport { presignUrl };","map":{"version":3,"names":["presignUrl","_ref","_ref2","body","method","url","expiration","options","_objectWithoutProperties","_excluded","signingValues","getSigningValues","accessKeyId","credentialScope","longDate","sessionToken","presignedUrl","AmplifyUrl","Object","entries","_objectSpread","ALGORITHM_QUERY_PARAM","SHA256_ALGORITHM_IDENTIFIER","CREDENTIAL_QUERY_PARAM","concat","AMZ_DATE_QUERY_PARAM","SIGNED_HEADERS_QUERY_PARAM","HOST_HEADER","EXPIRES_QUERY_PARAM","toString","TOKEN_QUERY_PARAM","forEach","_ref3","key","value","searchParams","append","requestToSign","headers","host","signature","getSignature","SIGNATURE_QUERY_PARAM"],"sources":["/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@aws-amplify/core/src/clients/middleware/signing/signer/signatureV4/presignUrl.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AmplifyUrl } from '../../../../../utils/amplifyUrl';\nimport { ALGORITHM_QUERY_PARAM, AMZ_DATE_QUERY_PARAM, CREDENTIAL_QUERY_PARAM, EXPIRES_QUERY_PARAM, HOST_HEADER, SHA256_ALGORITHM_IDENTIFIER, SIGNATURE_QUERY_PARAM, SIGNED_HEADERS_QUERY_PARAM, TOKEN_QUERY_PARAM, } from './constants';\nimport { getSigningValues } from './utils/getSigningValues';\nimport { getSignature } from './utils/getSignature';\n/**\n * Given a `Presignable` object, returns a Signature Version 4 presigned `URL` object.\n *\n * @param presignable `Presignable` object containing at least a url to be presigned with authentication query params.\n * @param presignUrlOptions `PresignUrlOptions` object containing values used to construct the signature.\n * @returns A `URL` with authentication query params which can grant temporary access to AWS resources.\n */\nexport const presignUrl = ({ body, method = 'GET', url }, { expiration, ...options }) => {\n    const signingValues = getSigningValues(options);\n    const { accessKeyId, credentialScope, longDate, sessionToken } = signingValues;\n    // create the request to sign\n    const presignedUrl = new AmplifyUrl(url);\n    Object.entries({\n        [ALGORITHM_QUERY_PARAM]: SHA256_ALGORITHM_IDENTIFIER,\n        [CREDENTIAL_QUERY_PARAM]: `${accessKeyId}/${credentialScope}`,\n        [AMZ_DATE_QUERY_PARAM]: longDate,\n        [SIGNED_HEADERS_QUERY_PARAM]: HOST_HEADER,\n        ...(expiration && { [EXPIRES_QUERY_PARAM]: expiration.toString() }),\n        ...(sessionToken && { [TOKEN_QUERY_PARAM]: sessionToken }),\n    }).forEach(([key, value]) => {\n        presignedUrl.searchParams.append(key, value);\n    });\n    const requestToSign = {\n        body,\n        headers: { [HOST_HEADER]: url.host },\n        method,\n        url: presignedUrl,\n    };\n    // calculate and add the signature to the url\n    const signature = getSignature(requestToSign, signingValues);\n    presignedUrl.searchParams.append(SIGNATURE_QUERY_PARAM, signature);\n    return presignedUrl;\n};\n"],"mappings":";;;;;;;;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,UAAU,GAAGA,CAAAC,IAAA,EAAAC,KAAA,KAA+D;EAAA,IAA9D;IAAEC,IAAI;IAAEC,MAAM,GAAG,KAAK;IAAEC;EAAG,CAAE,GAAAJ,IAAA;EAAA,IAAE;MAAEK;IAAsB,CAAE,GAAAJ,KAAA;IAATK,OAAO,GAAAC,wBAAA,CAAAN,KAAA,EAAAO,SAAA;EAC9E,MAAMC,aAAa,GAAGC,gBAAgB,CAACJ,OAAO,CAAC;EAC/C,MAAM;IAAEK,WAAW;IAAEC,eAAe;IAAEC,QAAQ;IAAEC;EAAY,CAAE,GAAGL,aAAa;EAClF;EACI,MAAMM,YAAY,GAAG,IAAIC,UAAU,CAACZ,GAAG,CAAC;EACxCa,MAAM,CAACC,OAAO,CAAAC,aAAA,CAAAA,aAAA;IACV,CAACC,qBAAqB,GAAGC,2BAA2B;IACpD,CAACC,sBAAsB,MAAAC,MAAA,CAAMZ,WAAW,OAAAY,MAAA,CAAIX,eAAe,CAAE;IAC7D,CAACY,oBAAoB,GAAGX,QAAQ;IAChC,CAACY,0BAA0B,GAAGC;EAAW,GACrCrB,UAAU,IAAI;IAAE,CAACsB,mBAAmB,GAAGtB,UAAU,CAACuB,QAAQ;EAAE,CAAE,GAC9Dd,YAAY,IAAI;IAAE,CAACe,iBAAiB,GAAGf;EAAY,CAAE,CAC5D,CAAC,CAACgB,OAAO,CAACC,KAAA,IAAkB;IAAA,IAAjB,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAAF,KAAA;IACpBhB,YAAY,CAACmB,YAAY,CAACC,MAAM,CAACH,GAAG,EAAEC,KAAK,CAAC;EAChD,CAAC,CAAC;EACF,MAAMG,aAAa,GAAG;IAClBlC,IAAI;IACJmC,OAAO,EAAE;MAAE,CAACX,WAAW,GAAGtB,GAAG,CAACkC;IAAI,CAAE;IACpCnC,MAAM;IACNC,GAAG,EAAEW;EACb,CAAK;EACL;EACI,MAAMwB,SAAS,GAAGC,YAAY,CAACJ,aAAa,EAAE3B,aAAa,CAAC;EAC5DM,YAAY,CAACmB,YAAY,CAACC,MAAM,CAACM,qBAAqB,EAAEF,SAAS,CAAC;EAClE,OAAOxB,YAAY;AACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}