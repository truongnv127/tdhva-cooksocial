{"ast":null,"code":"import { Hub } from '@aws-amplify/core';\nimport { isBrowser, assertTokenProviderConfig, isTokenExpired, AMPLIFY_SYMBOL, AmplifyErrorCode } from '@aws-amplify/core/internals/utils';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError.mjs';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { oAuthStore } from '../utils/oauth/oAuthStore.mjs';\nimport { addInflightPromise } from '../utils/oauth/inflightPromise.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nclass TokenOrchestrator {\n  constructor() {\n    this.waitForInflightOAuth = isBrowser() ? async () => {\n      if (!(await oAuthStore.loadOAuthInFlight())) {\n        return;\n      }\n      if (this.inflightPromise) {\n        return this.inflightPromise;\n      }\n      // when there is valid oauth config and there is an inflight oauth flow, try\n      // to block async calls that require fetching tokens before the oauth flow completes\n      // e.g. getCurrentUser, fetchAuthSession etc.\n      this.inflightPromise = new Promise((resolve, _reject) => {\n        addInflightPromise(resolve);\n      });\n      return this.inflightPromise;\n    } : async () => {\n      // no-op for non-browser environments\n    };\n  }\n  setAuthConfig(authConfig) {\n    oAuthStore.setAuthConfig(authConfig.Cognito);\n    this.authConfig = authConfig;\n  }\n  setTokenRefresher(tokenRefresher) {\n    this.tokenRefresher = tokenRefresher;\n  }\n  setAuthTokenStore(tokenStore) {\n    this.tokenStore = tokenStore;\n  }\n  getTokenStore() {\n    if (!this.tokenStore) {\n      throw new AuthError({\n        name: 'EmptyTokenStoreException',\n        message: 'TokenStore not set'\n      });\n    }\n    return this.tokenStore;\n  }\n  getTokenRefresher() {\n    if (!this.tokenRefresher) {\n      throw new AuthError({\n        name: 'EmptyTokenRefresherException',\n        message: 'TokenRefresher not set'\n      });\n    }\n    return this.tokenRefresher;\n  }\n  async getTokens(options) {\n    var _tokens, _tokens$idToken$paylo, _tokens$idToken, _tokens$clockDrift, _tokens$accessToken$p, _tokens$accessToken, _tokens$clockDrift2, _tokens2, _tokens3, _tokens4;\n    let tokens;\n    try {\n      var _this$authConfig;\n      assertTokenProviderConfig((_this$authConfig = this.authConfig) === null || _this$authConfig === void 0 ? void 0 : _this$authConfig.Cognito);\n    } catch (_err) {\n      // Token provider not configured\n      return null;\n    }\n    await this.waitForInflightOAuth();\n    this.inflightPromise = undefined;\n    tokens = await this.getTokenStore().loadTokens();\n    const username = await this.getTokenStore().getLastAuthUser();\n    if (tokens === null) {\n      return null;\n    }\n    const idTokenExpired = !!((_tokens = tokens) !== null && _tokens !== void 0 && _tokens.idToken) && isTokenExpired({\n      expiresAt: ((_tokens$idToken$paylo = (_tokens$idToken = tokens.idToken) === null || _tokens$idToken === void 0 || (_tokens$idToken = _tokens$idToken.payload) === null || _tokens$idToken === void 0 ? void 0 : _tokens$idToken.exp) !== null && _tokens$idToken$paylo !== void 0 ? _tokens$idToken$paylo : 0) * 1000,\n      clockDrift: (_tokens$clockDrift = tokens.clockDrift) !== null && _tokens$clockDrift !== void 0 ? _tokens$clockDrift : 0\n    });\n    const accessTokenExpired = isTokenExpired({\n      expiresAt: ((_tokens$accessToken$p = (_tokens$accessToken = tokens.accessToken) === null || _tokens$accessToken === void 0 || (_tokens$accessToken = _tokens$accessToken.payload) === null || _tokens$accessToken === void 0 ? void 0 : _tokens$accessToken.exp) !== null && _tokens$accessToken$p !== void 0 ? _tokens$accessToken$p : 0) * 1000,\n      clockDrift: (_tokens$clockDrift2 = tokens.clockDrift) !== null && _tokens$clockDrift2 !== void 0 ? _tokens$clockDrift2 : 0\n    });\n    if (options !== null && options !== void 0 && options.forceRefresh || idTokenExpired || accessTokenExpired) {\n      tokens = await this.refreshTokens({\n        tokens,\n        username\n      });\n      if (tokens === null) {\n        return null;\n      }\n    }\n    return {\n      accessToken: (_tokens2 = tokens) === null || _tokens2 === void 0 ? void 0 : _tokens2.accessToken,\n      idToken: (_tokens3 = tokens) === null || _tokens3 === void 0 ? void 0 : _tokens3.idToken,\n      signInDetails: (_tokens4 = tokens) === null || _tokens4 === void 0 ? void 0 : _tokens4.signInDetails\n    };\n  }\n  async refreshTokens(_ref) {\n    let {\n      tokens,\n      username\n    } = _ref;\n    try {\n      const {\n        signInDetails\n      } = tokens;\n      const newTokens = await this.getTokenRefresher()({\n        tokens,\n        authConfig: this.authConfig,\n        username\n      });\n      newTokens.signInDetails = signInDetails;\n      await this.setTokens({\n        tokens: newTokens\n      });\n      Hub.dispatch('auth', {\n        event: 'tokenRefresh'\n      }, 'Auth', AMPLIFY_SYMBOL);\n      return newTokens;\n    } catch (err) {\n      return this.handleErrors(err);\n    }\n  }\n  handleErrors(err) {\n    assertServiceError(err);\n    if (err.name !== AmplifyErrorCode.NetworkError) {\n      // TODO(v6): Check errors on client\n      this.clearTokens();\n    }\n    Hub.dispatch('auth', {\n      event: 'tokenRefresh_failure',\n      data: {\n        error: err\n      }\n    }, 'Auth', AMPLIFY_SYMBOL);\n    if (err.name.startsWith('NotAuthorizedException')) {\n      return null;\n    }\n    throw err;\n  }\n  async setTokens(_ref2) {\n    let {\n      tokens\n    } = _ref2;\n    return this.getTokenStore().storeTokens(tokens);\n  }\n  async clearTokens() {\n    return this.getTokenStore().clearTokens();\n  }\n  getDeviceMetadata(username) {\n    return this.getTokenStore().getDeviceMetadata(username);\n  }\n  clearDeviceMetadata(username) {\n    return this.getTokenStore().clearDeviceMetadata(username);\n  }\n  setOAuthMetadata(metadata) {\n    return this.getTokenStore().setOAuthMetadata(metadata);\n  }\n  getOAuthMetadata() {\n    return this.getTokenStore().getOAuthMetadata();\n  }\n}\nexport { TokenOrchestrator };","map":{"version":3,"names":["TokenOrchestrator","constructor","waitForInflightOAuth","isBrowser","oAuthStore","loadOAuthInFlight","inflightPromise","Promise","resolve","_reject","addInflightPromise","setAuthConfig","authConfig","Cognito","setTokenRefresher","tokenRefresher","setAuthTokenStore","tokenStore","getTokenStore","AuthError","name","message","getTokenRefresher","getTokens","options","_tokens","_tokens$idToken$paylo","_tokens$idToken","_tokens$clockDrift","_tokens$accessToken$p","_tokens$accessToken","_tokens$clockDrift2","_tokens2","_tokens3","_tokens4","tokens","_this$authConfig","assertTokenProviderConfig","_err","undefined","loadTokens","username","getLastAuthUser","idTokenExpired","idToken","isTokenExpired","expiresAt","payload","exp","clockDrift","accessTokenExpired","accessToken","forceRefresh","refreshTokens","signInDetails","_ref","newTokens","setTokens","Hub","dispatch","event","AMPLIFY_SYMBOL","err","handleErrors","assertServiceError","AmplifyErrorCode","NetworkError","clearTokens","data","error","startsWith","_ref2","storeTokens","getDeviceMetadata","clearDeviceMetadata","setOAuthMetadata","metadata","getOAuthMetadata"],"sources":["/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@aws-amplify/auth/src/providers/cognito/tokenProvider/TokenOrchestrator.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Hub, } from '@aws-amplify/core';\nimport { AMPLIFY_SYMBOL, AmplifyErrorCode, assertTokenProviderConfig, isBrowser, isTokenExpired, } from '@aws-amplify/core/internals/utils';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError';\nimport { AuthError } from '../../../errors/AuthError';\nimport { oAuthStore } from '../utils/oauth/oAuthStore';\nimport { addInflightPromise } from '../utils/oauth/inflightPromise';\nexport class TokenOrchestrator {\n    constructor() {\n        this.waitForInflightOAuth = isBrowser()\n            ? async () => {\n                if (!(await oAuthStore.loadOAuthInFlight())) {\n                    return;\n                }\n                if (this.inflightPromise) {\n                    return this.inflightPromise;\n                }\n                // when there is valid oauth config and there is an inflight oauth flow, try\n                // to block async calls that require fetching tokens before the oauth flow completes\n                // e.g. getCurrentUser, fetchAuthSession etc.\n                this.inflightPromise = new Promise((resolve, _reject) => {\n                    addInflightPromise(resolve);\n                });\n                return this.inflightPromise;\n            }\n            : async () => {\n                // no-op for non-browser environments\n            };\n    }\n    setAuthConfig(authConfig) {\n        oAuthStore.setAuthConfig(authConfig.Cognito);\n        this.authConfig = authConfig;\n    }\n    setTokenRefresher(tokenRefresher) {\n        this.tokenRefresher = tokenRefresher;\n    }\n    setAuthTokenStore(tokenStore) {\n        this.tokenStore = tokenStore;\n    }\n    getTokenStore() {\n        if (!this.tokenStore) {\n            throw new AuthError({\n                name: 'EmptyTokenStoreException',\n                message: 'TokenStore not set',\n            });\n        }\n        return this.tokenStore;\n    }\n    getTokenRefresher() {\n        if (!this.tokenRefresher) {\n            throw new AuthError({\n                name: 'EmptyTokenRefresherException',\n                message: 'TokenRefresher not set',\n            });\n        }\n        return this.tokenRefresher;\n    }\n    async getTokens(options) {\n        let tokens;\n        try {\n            assertTokenProviderConfig(this.authConfig?.Cognito);\n        }\n        catch (_err) {\n            // Token provider not configured\n            return null;\n        }\n        await this.waitForInflightOAuth();\n        this.inflightPromise = undefined;\n        tokens = await this.getTokenStore().loadTokens();\n        const username = await this.getTokenStore().getLastAuthUser();\n        if (tokens === null) {\n            return null;\n        }\n        const idTokenExpired = !!tokens?.idToken &&\n            isTokenExpired({\n                expiresAt: (tokens.idToken?.payload?.exp ?? 0) * 1000,\n                clockDrift: tokens.clockDrift ?? 0,\n            });\n        const accessTokenExpired = isTokenExpired({\n            expiresAt: (tokens.accessToken?.payload?.exp ?? 0) * 1000,\n            clockDrift: tokens.clockDrift ?? 0,\n        });\n        if (options?.forceRefresh || idTokenExpired || accessTokenExpired) {\n            tokens = await this.refreshTokens({\n                tokens,\n                username,\n            });\n            if (tokens === null) {\n                return null;\n            }\n        }\n        return {\n            accessToken: tokens?.accessToken,\n            idToken: tokens?.idToken,\n            signInDetails: tokens?.signInDetails,\n        };\n    }\n    async refreshTokens({ tokens, username, }) {\n        try {\n            const { signInDetails } = tokens;\n            const newTokens = await this.getTokenRefresher()({\n                tokens,\n                authConfig: this.authConfig,\n                username,\n            });\n            newTokens.signInDetails = signInDetails;\n            await this.setTokens({ tokens: newTokens });\n            Hub.dispatch('auth', { event: 'tokenRefresh' }, 'Auth', AMPLIFY_SYMBOL);\n            return newTokens;\n        }\n        catch (err) {\n            return this.handleErrors(err);\n        }\n    }\n    handleErrors(err) {\n        assertServiceError(err);\n        if (err.name !== AmplifyErrorCode.NetworkError) {\n            // TODO(v6): Check errors on client\n            this.clearTokens();\n        }\n        Hub.dispatch('auth', {\n            event: 'tokenRefresh_failure',\n            data: { error: err },\n        }, 'Auth', AMPLIFY_SYMBOL);\n        if (err.name.startsWith('NotAuthorizedException')) {\n            return null;\n        }\n        throw err;\n    }\n    async setTokens({ tokens }) {\n        return this.getTokenStore().storeTokens(tokens);\n    }\n    async clearTokens() {\n        return this.getTokenStore().clearTokens();\n    }\n    getDeviceMetadata(username) {\n        return this.getTokenStore().getDeviceMetadata(username);\n    }\n    clearDeviceMetadata(username) {\n        return this.getTokenStore().clearDeviceMetadata(username);\n    }\n    setOAuthMetadata(metadata) {\n        return this.getTokenStore().setOAuthMetadata(metadata);\n    }\n    getOAuthMetadata() {\n        return this.getTokenStore().getOAuthMetadata();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}