{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Returns canonical headers.\n *\n * @param headers Headers from the request.\n * @returns Request headers that will be signed, and their values, separated by newline characters. Header names must\n * use lowercase characters, must appear in alphabetical order, and must be followed by a colon (:). For the values,\n * trim any leading or trailing spaces, convert sequential spaces to a single space, and separate the values\n * for a multi-value header using commas.\n *\n * @internal\n */\nconst getCanonicalHeaders = headers => Object.entries(headers).map(_ref => {\n  var _value$trim$replace;\n  let [key, value] = _ref;\n  return {\n    key: key.toLowerCase(),\n    value: (_value$trim$replace = value === null || value === void 0 ? void 0 : value.trim().replace(/\\s+/g, ' ')) !== null && _value$trim$replace !== void 0 ? _value$trim$replace : ''\n  };\n}).sort((a, b) => a.key < b.key ? -1 : 1).map(entry => \"\".concat(entry.key, \":\").concat(entry.value, \"\\n\")).join('');\nexport { getCanonicalHeaders };","map":{"version":3,"names":["getCanonicalHeaders","headers","Object","entries","map","_ref","_value$trim$replace","key","value","toLowerCase","trim","replace","sort","a","b","entry","concat","join"],"sources":["/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@aws-amplify/core/src/clients/middleware/signing/signer/signatureV4/utils/getCanonicalHeaders.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Returns canonical headers.\n *\n * @param headers Headers from the request.\n * @returns Request headers that will be signed, and their values, separated by newline characters. Header names must\n * use lowercase characters, must appear in alphabetical order, and must be followed by a colon (:). For the values,\n * trim any leading or trailing spaces, convert sequential spaces to a single space, and separate the values\n * for a multi-value header using commas.\n *\n * @internal\n */\nexport const getCanonicalHeaders = (headers) => Object.entries(headers)\n    .map(([key, value]) => ({\n    key: key.toLowerCase(),\n    value: value?.trim().replace(/\\s+/g, ' ') ?? '',\n}))\n    .sort((a, b) => (a.key < b.key ? -1 : 1))\n    .map(entry => `${entry.key}:${entry.value}\\n`)\n    .join('');\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,mBAAmB,GAAIC,OAAO,IAAKC,MAAM,CAACC,OAAO,CAACF,OAAO,EACjEG,GAAG,CAACC,IAAA;EAAA,IAAAC,mBAAA;EAAA,IAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAAH,IAAA;EAAA,OAAM;IACxBE,GAAG,EAAEA,GAAG,CAACE,WAAW,EAAE;IACtBD,KAAK,GAAAF,mBAAA,GAAEE,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEE,IAAI,EAAE,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,cAAAL,mBAAA,cAAAA,mBAAA,GAAI;EACjD,CAAC;AAAA,CAAC,EACGM,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAMD,CAAC,CAACN,GAAG,GAAGO,CAAC,CAACP,GAAG,GAAG,EAAE,GAAG,CAAE,EACvCH,GAAG,CAACW,KAAK,OAAAC,MAAA,CAAOD,KAAK,CAACR,GAAG,OAAAS,MAAA,CAAID,KAAK,CAACP,KAAK,OAAI,EAC5CS,IAAI,CAAC,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}