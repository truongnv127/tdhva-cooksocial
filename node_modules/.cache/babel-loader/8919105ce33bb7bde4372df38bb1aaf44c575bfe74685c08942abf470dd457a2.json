{"ast":null,"code":"import { ConsoleLogger } from '@aws-amplify/core';\nimport { assertIdentityPoolIdConfig } from '@aws-amplify/core/internals/utils';\nimport { getAuthStorageKeys } from '../tokenProvider/TokenStore.mjs';\nimport { IdentityIdStorageKeys } from './types.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst logger = new ConsoleLogger('DefaultIdentityIdStore');\nclass DefaultIdentityIdStore {\n  setAuthConfig(authConfigParam) {\n    assertIdentityPoolIdConfig(authConfigParam.Cognito);\n    this.authConfig = authConfigParam;\n    this._authKeys = createKeysForAuthStorage('Cognito', authConfigParam.Cognito.identityPoolId);\n  }\n  constructor(keyValueStorage) {\n    this._authKeys = {};\n    this._hasGuestIdentityId = false;\n    this.keyValueStorage = keyValueStorage;\n  }\n  async loadIdentityId() {\n    var _this$authConfig;\n    assertIdentityPoolIdConfig((_this$authConfig = this.authConfig) === null || _this$authConfig === void 0 ? void 0 : _this$authConfig.Cognito);\n    try {\n      if (this._primaryIdentityId) {\n        return {\n          id: this._primaryIdentityId,\n          type: 'primary'\n        };\n      } else {\n        const storedIdentityId = await this.keyValueStorage.getItem(this._authKeys.identityId);\n        if (storedIdentityId) {\n          this._hasGuestIdentityId = true;\n          return {\n            id: storedIdentityId,\n            type: 'guest'\n          };\n        }\n        return null;\n      }\n    } catch (err) {\n      logger.log('Error getting stored IdentityId.', err);\n      return null;\n    }\n  }\n  async storeIdentityId(identity) {\n    var _this$authConfig2;\n    assertIdentityPoolIdConfig((_this$authConfig2 = this.authConfig) === null || _this$authConfig2 === void 0 ? void 0 : _this$authConfig2.Cognito);\n    if (identity.type === 'guest') {\n      this.keyValueStorage.setItem(this._authKeys.identityId, identity.id);\n      // Clear in-memory storage of primary identityId\n      this._primaryIdentityId = undefined;\n      this._hasGuestIdentityId = true;\n    } else {\n      this._primaryIdentityId = identity.id;\n      // Clear locally stored guest id\n      if (this._hasGuestIdentityId) {\n        this.keyValueStorage.removeItem(this._authKeys.identityId);\n        this._hasGuestIdentityId = false;\n      }\n    }\n  }\n  async clearIdentityId() {\n    this._primaryIdentityId = undefined;\n    await this.keyValueStorage.removeItem(this._authKeys.identityId);\n  }\n}\nconst createKeysForAuthStorage = (provider, identifier) => {\n  return getAuthStorageKeys(IdentityIdStorageKeys)(\"com.amplify.\".concat(provider), identifier);\n};\nexport { DefaultIdentityIdStore };","map":{"version":3,"names":["logger","ConsoleLogger","DefaultIdentityIdStore","setAuthConfig","authConfigParam","assertIdentityPoolIdConfig","Cognito","authConfig","_authKeys","createKeysForAuthStorage","identityPoolId","constructor","keyValueStorage","_hasGuestIdentityId","loadIdentityId","_this$authConfig","_primaryIdentityId","id","type","storedIdentityId","getItem","identityId","err","log","storeIdentityId","identity","_this$authConfig2","setItem","undefined","removeItem","clearIdentityId","provider","identifier","getAuthStorageKeys","IdentityIdStorageKeys","concat"],"sources":["/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@aws-amplify/auth/src/providers/cognito/credentialsProvider/IdentityIdStore.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ConsoleLogger, } from '@aws-amplify/core';\nimport { assertIdentityPoolIdConfig } from '@aws-amplify/core/internals/utils';\nimport { getAuthStorageKeys } from '../tokenProvider/TokenStore';\nimport { IdentityIdStorageKeys } from './types';\nconst logger = new ConsoleLogger('DefaultIdentityIdStore');\nexport class DefaultIdentityIdStore {\n    setAuthConfig(authConfigParam) {\n        assertIdentityPoolIdConfig(authConfigParam.Cognito);\n        this.authConfig = authConfigParam;\n        this._authKeys = createKeysForAuthStorage('Cognito', authConfigParam.Cognito.identityPoolId);\n    }\n    constructor(keyValueStorage) {\n        this._authKeys = {};\n        this._hasGuestIdentityId = false;\n        this.keyValueStorage = keyValueStorage;\n    }\n    async loadIdentityId() {\n        assertIdentityPoolIdConfig(this.authConfig?.Cognito);\n        try {\n            if (this._primaryIdentityId) {\n                return {\n                    id: this._primaryIdentityId,\n                    type: 'primary',\n                };\n            }\n            else {\n                const storedIdentityId = await this.keyValueStorage.getItem(this._authKeys.identityId);\n                if (storedIdentityId) {\n                    this._hasGuestIdentityId = true;\n                    return {\n                        id: storedIdentityId,\n                        type: 'guest',\n                    };\n                }\n                return null;\n            }\n        }\n        catch (err) {\n            logger.log('Error getting stored IdentityId.', err);\n            return null;\n        }\n    }\n    async storeIdentityId(identity) {\n        assertIdentityPoolIdConfig(this.authConfig?.Cognito);\n        if (identity.type === 'guest') {\n            this.keyValueStorage.setItem(this._authKeys.identityId, identity.id);\n            // Clear in-memory storage of primary identityId\n            this._primaryIdentityId = undefined;\n            this._hasGuestIdentityId = true;\n        }\n        else {\n            this._primaryIdentityId = identity.id;\n            // Clear locally stored guest id\n            if (this._hasGuestIdentityId) {\n                this.keyValueStorage.removeItem(this._authKeys.identityId);\n                this._hasGuestIdentityId = false;\n            }\n        }\n    }\n    async clearIdentityId() {\n        this._primaryIdentityId = undefined;\n        await this.keyValueStorage.removeItem(this._authKeys.identityId);\n    }\n}\nconst createKeysForAuthStorage = (provider, identifier) => {\n    return getAuthStorageKeys(IdentityIdStorageKeys)(`com.amplify.${provider}`, identifier);\n};\n"],"mappings":";;;;;AAAA;AACA;AAKA,MAAMA,MAAM,GAAG,IAAIC,aAAa,CAAC,wBAAwB,CAAC;AACnD,MAAMC,sBAAsB,CAAC;EAChCC,aAAaA,CAACC,eAAe,EAAE;IAC3BC,0BAA0B,CAACD,eAAe,CAACE,OAAO,CAAC;IACnD,IAAI,CAACC,UAAU,GAAGH,eAAe;IACjC,IAAI,CAACI,SAAS,GAAGC,wBAAwB,CAAC,SAAS,EAAEL,eAAe,CAACE,OAAO,CAACI,cAAc,CAAC;EAChG;EACAC,WAAWA,CAACC,eAAe,EAAE;IACzB,IAAI,CAACJ,SAAS,GAAG,EAAE;IACnB,IAAI,CAACK,mBAAmB,GAAG,KAAK;IAChC,IAAI,CAACD,eAAe,GAAGA,eAAe;EAC1C;EACA,MAAME,cAAcA,CAAA,EAAG;IAAA,IAAAC,gBAAA;IACnBV,0BAA0B,EAAAU,gBAAA,GAAC,IAAI,CAACR,UAAU,cAAAQ,gBAAA,uBAAfA,gBAAA,CAAiBT,OAAO,CAAC;IACpD,IAAI;MACA,IAAI,IAAI,CAACU,kBAAkB,EAAE;QACzB,OAAO;UACHC,EAAE,EAAE,IAAI,CAACD,kBAAkB;UAC3BE,IAAI,EAAE;QAC1B,CAAiB;MACL,OACK;QACD,MAAMC,gBAAgB,GAAG,MAAM,IAAI,CAACP,eAAe,CAACQ,OAAO,CAAC,IAAI,CAACZ,SAAS,CAACa,UAAU,CAAC;QACtF,IAAIF,gBAAgB,EAAE;UAClB,IAAI,CAACN,mBAAmB,GAAG,IAAI;UAC/B,OAAO;YACHI,EAAE,EAAEE,gBAAgB;YACpBD,IAAI,EAAE;UAC9B,CAAqB;QACL;QACA,OAAO,IAAI;MACf;IACJ,EACA,OAAOI,GAAG,EAAE;MACRtB,MAAM,CAACuB,GAAG,CAAC,kCAAkC,EAAED,GAAG,CAAC;MACnD,OAAO,IAAI;IACf;EACJ;EACA,MAAME,eAAeA,CAACC,QAAQ,EAAE;IAAA,IAAAC,iBAAA;IAC5BrB,0BAA0B,EAAAqB,iBAAA,GAAC,IAAI,CAACnB,UAAU,cAAAmB,iBAAA,uBAAfA,iBAAA,CAAiBpB,OAAO,CAAC;IACpD,IAAImB,QAAQ,CAACP,IAAI,KAAK,OAAO,EAAE;MAC3B,IAAI,CAACN,eAAe,CAACe,OAAO,CAAC,IAAI,CAACnB,SAAS,CAACa,UAAU,EAAEI,QAAQ,CAACR,EAAE,CAAC;MAChF;MACY,IAAI,CAACD,kBAAkB,GAAGY,SAAS;MACnC,IAAI,CAACf,mBAAmB,GAAG,IAAI;IACnC,OACK;MACD,IAAI,CAACG,kBAAkB,GAAGS,QAAQ,CAACR,EAAE;MACjD;MACY,IAAI,IAAI,CAACJ,mBAAmB,EAAE;QAC1B,IAAI,CAACD,eAAe,CAACiB,UAAU,CAAC,IAAI,CAACrB,SAAS,CAACa,UAAU,CAAC;QAC1D,IAAI,CAACR,mBAAmB,GAAG,KAAK;MACpC;IACJ;EACJ;EACA,MAAMiB,eAAeA,CAAA,EAAG;IACpB,IAAI,CAACd,kBAAkB,GAAGY,SAAS;IACnC,MAAM,IAAI,CAAChB,eAAe,CAACiB,UAAU,CAAC,IAAI,CAACrB,SAAS,CAACa,UAAU,CAAC;EACpE;AACJ;AACA,MAAMZ,wBAAwB,GAAGA,CAACsB,QAAQ,EAAEC,UAAU,KAAK;EACvD,OAAOC,kBAAkB,CAACC,qBAAqB,CAAC,gBAAAC,MAAA,CAAgBJ,QAAQ,GAAIC,UAAU,CAAC;AAC3F,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}