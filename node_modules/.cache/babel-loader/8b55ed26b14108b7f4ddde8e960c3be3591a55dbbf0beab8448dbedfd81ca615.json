{"ast":null,"code":"import { deDupeAsyncFunction, assertTokenProviderConfig, decodeJWT } from '@aws-amplify/core/internals/utils';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { assertAuthTokensWithRefreshToken } from './types.mjs';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\nimport '@aws-amplify/core';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport { createGetTokensFromRefreshTokenClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createGetTokensFromRefreshTokenClient.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../types/errors.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst refreshAuthTokensFunction = async _ref => {\n  var _tokens$deviceMetadat, _AuthenticationResult, _AuthenticationResult2;\n  let {\n    tokens,\n    authConfig,\n    username\n  } = _ref;\n  assertTokenProviderConfig(authConfig === null || authConfig === void 0 ? void 0 : authConfig.Cognito);\n  const {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = authConfig.Cognito;\n  const region = getRegionFromUserPoolId(userPoolId);\n  assertAuthTokensWithRefreshToken(tokens);\n  const getTokensFromRefreshToken = createGetTokensFromRefreshTokenClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const {\n    AuthenticationResult\n  } = await getTokensFromRefreshToken({\n    region\n  }, {\n    ClientId: userPoolClientId,\n    RefreshToken: tokens.refreshToken,\n    DeviceKey: (_tokens$deviceMetadat = tokens.deviceMetadata) === null || _tokens$deviceMetadat === void 0 ? void 0 : _tokens$deviceMetadat.deviceKey\n  });\n  const accessToken = decodeJWT((_AuthenticationResult = AuthenticationResult === null || AuthenticationResult === void 0 ? void 0 : AuthenticationResult.AccessToken) !== null && _AuthenticationResult !== void 0 ? _AuthenticationResult : '');\n  const idToken = AuthenticationResult !== null && AuthenticationResult !== void 0 && AuthenticationResult.IdToken ? decodeJWT(AuthenticationResult.IdToken) : undefined;\n  const {\n    iat\n  } = accessToken.payload;\n  // This should never happen. If it does, it's a bug from the service.\n  if (!iat) {\n    throw new AuthError({\n      name: 'iatNotFoundException',\n      message: 'iat not found in access token'\n    });\n  }\n  const clockDrift = iat * 1000 - new Date().getTime();\n  return {\n    accessToken,\n    idToken,\n    clockDrift,\n    refreshToken: (_AuthenticationResult2 = AuthenticationResult === null || AuthenticationResult === void 0 ? void 0 : AuthenticationResult.RefreshToken) !== null && _AuthenticationResult2 !== void 0 ? _AuthenticationResult2 : tokens.refreshToken,\n    username\n  };\n};\nconst refreshAuthTokens = deDupeAsyncFunction(refreshAuthTokensFunction);\nconst refreshAuthTokensWithoutDedupe = refreshAuthTokensFunction;\nexport { refreshAuthTokens, refreshAuthTokensWithoutDedupe };","map":{"version":3,"names":["refreshAuthTokensFunction","_ref","_tokens$deviceMetadat","_AuthenticationResult","_AuthenticationResult2","tokens","authConfig","username","assertTokenProviderConfig","Cognito","userPoolId","userPoolClientId","userPoolEndpoint","region","getRegionFromUserPoolId","assertAuthTokensWithRefreshToken","getTokensFromRefreshToken","createGetTokensFromRefreshTokenClient","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","AuthenticationResult","ClientId","RefreshToken","refreshToken","DeviceKey","deviceMetadata","deviceKey","accessToken","decodeJWT","AccessToken","idToken","IdToken","undefined","iat","payload","AuthError","name","message","clockDrift","Date","getTime","refreshAuthTokens","deDupeAsyncFunction","refreshAuthTokensWithoutDedupe"],"sources":["/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@aws-amplify/auth/src/providers/cognito/utils/refreshAuthTokens.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { assertTokenProviderConfig, deDupeAsyncFunction, decodeJWT, } from '@aws-amplify/core/internals/utils';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { assertAuthTokensWithRefreshToken } from '../utils/types';\nimport { AuthError } from '../../../errors/AuthError';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\nimport { createGetTokensFromRefreshTokenClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nconst refreshAuthTokensFunction = async ({ tokens, authConfig, username, }) => {\n    assertTokenProviderConfig(authConfig?.Cognito);\n    const { userPoolId, userPoolClientId, userPoolEndpoint } = authConfig.Cognito;\n    const region = getRegionFromUserPoolId(userPoolId);\n    assertAuthTokensWithRefreshToken(tokens);\n    const getTokensFromRefreshToken = createGetTokensFromRefreshTokenClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const { AuthenticationResult } = await getTokensFromRefreshToken({ region }, {\n        ClientId: userPoolClientId,\n        RefreshToken: tokens.refreshToken,\n        DeviceKey: tokens.deviceMetadata?.deviceKey,\n    });\n    const accessToken = decodeJWT(AuthenticationResult?.AccessToken ?? '');\n    const idToken = AuthenticationResult?.IdToken\n        ? decodeJWT(AuthenticationResult.IdToken)\n        : undefined;\n    const { iat } = accessToken.payload;\n    // This should never happen. If it does, it's a bug from the service.\n    if (!iat) {\n        throw new AuthError({\n            name: 'iatNotFoundException',\n            message: 'iat not found in access token',\n        });\n    }\n    const clockDrift = iat * 1000 - new Date().getTime();\n    return {\n        accessToken,\n        idToken,\n        clockDrift,\n        refreshToken: AuthenticationResult?.RefreshToken ?? tokens.refreshToken,\n        username,\n    };\n};\nexport const refreshAuthTokens = deDupeAsyncFunction(refreshAuthTokensFunction);\nexport const refreshAuthTokensWithoutDedupe = refreshAuthTokensFunction;\n"],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AAOA,MAAMA,yBAAyB,GAAG,MAAAC,IAAA,IAA6C;EAAA,IAAAC,qBAAA,EAAAC,qBAAA,EAAAC,sBAAA;EAAA,IAAtC;IAAEC,MAAM;IAAEC,UAAU;IAAEC;EAAQ,CAAG,GAAAN,IAAA;EACtEO,yBAAyB,CAACF,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEG,OAAO,CAAC;EAC9C,MAAM;IAAEC,UAAU;IAAEC,gBAAgB;IAAEC;EAAgB,CAAE,GAAGN,UAAU,CAACG,OAAO;EAC7E,MAAMI,MAAM,GAAGC,uBAAuB,CAACJ,UAAU,CAAC;EAClDK,gCAAgC,CAACV,MAAM,CAAC;EACxC,MAAMW,yBAAyB,GAAGC,qCAAqC,CAAC;IACpEC,gBAAgB,EAAEC,qCAAqC,CAAC;MACpDC,gBAAgB,EAAER;IAC9B,CAAS;EACT,CAAK,CAAC;EACF,MAAM;IAAES;EAAoB,CAAE,GAAG,MAAML,yBAAyB,CAAC;IAAEH;EAAM,CAAE,EAAE;IACzES,QAAQ,EAAEX,gBAAgB;IAC1BY,YAAY,EAAElB,MAAM,CAACmB,YAAY;IACjCC,SAAS,GAAAvB,qBAAA,GAAEG,MAAM,CAACqB,cAAc,cAAAxB,qBAAA,uBAArBA,qBAAA,CAAuByB;EAC1C,CAAK,CAAC;EACF,MAAMC,WAAW,GAAGC,SAAS,EAAA1B,qBAAA,GAACkB,oBAAoB,aAApBA,oBAAoB,uBAApBA,oBAAoB,CAAES,WAAW,cAAA3B,qBAAA,cAAAA,qBAAA,GAAI,EAAE,CAAC;EACtE,MAAM4B,OAAO,GAAGV,oBAAoB,aAApBA,oBAAoB,eAApBA,oBAAoB,CAAEW,OAAA,GAChCH,SAAS,CAACR,oBAAoB,CAACW,OAAO,IACtCC,SAAS;EACf,MAAM;IAAEC;EAAG,CAAE,GAAGN,WAAW,CAACO,OAAO;EACvC;EACI,IAAI,CAACD,GAAG,EAAE;IACN,MAAM,IAAIE,SAAS,CAAC;MAChBC,IAAI,EAAE,sBAAsB;MAC5BC,OAAO,EAAE;IACrB,CAAS,CAAC;EACN;EACA,MAAMC,UAAU,GAAGL,GAAG,GAAG,IAAI,GAAG,IAAIM,IAAI,EAAE,CAACC,OAAO,EAAE;EACpD,OAAO;IACHb,WAAW;IACXG,OAAO;IACPQ,UAAU;IACVf,YAAY,GAAApB,sBAAA,GAAEiB,oBAAoB,aAApBA,oBAAoB,uBAApBA,oBAAoB,CAAEE,YAAY,cAAAnB,sBAAA,cAAAA,sBAAA,GAAIC,MAAM,CAACmB,YAAY;IACvEjB;EACR,CAAK;AACL,CAAC;AACW,MAACmC,iBAAiB,GAAGC,mBAAmB,CAAC3C,yBAAyB;AAClE,MAAC4C,8BAA8B,GAAG5C,yBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}