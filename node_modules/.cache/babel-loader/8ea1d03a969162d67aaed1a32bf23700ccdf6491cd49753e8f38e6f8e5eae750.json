{"ast":null,"code":"import { Framework } from './types.mjs';\nimport { version } from './version.mjs';\nimport { detectFramework, observeFrameworkChanges } from './detectFramework.mjs';\nimport { getCustomUserAgent } from './customUserAgent.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst BASE_USER_AGENT = \"aws-amplify\";\n/** Sanitize Amplify version string be removing special character + and character post the special character  */\nconst sanitizeAmplifyVersion = amplifyVersion => amplifyVersion.replace(/\\+.*/, '');\nclass PlatformBuilder {\n  constructor() {\n    this.userAgent = \"\".concat(BASE_USER_AGENT, \"/\").concat(sanitizeAmplifyVersion(version));\n  }\n  get framework() {\n    return detectFramework();\n  }\n  get isReactNative() {\n    return this.framework === Framework.ReactNative || this.framework === Framework.Expo;\n  }\n  observeFrameworkChanges(fcn) {\n    observeFrameworkChanges(fcn);\n  }\n}\nconst Platform = new PlatformBuilder();\nconst getAmplifyUserAgentObject = function () {\n  let {\n    category,\n    action\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const userAgent = [[BASE_USER_AGENT, sanitizeAmplifyVersion(version)]];\n  if (category) {\n    userAgent.push([category, action]);\n  }\n  userAgent.push(['framework', detectFramework()]);\n  if (category && action) {\n    const customState = getCustomUserAgent(category, action);\n    if (customState) {\n      customState.forEach(state => {\n        userAgent.push(state);\n      });\n    }\n  }\n  return userAgent;\n};\nconst getAmplifyUserAgent = customUserAgentDetails => {\n  const userAgent = getAmplifyUserAgentObject(customUserAgentDetails);\n  const userAgentString = userAgent.map(_ref => {\n    let [agentKey, agentValue] = _ref;\n    return agentKey && agentValue ? \"\".concat(agentKey, \"/\").concat(agentValue) : agentKey;\n  }).join(' ');\n  return userAgentString;\n};\nexport { Platform, getAmplifyUserAgent, getAmplifyUserAgentObject, sanitizeAmplifyVersion };","map":{"version":3,"names":["BASE_USER_AGENT","sanitizeAmplifyVersion","amplifyVersion","replace","PlatformBuilder","constructor","userAgent","concat","version","framework","detectFramework","isReactNative","Framework","ReactNative","Expo","observeFrameworkChanges","fcn","Platform","getAmplifyUserAgentObject","category","action","arguments","length","undefined","push","customState","getCustomUserAgent","forEach","state","getAmplifyUserAgent","customUserAgentDetails","userAgentString","map","_ref","agentKey","agentValue","join"],"sources":["/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@aws-amplify/core/src/Platform/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Framework } from './types';\nimport { version } from './version';\nimport { detectFramework, observeFrameworkChanges } from './detectFramework';\nimport { getCustomUserAgent } from './customUserAgent';\nconst BASE_USER_AGENT = `aws-amplify`;\n/** Sanitize Amplify version string be removing special character + and character post the special character  */\nexport const sanitizeAmplifyVersion = (amplifyVersion) => amplifyVersion.replace(/\\+.*/, '');\nclass PlatformBuilder {\n    constructor() {\n        this.userAgent = `${BASE_USER_AGENT}/${sanitizeAmplifyVersion(version)}`;\n    }\n    get framework() {\n        return detectFramework();\n    }\n    get isReactNative() {\n        return (this.framework === Framework.ReactNative ||\n            this.framework === Framework.Expo);\n    }\n    observeFrameworkChanges(fcn) {\n        observeFrameworkChanges(fcn);\n    }\n}\nexport const Platform = new PlatformBuilder();\nexport const getAmplifyUserAgentObject = ({ category, action, } = {}) => {\n    const userAgent = [\n        [BASE_USER_AGENT, sanitizeAmplifyVersion(version)],\n    ];\n    if (category) {\n        userAgent.push([category, action]);\n    }\n    userAgent.push(['framework', detectFramework()]);\n    if (category && action) {\n        const customState = getCustomUserAgent(category, action);\n        if (customState) {\n            customState.forEach(state => {\n                userAgent.push(state);\n            });\n        }\n    }\n    return userAgent;\n};\nexport const getAmplifyUserAgent = (customUserAgentDetails) => {\n    const userAgent = getAmplifyUserAgentObject(customUserAgentDetails);\n    const userAgentString = userAgent\n        .map(([agentKey, agentValue]) => agentKey && agentValue ? `${agentKey}/${agentValue}` : agentKey)\n        .join(' ');\n    return userAgentString;\n};\n"],"mappings":";;;;;AAAA;AACA;AAKA,MAAMA,eAAe,gBAAgB;AACrC;AACY,MAACC,sBAAsB,GAAIC,cAAc,IAAKA,cAAc,CAACC,OAAO,CAAC,MAAM,EAAE,EAAE;AAC3F,MAAMC,eAAe,CAAC;EAClBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,SAAS,MAAAC,MAAA,CAAMP,eAAe,OAAAO,MAAA,CAAIN,sBAAsB,CAACO,OAAO,CAAC,CAAE;EAC5E;EACA,IAAIC,SAASA,CAAA,EAAG;IACZ,OAAOC,eAAe,EAAE;EAC5B;EACA,IAAIC,aAAaA,CAAA,EAAG;IAChB,OAAQ,IAAI,CAACF,SAAS,KAAKG,SAAS,CAACC,WAAW,IAC5C,IAAI,CAACJ,SAAS,KAAKG,SAAS,CAACE,IAAI;EACzC;EACAC,uBAAuBA,CAACC,GAAG,EAAE;IACzBD,uBAAuB,CAACC,GAAG,CAAC;EAChC;AACJ;AACY,MAACC,QAAQ,GAAG,IAAIb,eAAe;AAC/B,MAACc,yBAAyB,GAAG,SAAAA,CAAA,EAAgC;EAAA,IAA/B;IAAEC,QAAQ;IAAEC;EAAM,CAAG,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAChE,MAAMf,SAAS,GAAG,CACd,CAACN,eAAe,EAAEC,sBAAsB,CAACO,OAAO,CAAC,CAAC,CACrD;EACD,IAAIW,QAAQ,EAAE;IACVb,SAAS,CAACkB,IAAI,CAAC,CAACL,QAAQ,EAAEC,MAAM,CAAC,CAAC;EACtC;EACAd,SAAS,CAACkB,IAAI,CAAC,CAAC,WAAW,EAAEd,eAAe,EAAE,CAAC,CAAC;EAChD,IAAIS,QAAQ,IAAIC,MAAM,EAAE;IACpB,MAAMK,WAAW,GAAGC,kBAAkB,CAACP,QAAQ,EAAEC,MAAM,CAAC;IACxD,IAAIK,WAAW,EAAE;MACbA,WAAW,CAACE,OAAO,CAACC,KAAK,IAAI;QACzBtB,SAAS,CAACkB,IAAI,CAACI,KAAK,CAAC;MACzB,CAAC,CAAC;IACN;EACJ;EACA,OAAOtB,SAAS;AACpB;AACY,MAACuB,mBAAmB,GAAIC,sBAAsB,IAAK;EAC3D,MAAMxB,SAAS,GAAGY,yBAAyB,CAACY,sBAAsB,CAAC;EACnE,MAAMC,eAAe,GAAGzB,SAAA,CACnB0B,GAAG,CAACC,IAAA;IAAA,IAAC,CAACC,QAAQ,EAAEC,UAAU,CAAC,GAAAF,IAAA;IAAA,OAAKC,QAAQ,IAAIC,UAAU,MAAA5B,MAAA,CAAM2B,QAAQ,OAAA3B,MAAA,CAAI4B,UAAU,IAAKD,QAAQ;EAAA,GAC/FE,IAAI,CAAC,GAAG,CAAC;EACd,OAAOL,eAAe;AAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}