{"ast":null,"code":"import { AmplifyErrorCode } from '../../../types/errors.mjs';\nimport { isClockSkewError } from './isClockSkewError.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Get retry decider function\n * @param errorParser Function to load JavaScript error from HTTP response\n */\nconst getRetryDecider = errorParser => async (response, error) => {\n  var _ref;\n  const parsedError = (_ref = error !== null && error !== void 0 ? error : await errorParser(response)) !== null && _ref !== void 0 ? _ref : undefined;\n  const errorCode = (parsedError === null || parsedError === void 0 ? void 0 : parsedError.code) || (parsedError === null || parsedError === void 0 ? void 0 : parsedError.name);\n  const statusCode = response === null || response === void 0 ? void 0 : response.statusCode;\n  const isRetryable = isConnectionError(error) || isThrottlingError(statusCode, errorCode) || isClockSkewError(errorCode) || isServerSideError(statusCode, errorCode);\n  return {\n    retryable: isRetryable\n  };\n};\n// reference: https://github.com/aws/aws-sdk-js-v3/blob/ab0e7be36e7e7f8a0c04834357aaad643c7912c3/packages/service-error-classification/src/constants.ts#L22-L37\nconst THROTTLING_ERROR_CODES = ['BandwidthLimitExceeded', 'EC2ThrottledException', 'LimitExceededException', 'PriorRequestNotComplete', 'ProvisionedThroughputExceededException', 'RequestLimitExceeded', 'RequestThrottled', 'RequestThrottledException', 'SlowDown', 'ThrottledException', 'Throttling', 'ThrottlingException', 'TooManyRequestsException'];\nconst TIMEOUT_ERROR_CODES = ['TimeoutError', 'RequestTimeout', 'RequestTimeoutException'];\nconst isThrottlingError = (statusCode, errorCode) => statusCode === 429 || !!errorCode && THROTTLING_ERROR_CODES.includes(errorCode);\nconst isConnectionError = error => [AmplifyErrorCode.NetworkError,\n// TODO(vNext): unify the error code `ERR_NETWORK` used by the Storage XHR handler\n'ERR_NETWORK'].includes(error === null || error === void 0 ? void 0 : error.name);\nconst isServerSideError = (statusCode, errorCode) => !!statusCode && [500, 502, 503, 504].includes(statusCode) || !!errorCode && TIMEOUT_ERROR_CODES.includes(errorCode);\nexport { getRetryDecider };","map":{"version":3,"names":["getRetryDecider","errorParser","response","error","_ref","parsedError","undefined","errorCode","code","name","statusCode","isRetryable","isConnectionError","isThrottlingError","isClockSkewError","isServerSideError","retryable","THROTTLING_ERROR_CODES","TIMEOUT_ERROR_CODES","includes","AmplifyErrorCode","NetworkError"],"sources":["/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@aws-amplify/core/src/clients/middleware/retry/defaultRetryDecider.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AmplifyErrorCode } from '../../../types';\nimport { isClockSkewError } from './isClockSkewError';\n/**\n * Get retry decider function\n * @param errorParser Function to load JavaScript error from HTTP response\n */\nexport const getRetryDecider = (errorParser) => async (response, error) => {\n    const parsedError = error ??\n        (await errorParser(response)) ??\n        undefined;\n    const errorCode = parsedError?.code || parsedError?.name;\n    const statusCode = response?.statusCode;\n    const isRetryable = isConnectionError(error) ||\n        isThrottlingError(statusCode, errorCode) ||\n        isClockSkewError(errorCode) ||\n        isServerSideError(statusCode, errorCode);\n    return {\n        retryable: isRetryable,\n    };\n};\n// reference: https://github.com/aws/aws-sdk-js-v3/blob/ab0e7be36e7e7f8a0c04834357aaad643c7912c3/packages/service-error-classification/src/constants.ts#L22-L37\nconst THROTTLING_ERROR_CODES = [\n    'BandwidthLimitExceeded',\n    'EC2ThrottledException',\n    'LimitExceededException',\n    'PriorRequestNotComplete',\n    'ProvisionedThroughputExceededException',\n    'RequestLimitExceeded',\n    'RequestThrottled',\n    'RequestThrottledException',\n    'SlowDown',\n    'ThrottledException',\n    'Throttling',\n    'ThrottlingException',\n    'TooManyRequestsException',\n];\nconst TIMEOUT_ERROR_CODES = [\n    'TimeoutError',\n    'RequestTimeout',\n    'RequestTimeoutException',\n];\nconst isThrottlingError = (statusCode, errorCode) => statusCode === 429 ||\n    (!!errorCode && THROTTLING_ERROR_CODES.includes(errorCode));\nconst isConnectionError = (error) => [\n    AmplifyErrorCode.NetworkError,\n    // TODO(vNext): unify the error code `ERR_NETWORK` used by the Storage XHR handler\n    'ERR_NETWORK',\n].includes(error?.name);\nconst isServerSideError = (statusCode, errorCode) => (!!statusCode && [500, 502, 503, 504].includes(statusCode)) ||\n    (!!errorCode && TIMEOUT_ERROR_CODES.includes(errorCode));\n"],"mappings":";;;AAAA;AACA;AAGA;AACA;AACA;AACA;AACY,MAACA,eAAe,GAAIC,WAAW,IAAK,OAAOC,QAAQ,EAAEC,KAAK,KAAK;EAAA,IAAAC,IAAA;EACvE,MAAMC,WAAW,IAAAD,IAAA,GAAGD,KAAK,aAALA,KAAK,cAALA,KAAK,GACpB,MAAMF,WAAW,CAACC,QAAQ,CAAC,cAAAE,IAAA,cAAAA,IAAA,GAC5BE,SAAS;EACb,MAAMC,SAAS,GAAG,CAAAF,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEG,IAAI,MAAIH,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEI,IAAI;EACxD,MAAMC,UAAU,GAAGR,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEQ,UAAU;EACvC,MAAMC,WAAW,GAAGC,iBAAiB,CAACT,KAAK,CAAC,IACxCU,iBAAiB,CAACH,UAAU,EAAEH,SAAS,CAAC,IACxCO,gBAAgB,CAACP,SAAS,CAAC,IAC3BQ,iBAAiB,CAACL,UAAU,EAAEH,SAAS,CAAC;EAC5C,OAAO;IACHS,SAAS,EAAEL;EACnB,CAAK;AACL;AACA;AACA,MAAMM,sBAAsB,GAAG,CAC3B,wBAAwB,EACxB,uBAAuB,EACvB,wBAAwB,EACxB,yBAAyB,EACzB,wCAAwC,EACxC,sBAAsB,EACtB,kBAAkB,EAClB,2BAA2B,EAC3B,UAAU,EACV,oBAAoB,EACpB,YAAY,EACZ,qBAAqB,EACrB,0BAA0B,CAC7B;AACD,MAAMC,mBAAmB,GAAG,CACxB,cAAc,EACd,gBAAgB,EAChB,yBAAyB,CAC5B;AACD,MAAML,iBAAiB,GAAGA,CAACH,UAAU,EAAEH,SAAS,KAAKG,UAAU,KAAK,GAAG,IAClE,CAAC,CAACH,SAAS,IAAIU,sBAAsB,CAACE,QAAQ,CAACZ,SAAS,CAAE;AAC/D,MAAMK,iBAAiB,GAAIT,KAAK,IAAK,CACjCiB,gBAAgB,CAACC,YAAY;AACjC;AACI,aAAa,CAChB,CAACF,QAAQ,CAAChB,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEM,IAAI,CAAC;AACvB,MAAMM,iBAAiB,GAAGA,CAACL,UAAU,EAAEH,SAAS,KAAM,CAAC,CAACG,UAAU,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAACS,QAAQ,CAACT,UAAU,CAAC,IAC1G,CAAC,CAACH,SAAS,IAAIW,mBAAmB,CAACC,QAAQ,CAACZ,SAAS,CAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}