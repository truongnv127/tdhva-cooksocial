{"ast":null,"code":"import { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, assertOAuthConfig, urlSafeEncode, isBrowser, AuthAction } from '@aws-amplify/core/internals/utils';\nimport '../utils/oauth/enableOAuthListener.mjs';\nimport { cognitoHostedUIIdentityProviderMap } from '../types/models.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { openAuthSession } from '../../../utils/openAuthSession.mjs';\nimport { assertUserNotAuthenticated } from '../utils/signInHelpers.mjs';\nimport { generateCodeVerifier } from '../utils/oauth/generateCodeVerifier.mjs';\nimport { generateState } from '../utils/oauth/generateState.mjs';\nimport '../utils/refreshAuthTokens.mjs';\nimport '../tokenProvider/errorHelpers.mjs';\nimport { oAuthStore } from '../utils/oauth/oAuthStore.mjs';\nimport '../tokenProvider/tokenProvider.mjs';\nimport { getRedirectUrl } from '../utils/oauth/getRedirectUrl.mjs';\nimport { handleFailure } from '../utils/oauth/handleFailure.mjs';\nimport { completeOAuthFlow } from '../utils/oauth/completeOAuthFlow.mjs';\nimport '../../../types/Auth.mjs';\nimport { createOAuthError } from '../utils/oauth/createOAuthError.mjs';\nimport { listenForOAuthFlowCancellation } from '../utils/oauth/cancelOAuthFlow.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Signs in a user with OAuth. Redirects the application to an Identity Provider.\n *\n * @param input - The SignInWithRedirectInput object, if empty it will redirect to Cognito HostedUI\n *\n * @throws AuthTokenConfigException - Thrown when the user pool config is invalid.\n * @throws OAuthNotConfigureException - Thrown when the oauth config is invalid.\n */\nasync function signInWithRedirect(input) {\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  assertOAuthConfig(authConfig);\n  oAuthStore.setAuthConfig(authConfig);\n  if (!input?.options?.prompt) {\n    await assertUserNotAuthenticated();\n  }\n  let provider = 'COGNITO'; // Default\n  if (typeof input?.provider === 'string') {\n    provider = cognitoHostedUIIdentityProviderMap[input.provider];\n  } else if (input?.provider?.custom) {\n    provider = input.provider.custom;\n  }\n  return oauthSignIn({\n    oauthConfig: authConfig.loginWith.oauth,\n    clientId: authConfig.userPoolClientId,\n    provider,\n    customState: input?.customState,\n    preferPrivateSession: input?.options?.preferPrivateSession,\n    options: {\n      loginHint: input?.options?.loginHint,\n      lang: input?.options?.lang,\n      nonce: input?.options?.nonce,\n      prompt: input?.options?.prompt\n    },\n    authSessionOpener: input?.options?.authSessionOpener\n  });\n}\nconst oauthSignIn = async ({\n  oauthConfig,\n  provider,\n  clientId,\n  customState,\n  preferPrivateSession,\n  options,\n  authSessionOpener\n}) => {\n  const {\n    domain,\n    redirectSignIn,\n    responseType,\n    scopes\n  } = oauthConfig;\n  const {\n    loginHint,\n    lang,\n    nonce,\n    prompt\n  } = options ?? {};\n  const randomState = generateState();\n  const openAuthSession$1 = authSessionOpener || openAuthSession;\n  /* encodeURIComponent is not URL safe, use urlSafeEncode instead. Cognito\n  single-encodes/decodes url on first sign in and double-encodes/decodes url\n  when user already signed in. Using encodeURIComponent, Base32, Base64 add\n  characters % or = which on further encoding becomes unsafe. '=' create issue\n  for parsing query params.\n  Refer: https://github.com/aws-amplify/amplify-js/issues/5218 */\n  const state = customState ? `${randomState}-${urlSafeEncode(customState)}` : randomState;\n  const {\n    value,\n    method,\n    toCodeChallenge\n  } = generateCodeVerifier(128);\n  const redirectUri = getRedirectUrl(oauthConfig.redirectSignIn);\n  if (isBrowser()) oAuthStore.storeOAuthInFlight(true);\n  oAuthStore.storeOAuthState(state);\n  oAuthStore.storePKCE(value);\n  const params = new URLSearchParams([['redirect_uri', redirectUri], ['response_type', responseType], ['client_id', clientId], ['identity_provider', provider], ['scope', scopes.join(' ')]]);\n  loginHint && params.append('login_hint', loginHint);\n  lang && params.append('lang', lang);\n  nonce && params.append('nonce', nonce);\n  prompt && params.append('prompt', prompt.toLowerCase());\n  params.append('state', state);\n  if (responseType === 'code') {\n    params.append('code_challenge', toCodeChallenge());\n    params.append('code_challenge_method', method);\n  }\n  // Using URL object is not supported in React Native as the `search` property is read-only\n  // See: https://github.com/facebook/react-native/blob/main/packages/react-native/Libraries/Blob/URL.js\n  const oAuthUrl = `https://${domain}/oauth2/authorize?${params.toString()}`;\n  // this will only take effect in the following scenarios:\n  // 1. the user cancels the OAuth flow on web via back button, and\n  // 2. when bfcache is enabled\n  listenForOAuthFlowCancellation(oAuthStore);\n  // the following is effective only in react-native as openAuthSession resolves only in react-native\n  const {\n    type,\n    error,\n    url\n  } = (await openAuthSession$1(oAuthUrl, redirectSignIn, preferPrivateSession)) ?? {};\n  try {\n    if (type === 'error') {\n      throw createOAuthError(String(error));\n    }\n    if (type === 'success' && url) {\n      await completeOAuthFlow({\n        currentUrl: url,\n        clientId,\n        domain,\n        redirectUri,\n        responseType,\n        userAgentValue: getAuthUserAgentValue(AuthAction.SignInWithRedirect),\n        preferPrivateSession\n      });\n    }\n  } catch (err) {\n    await handleFailure(err);\n    // rethrow the error so it can be caught by `await signInWithRedirect()` in react-native\n    throw err;\n  }\n};\nexport { signInWithRedirect };","map":{"version":3,"names":["signInWithRedirect","input","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","assertOAuthConfig","oAuthStore","setAuthConfig","options","prompt","assertUserNotAuthenticated","provider","cognitoHostedUIIdentityProviderMap","custom","oauthSignIn","oauthConfig","loginWith","oauth","clientId","userPoolClientId","customState","preferPrivateSession","loginHint","lang","nonce","authSessionOpener","domain","redirectSignIn","responseType","scopes","randomState","generateState","openAuthSession$1","openAuthSession","state","urlSafeEncode","value","method","toCodeChallenge","generateCodeVerifier","redirectUri","getRedirectUrl","isBrowser","storeOAuthInFlight","storeOAuthState","storePKCE","params","URLSearchParams","join","append","toLowerCase","oAuthUrl","toString","listenForOAuthFlowCancellation","type","error","url","createOAuthError","String","completeOAuthFlow","currentUrl","userAgentValue","getAuthUserAgentValue","AuthAction","SignInWithRedirect","err","handleFailure"],"sources":["/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/node_modules/@aws-amplify/auth/src/providers/cognito/apis/signInWithRedirect.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { AuthAction, assertOAuthConfig, assertTokenProviderConfig, isBrowser, urlSafeEncode, } from '@aws-amplify/core/internals/utils';\nimport '../utils/oauth/enableOAuthListener';\nimport { cognitoHostedUIIdentityProviderMap } from '../types/models';\nimport { openAuthSession as _openAuthSession, getAuthUserAgentValue, } from '../../../utils';\nimport { assertUserNotAuthenticated } from '../utils/signInHelpers';\nimport { completeOAuthFlow, generateCodeVerifier, generateState, getRedirectUrl, handleFailure, oAuthStore, } from '../utils/oauth';\nimport { createOAuthError } from '../utils/oauth/createOAuthError';\nimport { listenForOAuthFlowCancellation } from '../utils/oauth/cancelOAuthFlow';\n/**\n * Signs in a user with OAuth. Redirects the application to an Identity Provider.\n *\n * @param input - The SignInWithRedirectInput object, if empty it will redirect to Cognito HostedUI\n *\n * @throws AuthTokenConfigException - Thrown when the user pool config is invalid.\n * @throws OAuthNotConfigureException - Thrown when the oauth config is invalid.\n */\nexport async function signInWithRedirect(input) {\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    assertOAuthConfig(authConfig);\n    oAuthStore.setAuthConfig(authConfig);\n    if (!input?.options?.prompt) {\n        await assertUserNotAuthenticated();\n    }\n    let provider = 'COGNITO'; // Default\n    if (typeof input?.provider === 'string') {\n        provider = cognitoHostedUIIdentityProviderMap[input.provider];\n    }\n    else if (input?.provider?.custom) {\n        provider = input.provider.custom;\n    }\n    return oauthSignIn({\n        oauthConfig: authConfig.loginWith.oauth,\n        clientId: authConfig.userPoolClientId,\n        provider,\n        customState: input?.customState,\n        preferPrivateSession: input?.options?.preferPrivateSession,\n        options: {\n            loginHint: input?.options?.loginHint,\n            lang: input?.options?.lang,\n            nonce: input?.options?.nonce,\n            prompt: input?.options?.prompt,\n        },\n        authSessionOpener: input?.options?.authSessionOpener,\n    });\n}\nconst oauthSignIn = async ({ oauthConfig, provider, clientId, customState, preferPrivateSession, options, authSessionOpener, }) => {\n    const { domain, redirectSignIn, responseType, scopes } = oauthConfig;\n    const { loginHint, lang, nonce, prompt } = options ?? {};\n    const randomState = generateState();\n    const openAuthSession = authSessionOpener || _openAuthSession;\n    /* encodeURIComponent is not URL safe, use urlSafeEncode instead. Cognito\n    single-encodes/decodes url on first sign in and double-encodes/decodes url\n    when user already signed in. Using encodeURIComponent, Base32, Base64 add\n    characters % or = which on further encoding becomes unsafe. '=' create issue\n    for parsing query params.\n    Refer: https://github.com/aws-amplify/amplify-js/issues/5218 */\n    const state = customState\n        ? `${randomState}-${urlSafeEncode(customState)}`\n        : randomState;\n    const { value, method, toCodeChallenge } = generateCodeVerifier(128);\n    const redirectUri = getRedirectUrl(oauthConfig.redirectSignIn);\n    if (isBrowser())\n        oAuthStore.storeOAuthInFlight(true);\n    oAuthStore.storeOAuthState(state);\n    oAuthStore.storePKCE(value);\n    const params = new URLSearchParams([\n        ['redirect_uri', redirectUri],\n        ['response_type', responseType],\n        ['client_id', clientId],\n        ['identity_provider', provider],\n        ['scope', scopes.join(' ')],\n    ]);\n    loginHint && params.append('login_hint', loginHint);\n    lang && params.append('lang', lang);\n    nonce && params.append('nonce', nonce);\n    prompt && params.append('prompt', prompt.toLowerCase());\n    params.append('state', state);\n    if (responseType === 'code') {\n        params.append('code_challenge', toCodeChallenge());\n        params.append('code_challenge_method', method);\n    }\n    // Using URL object is not supported in React Native as the `search` property is read-only\n    // See: https://github.com/facebook/react-native/blob/main/packages/react-native/Libraries/Blob/URL.js\n    const oAuthUrl = `https://${domain}/oauth2/authorize?${params.toString()}`;\n    // this will only take effect in the following scenarios:\n    // 1. the user cancels the OAuth flow on web via back button, and\n    // 2. when bfcache is enabled\n    listenForOAuthFlowCancellation(oAuthStore);\n    // the following is effective only in react-native as openAuthSession resolves only in react-native\n    const { type, error, url } = (await openAuthSession(oAuthUrl, redirectSignIn, preferPrivateSession)) ??\n        {};\n    try {\n        if (type === 'error') {\n            throw createOAuthError(String(error));\n        }\n        if (type === 'success' && url) {\n            await completeOAuthFlow({\n                currentUrl: url,\n                clientId,\n                domain,\n                redirectUri,\n                responseType,\n                userAgentValue: getAuthUserAgentValue(AuthAction.SignInWithRedirect),\n                preferPrivateSession,\n            });\n        }\n    }\n    catch (err) {\n        await handleFailure(err);\n        // rethrow the error so it can be caught by `await signInWithRedirect()` in react-native\n        throw err;\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}