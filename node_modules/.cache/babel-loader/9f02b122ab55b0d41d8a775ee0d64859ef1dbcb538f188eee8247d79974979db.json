{"ast":null,"code":"import { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, assertOAuthConfig, urlSafeEncode, isBrowser, AuthAction } from '@aws-amplify/core/internals/utils';\nimport '../utils/oauth/enableOAuthListener.mjs';\nimport { cognitoHostedUIIdentityProviderMap } from '../types/models.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { openAuthSession } from '../../../utils/openAuthSession.mjs';\nimport { assertUserNotAuthenticated } from '../utils/signInHelpers.mjs';\nimport { generateCodeVerifier } from '../utils/oauth/generateCodeVerifier.mjs';\nimport { generateState } from '../utils/oauth/generateState.mjs';\nimport '../utils/refreshAuthTokens.mjs';\nimport '../tokenProvider/errorHelpers.mjs';\nimport { oAuthStore } from '../utils/oauth/oAuthStore.mjs';\nimport '../tokenProvider/tokenProvider.mjs';\nimport { getRedirectUrl } from '../utils/oauth/getRedirectUrl.mjs';\nimport { handleFailure } from '../utils/oauth/handleFailure.mjs';\nimport { completeOAuthFlow } from '../utils/oauth/completeOAuthFlow.mjs';\nimport '../../../types/Auth.mjs';\nimport { createOAuthError } from '../utils/oauth/createOAuthError.mjs';\nimport { listenForOAuthFlowCancellation } from '../utils/oauth/cancelOAuthFlow.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Signs in a user with OAuth. Redirects the application to an Identity Provider.\n *\n * @param input - The SignInWithRedirectInput object, if empty it will redirect to Cognito HostedUI\n *\n * @throws AuthTokenConfigException - Thrown when the user pool config is invalid.\n * @throws OAuthNotConfigureException - Thrown when the oauth config is invalid.\n */\nasync function signInWithRedirect(input) {\n  var _Amplify$getConfig$Au, _input$options, _input$provider, _input$options2, _input$options3, _input$options4, _input$options5, _input$options6, _input$options7;\n  const authConfig = (_Amplify$getConfig$Au = Amplify.getConfig().Auth) === null || _Amplify$getConfig$Au === void 0 ? void 0 : _Amplify$getConfig$Au.Cognito;\n  assertTokenProviderConfig(authConfig);\n  assertOAuthConfig(authConfig);\n  oAuthStore.setAuthConfig(authConfig);\n  if (!(input !== null && input !== void 0 && (_input$options = input.options) !== null && _input$options !== void 0 && _input$options.prompt)) {\n    await assertUserNotAuthenticated();\n  }\n  let provider = 'COGNITO'; // Default\n  if (typeof (input === null || input === void 0 ? void 0 : input.provider) === 'string') {\n    provider = cognitoHostedUIIdentityProviderMap[input.provider];\n  } else if (input !== null && input !== void 0 && (_input$provider = input.provider) !== null && _input$provider !== void 0 && _input$provider.custom) {\n    provider = input.provider.custom;\n  }\n  return oauthSignIn({\n    oauthConfig: authConfig.loginWith.oauth,\n    clientId: authConfig.userPoolClientId,\n    provider,\n    customState: input === null || input === void 0 ? void 0 : input.customState,\n    preferPrivateSession: input === null || input === void 0 || (_input$options2 = input.options) === null || _input$options2 === void 0 ? void 0 : _input$options2.preferPrivateSession,\n    options: {\n      loginHint: input === null || input === void 0 || (_input$options3 = input.options) === null || _input$options3 === void 0 ? void 0 : _input$options3.loginHint,\n      lang: input === null || input === void 0 || (_input$options4 = input.options) === null || _input$options4 === void 0 ? void 0 : _input$options4.lang,\n      nonce: input === null || input === void 0 || (_input$options5 = input.options) === null || _input$options5 === void 0 ? void 0 : _input$options5.nonce,\n      prompt: input === null || input === void 0 || (_input$options6 = input.options) === null || _input$options6 === void 0 ? void 0 : _input$options6.prompt\n    },\n    authSessionOpener: input === null || input === void 0 || (_input$options7 = input.options) === null || _input$options7 === void 0 ? void 0 : _input$options7.authSessionOpener\n  });\n}\nconst oauthSignIn = async _ref => {\n  var _await$openAuthSessio;\n  let {\n    oauthConfig,\n    provider,\n    clientId,\n    customState,\n    preferPrivateSession,\n    options,\n    authSessionOpener\n  } = _ref;\n  const {\n    domain,\n    redirectSignIn,\n    responseType,\n    scopes\n  } = oauthConfig;\n  const {\n    loginHint,\n    lang,\n    nonce,\n    prompt\n  } = options !== null && options !== void 0 ? options : {};\n  const randomState = generateState();\n  const openAuthSession$1 = authSessionOpener || openAuthSession;\n  /* encodeURIComponent is not URL safe, use urlSafeEncode instead. Cognito\n  single-encodes/decodes url on first sign in and double-encodes/decodes url\n  when user already signed in. Using encodeURIComponent, Base32, Base64 add\n  characters % or = which on further encoding becomes unsafe. '=' create issue\n  for parsing query params.\n  Refer: https://github.com/aws-amplify/amplify-js/issues/5218 */\n  const state = customState ? \"\".concat(randomState, \"-\").concat(urlSafeEncode(customState)) : randomState;\n  const {\n    value,\n    method,\n    toCodeChallenge\n  } = generateCodeVerifier(128);\n  const redirectUri = getRedirectUrl(oauthConfig.redirectSignIn);\n  if (isBrowser()) oAuthStore.storeOAuthInFlight(true);\n  oAuthStore.storeOAuthState(state);\n  oAuthStore.storePKCE(value);\n  const params = new URLSearchParams([['redirect_uri', redirectUri], ['response_type', responseType], ['client_id', clientId], ['identity_provider', provider], ['scope', scopes.join(' ')]]);\n  loginHint && params.append('login_hint', loginHint);\n  lang && params.append('lang', lang);\n  nonce && params.append('nonce', nonce);\n  prompt && params.append('prompt', prompt.toLowerCase());\n  params.append('state', state);\n  if (responseType === 'code') {\n    params.append('code_challenge', toCodeChallenge());\n    params.append('code_challenge_method', method);\n  }\n  // Using URL object is not supported in React Native as the `search` property is read-only\n  // See: https://github.com/facebook/react-native/blob/main/packages/react-native/Libraries/Blob/URL.js\n  const oAuthUrl = \"https://\".concat(domain, \"/oauth2/authorize?\").concat(params.toString());\n  // this will only take effect in the following scenarios:\n  // 1. the user cancels the OAuth flow on web via back button, and\n  // 2. when bfcache is enabled\n  listenForOAuthFlowCancellation(oAuthStore);\n  // the following is effective only in react-native as openAuthSession resolves only in react-native\n  const {\n    type,\n    error,\n    url\n  } = (_await$openAuthSessio = await openAuthSession$1(oAuthUrl, redirectSignIn, preferPrivateSession)) !== null && _await$openAuthSessio !== void 0 ? _await$openAuthSessio : {};\n  try {\n    if (type === 'error') {\n      throw createOAuthError(String(error));\n    }\n    if (type === 'success' && url) {\n      await completeOAuthFlow({\n        currentUrl: url,\n        clientId,\n        domain,\n        redirectUri,\n        responseType,\n        userAgentValue: getAuthUserAgentValue(AuthAction.SignInWithRedirect),\n        preferPrivateSession\n      });\n    }\n  } catch (err) {\n    await handleFailure(err);\n    // rethrow the error so it can be caught by `await signInWithRedirect()` in react-native\n    throw err;\n  }\n};\nexport { signInWithRedirect };","map":{"version":3,"names":["signInWithRedirect","input","_Amplify$getConfig$Au","_input$options","_input$provider","_input$options2","_input$options3","_input$options4","_input$options5","_input$options6","_input$options7","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","assertOAuthConfig","oAuthStore","setAuthConfig","options","prompt","assertUserNotAuthenticated","provider","cognitoHostedUIIdentityProviderMap","custom","oauthSignIn","oauthConfig","loginWith","oauth","clientId","userPoolClientId","customState","preferPrivateSession","loginHint","lang","nonce","authSessionOpener","_ref","_await$openAuthSessio","domain","redirectSignIn","responseType","scopes","randomState","generateState","openAuthSession$1","openAuthSession","state","concat","urlSafeEncode","value","method","toCodeChallenge","generateCodeVerifier","redirectUri","getRedirectUrl","isBrowser","storeOAuthInFlight","storeOAuthState","storePKCE","params","URLSearchParams","join","append","toLowerCase","oAuthUrl","toString","listenForOAuthFlowCancellation","type","error","url","createOAuthError","String","completeOAuthFlow","currentUrl","userAgentValue","getAuthUserAgentValue","AuthAction","SignInWithRedirect","err","handleFailure"],"sources":["/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@aws-amplify/auth/src/providers/cognito/apis/signInWithRedirect.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { AuthAction, assertOAuthConfig, assertTokenProviderConfig, isBrowser, urlSafeEncode, } from '@aws-amplify/core/internals/utils';\nimport '../utils/oauth/enableOAuthListener';\nimport { cognitoHostedUIIdentityProviderMap } from '../types/models';\nimport { openAuthSession as _openAuthSession, getAuthUserAgentValue, } from '../../../utils';\nimport { assertUserNotAuthenticated } from '../utils/signInHelpers';\nimport { completeOAuthFlow, generateCodeVerifier, generateState, getRedirectUrl, handleFailure, oAuthStore, } from '../utils/oauth';\nimport { createOAuthError } from '../utils/oauth/createOAuthError';\nimport { listenForOAuthFlowCancellation } from '../utils/oauth/cancelOAuthFlow';\n/**\n * Signs in a user with OAuth. Redirects the application to an Identity Provider.\n *\n * @param input - The SignInWithRedirectInput object, if empty it will redirect to Cognito HostedUI\n *\n * @throws AuthTokenConfigException - Thrown when the user pool config is invalid.\n * @throws OAuthNotConfigureException - Thrown when the oauth config is invalid.\n */\nexport async function signInWithRedirect(input) {\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    assertOAuthConfig(authConfig);\n    oAuthStore.setAuthConfig(authConfig);\n    if (!input?.options?.prompt) {\n        await assertUserNotAuthenticated();\n    }\n    let provider = 'COGNITO'; // Default\n    if (typeof input?.provider === 'string') {\n        provider = cognitoHostedUIIdentityProviderMap[input.provider];\n    }\n    else if (input?.provider?.custom) {\n        provider = input.provider.custom;\n    }\n    return oauthSignIn({\n        oauthConfig: authConfig.loginWith.oauth,\n        clientId: authConfig.userPoolClientId,\n        provider,\n        customState: input?.customState,\n        preferPrivateSession: input?.options?.preferPrivateSession,\n        options: {\n            loginHint: input?.options?.loginHint,\n            lang: input?.options?.lang,\n            nonce: input?.options?.nonce,\n            prompt: input?.options?.prompt,\n        },\n        authSessionOpener: input?.options?.authSessionOpener,\n    });\n}\nconst oauthSignIn = async ({ oauthConfig, provider, clientId, customState, preferPrivateSession, options, authSessionOpener, }) => {\n    const { domain, redirectSignIn, responseType, scopes } = oauthConfig;\n    const { loginHint, lang, nonce, prompt } = options ?? {};\n    const randomState = generateState();\n    const openAuthSession = authSessionOpener || _openAuthSession;\n    /* encodeURIComponent is not URL safe, use urlSafeEncode instead. Cognito\n    single-encodes/decodes url on first sign in and double-encodes/decodes url\n    when user already signed in. Using encodeURIComponent, Base32, Base64 add\n    characters % or = which on further encoding becomes unsafe. '=' create issue\n    for parsing query params.\n    Refer: https://github.com/aws-amplify/amplify-js/issues/5218 */\n    const state = customState\n        ? `${randomState}-${urlSafeEncode(customState)}`\n        : randomState;\n    const { value, method, toCodeChallenge } = generateCodeVerifier(128);\n    const redirectUri = getRedirectUrl(oauthConfig.redirectSignIn);\n    if (isBrowser())\n        oAuthStore.storeOAuthInFlight(true);\n    oAuthStore.storeOAuthState(state);\n    oAuthStore.storePKCE(value);\n    const params = new URLSearchParams([\n        ['redirect_uri', redirectUri],\n        ['response_type', responseType],\n        ['client_id', clientId],\n        ['identity_provider', provider],\n        ['scope', scopes.join(' ')],\n    ]);\n    loginHint && params.append('login_hint', loginHint);\n    lang && params.append('lang', lang);\n    nonce && params.append('nonce', nonce);\n    prompt && params.append('prompt', prompt.toLowerCase());\n    params.append('state', state);\n    if (responseType === 'code') {\n        params.append('code_challenge', toCodeChallenge());\n        params.append('code_challenge_method', method);\n    }\n    // Using URL object is not supported in React Native as the `search` property is read-only\n    // See: https://github.com/facebook/react-native/blob/main/packages/react-native/Libraries/Blob/URL.js\n    const oAuthUrl = `https://${domain}/oauth2/authorize?${params.toString()}`;\n    // this will only take effect in the following scenarios:\n    // 1. the user cancels the OAuth flow on web via back button, and\n    // 2. when bfcache is enabled\n    listenForOAuthFlowCancellation(oAuthStore);\n    // the following is effective only in react-native as openAuthSession resolves only in react-native\n    const { type, error, url } = (await openAuthSession(oAuthUrl, redirectSignIn, preferPrivateSession)) ??\n        {};\n    try {\n        if (type === 'error') {\n            throw createOAuthError(String(error));\n        }\n        if (type === 'success' && url) {\n            await completeOAuthFlow({\n                currentUrl: url,\n                clientId,\n                domain,\n                redirectUri,\n                responseType,\n                userAgentValue: getAuthUserAgentValue(AuthAction.SignInWithRedirect),\n                preferPrivateSession,\n            });\n        }\n    }\n    catch (err) {\n        await handleFailure(err);\n        // rethrow the error so it can be caught by `await signInWithRedirect()` in react-native\n        throw err;\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}