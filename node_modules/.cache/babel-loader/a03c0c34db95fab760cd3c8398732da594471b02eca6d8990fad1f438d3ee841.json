{"ast":null,"code":"import { Amplify, CookieStorage, defaultStorage } from '@aws-amplify/core';\nimport { parseAmplifyConfig } from '@aws-amplify/core/internals/utils';\nimport { CognitoAWSCredentialsAndIdentityIdProvider, DefaultIdentityIdStore, cognitoCredentialsProvider, cognitoUserPoolsTokenProvider } from '@aws-amplify/auth/cognito';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst DefaultAmplify = {\n  /**\n   * Configures Amplify with the {@link resourceConfig} and {@link libraryOptions}.\n   *\n   * @param resourceConfig The {@link ResourcesConfig} object that is typically imported from the\n   * `amplifyconfiguration.json` file. It can also be an object literal created inline when calling `Amplify.configure`.\n   * @param libraryOptions The {@link LibraryOptions} additional options for the library.\n   *\n   * @example\n   * import config from './amplifyconfiguration.json';\n   *\n   * Amplify.configure(config);\n   */\n  configure(resourceConfig, libraryOptions) {\n    const resolvedResourceConfig = parseAmplifyConfig(resourceConfig);\n    const cookieBasedKeyValueStorage = new CookieStorage({\n      sameSite: 'lax'\n    });\n    const resolvedKeyValueStorage = libraryOptions?.ssr ? cookieBasedKeyValueStorage : defaultStorage;\n    const resolvedCredentialsProvider = libraryOptions?.ssr ? new CognitoAWSCredentialsAndIdentityIdProvider(new DefaultIdentityIdStore(cookieBasedKeyValueStorage)) : cognitoCredentialsProvider;\n    // If no Auth config is provided, no special handling will be required, configure as is.\n    // Otherwise, we can assume an Auth config is provided from here on.\n    if (!resolvedResourceConfig.Auth) {\n      Amplify.configure(resolvedResourceConfig, libraryOptions);\n      return;\n    }\n    // If Auth options are provided, always just configure as is.\n    // Otherwise, we can assume no Auth libraryOptions were provided from here on.\n    if (libraryOptions?.Auth) {\n      Amplify.configure(resolvedResourceConfig, libraryOptions);\n      return;\n    }\n    // If no Auth libraryOptions were previously configured, then always add default providers.\n    if (!Amplify.libraryOptions.Auth) {\n      cognitoUserPoolsTokenProvider.setAuthConfig(resolvedResourceConfig.Auth);\n      cognitoUserPoolsTokenProvider.setKeyValueStorage(\n      // TODO: allow configure with a public interface\n      resolvedKeyValueStorage);\n      Amplify.configure(resolvedResourceConfig, {\n        ...libraryOptions,\n        Auth: {\n          tokenProvider: cognitoUserPoolsTokenProvider,\n          credentialsProvider: resolvedCredentialsProvider\n        }\n      });\n      return;\n    }\n    // At this point, Auth libraryOptions would have been previously configured and no overriding\n    // Auth options were given, so we should preserve the currently configured Auth libraryOptions.\n    if (libraryOptions) {\n      const authLibraryOptions = Amplify.libraryOptions.Auth;\n      // If ssr is provided through libraryOptions, we should respect the intentional reconfiguration.\n      if (libraryOptions.ssr !== undefined) {\n        cognitoUserPoolsTokenProvider.setKeyValueStorage(\n        // TODO: allow configure with a public interface\n        resolvedKeyValueStorage);\n        authLibraryOptions.credentialsProvider = resolvedCredentialsProvider;\n      }\n      Amplify.configure(resolvedResourceConfig, {\n        Auth: authLibraryOptions,\n        ...libraryOptions\n      });\n      return;\n    }\n    // Finally, if there were no libraryOptions given at all, we should simply not touch the currently\n    // configured libraryOptions.\n    Amplify.configure(resolvedResourceConfig);\n  },\n  /**\n   * Returns the {@link ResourcesConfig} object passed in as the `resourceConfig` parameter when calling\n   * `Amplify.configure`.\n   *\n   * @returns An {@link ResourcesConfig} object.\n   */\n  getConfig() {\n    return Amplify.getConfig();\n  }\n};\nexport { DefaultAmplify };","map":{"version":3,"names":["DefaultAmplify","configure","resourceConfig","libraryOptions","resolvedResourceConfig","parseAmplifyConfig","cookieBasedKeyValueStorage","CookieStorage","sameSite","resolvedKeyValueStorage","ssr","defaultStorage","resolvedCredentialsProvider","CognitoAWSCredentialsAndIdentityIdProvider","DefaultIdentityIdStore","cognitoCredentialsProvider","Auth","Amplify","cognitoUserPoolsTokenProvider","setAuthConfig","setKeyValueStorage","tokenProvider","credentialsProvider","authLibraryOptions","undefined","getConfig"],"sources":["/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/aws-amplify/src/initSingleton.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify, CookieStorage, defaultStorage, } from '@aws-amplify/core';\nimport { parseAmplifyConfig, } from '@aws-amplify/core/internals/utils';\nimport { CognitoAWSCredentialsAndIdentityIdProvider, DefaultIdentityIdStore, cognitoCredentialsProvider, cognitoUserPoolsTokenProvider, } from './auth/cognito';\nexport const DefaultAmplify = {\n    /**\n     * Configures Amplify with the {@link resourceConfig} and {@link libraryOptions}.\n     *\n     * @param resourceConfig The {@link ResourcesConfig} object that is typically imported from the\n     * `amplifyconfiguration.json` file. It can also be an object literal created inline when calling `Amplify.configure`.\n     * @param libraryOptions The {@link LibraryOptions} additional options for the library.\n     *\n     * @example\n     * import config from './amplifyconfiguration.json';\n     *\n     * Amplify.configure(config);\n     */\n    configure(resourceConfig, libraryOptions) {\n        const resolvedResourceConfig = parseAmplifyConfig(resourceConfig);\n        const cookieBasedKeyValueStorage = new CookieStorage({ sameSite: 'lax' });\n        const resolvedKeyValueStorage = libraryOptions?.ssr\n            ? cookieBasedKeyValueStorage\n            : defaultStorage;\n        const resolvedCredentialsProvider = libraryOptions?.ssr\n            ? new CognitoAWSCredentialsAndIdentityIdProvider(new DefaultIdentityIdStore(cookieBasedKeyValueStorage))\n            : cognitoCredentialsProvider;\n        // If no Auth config is provided, no special handling will be required, configure as is.\n        // Otherwise, we can assume an Auth config is provided from here on.\n        if (!resolvedResourceConfig.Auth) {\n            Amplify.configure(resolvedResourceConfig, libraryOptions);\n            return;\n        }\n        // If Auth options are provided, always just configure as is.\n        // Otherwise, we can assume no Auth libraryOptions were provided from here on.\n        if (libraryOptions?.Auth) {\n            Amplify.configure(resolvedResourceConfig, libraryOptions);\n            return;\n        }\n        // If no Auth libraryOptions were previously configured, then always add default providers.\n        if (!Amplify.libraryOptions.Auth) {\n            cognitoUserPoolsTokenProvider.setAuthConfig(resolvedResourceConfig.Auth);\n            cognitoUserPoolsTokenProvider.setKeyValueStorage(\n            // TODO: allow configure with a public interface\n            resolvedKeyValueStorage);\n            Amplify.configure(resolvedResourceConfig, {\n                ...libraryOptions,\n                Auth: {\n                    tokenProvider: cognitoUserPoolsTokenProvider,\n                    credentialsProvider: resolvedCredentialsProvider,\n                },\n            });\n            return;\n        }\n        // At this point, Auth libraryOptions would have been previously configured and no overriding\n        // Auth options were given, so we should preserve the currently configured Auth libraryOptions.\n        if (libraryOptions) {\n            const authLibraryOptions = Amplify.libraryOptions.Auth;\n            // If ssr is provided through libraryOptions, we should respect the intentional reconfiguration.\n            if (libraryOptions.ssr !== undefined) {\n                cognitoUserPoolsTokenProvider.setKeyValueStorage(\n                // TODO: allow configure with a public interface\n                resolvedKeyValueStorage);\n                authLibraryOptions.credentialsProvider = resolvedCredentialsProvider;\n            }\n            Amplify.configure(resolvedResourceConfig, {\n                Auth: authLibraryOptions,\n                ...libraryOptions,\n            });\n            return;\n        }\n        // Finally, if there were no libraryOptions given at all, we should simply not touch the currently\n        // configured libraryOptions.\n        Amplify.configure(resolvedResourceConfig);\n    },\n    /**\n     * Returns the {@link ResourcesConfig} object passed in as the `resourceConfig` parameter when calling\n     * `Amplify.configure`.\n     *\n     * @returns An {@link ResourcesConfig} object.\n     */\n    getConfig() {\n        return Amplify.getConfig();\n    },\n};\n"],"mappings":";;;;AAAA;AACA;AAIY,MAACA,cAAc,GAAG;EAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,SAASA,CAACC,cAAc,EAAEC,cAAc,EAAE;IACtC,MAAMC,sBAAsB,GAAGC,kBAAkB,CAACH,cAAc,CAAC;IACjE,MAAMI,0BAA0B,GAAG,IAAIC,aAAa,CAAC;MAAEC,QAAQ,EAAE;IAAK,CAAE,CAAC;IACzE,MAAMC,uBAAuB,GAAGN,cAAc,EAAEO,GAAA,GAC1CJ,0BAAA,GACAK,cAAc;IACpB,MAAMC,2BAA2B,GAAGT,cAAc,EAAEO,GAAA,GAC9C,IAAIG,0CAA0C,CAAC,IAAIC,sBAAsB,CAACR,0BAA0B,CAAC,IACrGS,0BAA0B;IACxC;IACA;IACQ,IAAI,CAACX,sBAAsB,CAACY,IAAI,EAAE;MAC9BC,OAAO,CAAChB,SAAS,CAACG,sBAAsB,EAAED,cAAc,CAAC;MACzD;IACJ;IACR;IACA;IACQ,IAAIA,cAAc,EAAEa,IAAI,EAAE;MACtBC,OAAO,CAAChB,SAAS,CAACG,sBAAsB,EAAED,cAAc,CAAC;MACzD;IACJ;IACR;IACQ,IAAI,CAACc,OAAO,CAACd,cAAc,CAACa,IAAI,EAAE;MAC9BE,6BAA6B,CAACC,aAAa,CAACf,sBAAsB,CAACY,IAAI,CAAC;MACxEE,6BAA6B,CAACE,kBAAkB;MAC5D;MACYX,uBAAuB,CAAC;MACxBQ,OAAO,CAAChB,SAAS,CAACG,sBAAsB,EAAE;QACtC,GAAGD,cAAc;QACjBa,IAAI,EAAE;UACFK,aAAa,EAAEH,6BAA6B;UAC5CI,mBAAmB,EAAEV;QACzC;MACA,CAAa,CAAC;MACF;IACJ;IACR;IACA;IACQ,IAAIT,cAAc,EAAE;MAChB,MAAMoB,kBAAkB,GAAGN,OAAO,CAACd,cAAc,CAACa,IAAI;MAClE;MACY,IAAIb,cAAc,CAACO,GAAG,KAAKc,SAAS,EAAE;QAClCN,6BAA6B,CAACE,kBAAkB;QAChE;QACgBX,uBAAuB,CAAC;QACxBc,kBAAkB,CAACD,mBAAmB,GAAGV,2BAA2B;MACxE;MACAK,OAAO,CAAChB,SAAS,CAACG,sBAAsB,EAAE;QACtCY,IAAI,EAAEO,kBAAkB;QACxB,GAAGpB;MACnB,CAAa,CAAC;MACF;IACJ;IACR;IACA;IACQc,OAAO,CAAChB,SAAS,CAACG,sBAAsB,CAAC;EAC7C,CAAC;EACL;AACA;AACA;AACA;AACA;AACA;EACIqB,SAASA,CAAA,EAAG;IACR,OAAOR,OAAO,CAACQ,SAAS,EAAE;EAC9B;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}