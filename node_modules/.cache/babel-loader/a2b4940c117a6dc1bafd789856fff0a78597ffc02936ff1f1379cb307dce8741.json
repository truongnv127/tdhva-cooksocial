{"ast":null,"code":"import '../../../../types/errors.mjs';\nimport '../../../../errors/errorHelpers.mjs';\nimport '../../../../utils/getClientInfo/getClientInfo.mjs';\nimport '../../../../utils/retry/retry.mjs';\nimport '../../../../parseAWSExports.mjs';\nimport 'uuid';\nimport '../../../../singleton/Auth/utils/errorHelpers.mjs';\nimport '@aws-crypto/sha256-js';\nimport '@smithy/util-hex-encoding';\nimport { getAmplifyUserAgent } from '../../../../Platform/index.mjs';\nimport '../../../../Platform/types.mjs';\nimport '../../../../BackgroundProcessManager/types.mjs';\nimport '../../../../Reachability/Reachability.mjs';\nimport '../../../../Hub/index.mjs';\nimport '../../../../utils/sessionListener/index.mjs';\nimport { parseMetadata } from '../../../../clients/serde/responseInfo.mjs';\nimport { parseJsonError, parseJsonBody } from '../../../../clients/serde/json.mjs';\nimport { composeServiceApi } from '../../../../clients/internal/composeServiceApi.mjs';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\nimport { cognitoIdentityTransferHandler } from './handler/cognitoIdentityTransferHandler.mjs';\nimport { createClientSerializer } from './serde/createClientSerializer.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createGetIdClient = config => composeServiceApi(cognitoIdentityTransferHandler, createClientSerializer('GetId'), getIdDeserializer, {\n  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n  ...config,\n  userAgentValue: getAmplifyUserAgent()\n});\nconst getIdDeserializer = async response => {\n  if (response.statusCode >= 300) {\n    const error = await parseJsonError(response);\n    throw error;\n  }\n  const body = await parseJsonBody(response);\n  return {\n    IdentityId: body.IdentityId,\n    $metadata: parseMetadata(response)\n  };\n};\nexport { createGetIdClient };","map":{"version":3,"names":["createGetIdClient","config","composeServiceApi","cognitoIdentityTransferHandler","createClientSerializer","getIdDeserializer","DEFAULT_SERVICE_CLIENT_API_CONFIG","userAgentValue","getAmplifyUserAgent","response","statusCode","error","parseJsonError","body","parseJsonBody","IdentityId","$metadata","parseMetadata"],"sources":["/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@aws-amplify/core/src/foundation/factories/serviceClients/cognitoIdentity/createGetIdClient.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseJsonBody, parseJsonError, parseMetadata, } from '../../../../clients';\nimport { composeServiceApi } from '../../../../clients/internal';\nimport { getAmplifyUserAgent } from '../../../../Platform';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants';\nimport { cognitoIdentityTransferHandler } from './handler';\nimport { createClientSerializer } from './serde';\nexport const createGetIdClient = (config) => composeServiceApi(cognitoIdentityTransferHandler, createClientSerializer('GetId'), getIdDeserializer, {\n    ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n    ...config,\n    userAgentValue: getAmplifyUserAgent(),\n});\nconst getIdDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        const error = await parseJsonError(response);\n        throw error;\n    }\n    const body = await parseJsonBody(response);\n    return {\n        IdentityId: body.IdentityId,\n        $metadata: parseMetadata(response),\n    };\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAOY,MAACA,iBAAiB,GAAIC,MAAM,IAAKC,iBAAiB,CAACC,8BAA8B,EAAEC,sBAAsB,CAAC,OAAO,CAAC,EAAEC,iBAAiB,EAAE;EAC/I,GAAGC,iCAAiC;EACpC,GAAGL,MAAM;EACTM,cAAc,EAAEC,mBAAmB;AACvC,CAAC;AACD,MAAMH,iBAAiB,GAAG,MAAOI,QAAQ,IAAK;EAC1C,IAAIA,QAAQ,CAACC,UAAU,IAAI,GAAG,EAAE;IAC5B,MAAMC,KAAK,GAAG,MAAMC,cAAc,CAACH,QAAQ,CAAC;IAC5C,MAAME,KAAK;EACf;EACA,MAAME,IAAI,GAAG,MAAMC,aAAa,CAACL,QAAQ,CAAC;EAC1C,OAAO;IACHM,UAAU,EAAEF,IAAI,CAACE,UAAU;IAC3BC,SAAS,EAAEC,aAAa,CAACR,QAAQ;EACzC,CAAK;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}