{"ast":null,"code":"import _objectSpread from \"/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { AuthErrorCodes } from '../../../common/AuthErrorStrings.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../../../providers/cognito/types/errors.mjs';\nimport { createRespondToAuthChallengeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs';\nimport { cacheCognitoTokens } from '../../../providers/cognito/tokenProvider/cacheTokens.mjs';\nimport { dispatchSignedInHubEvent } from '../../../providers/cognito/utils/dispatchSignedInHubEvent.mjs';\nimport '../../utils/store/autoSignInStore.mjs';\nimport { signInStore, setActiveSignInState } from '../../utils/store/signInStore.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { assertPasskeyError, PasskeyErrorCode } from '../../utils/passkey/errors.mjs';\nimport { getPasskey } from '../../utils/passkey/getPasskey.mjs';\nimport { getNewDeviceMetadata } from '../../../providers/cognito/utils/getNewDeviceMetadata.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nasync function handleWebAuthnSignInResult(challengeParameters) {\n  var _Amplify$getConfig$Au;\n  const authConfig = (_Amplify$getConfig$Au = Amplify.getConfig().Auth) === null || _Amplify$getConfig$Au === void 0 ? void 0 : _Amplify$getConfig$Au.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    username,\n    signInSession,\n    signInDetails,\n    challengeName\n  } = signInStore.getState();\n  if (challengeName !== 'WEB_AUTHN' || !username) {\n    throw new AuthError({\n      name: AuthErrorCodes.SignInException,\n      message: 'Unable to proceed due to invalid sign in state.'\n    });\n  }\n  const {\n    CREDENTIAL_REQUEST_OPTIONS: credentialRequestOptions\n  } = challengeParameters;\n  assertPasskeyError(!!credentialRequestOptions, PasskeyErrorCode.InvalidPasskeyAuthenticationOptions);\n  const cred = await getPasskey(JSON.parse(credentialRequestOptions));\n  const respondToAuthChallenge = createRespondToAuthChallengeClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: authConfig.userPoolEndpoint\n    })\n  });\n  const {\n    ChallengeName: nextChallengeName,\n    ChallengeParameters: nextChallengeParameters,\n    AuthenticationResult: authenticationResult,\n    Session: nextSession\n  } = await respondToAuthChallenge({\n    region: getRegionFromUserPoolId(authConfig.userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)\n  }, {\n    ChallengeName: 'WEB_AUTHN',\n    ChallengeResponses: {\n      USERNAME: username,\n      CREDENTIAL: JSON.stringify(cred)\n    },\n    ClientId: authConfig.userPoolClientId,\n    Session: signInSession\n  });\n  setActiveSignInState({\n    signInSession: nextSession,\n    username,\n    challengeName: nextChallengeName,\n    signInDetails\n  });\n  if (authenticationResult) {\n    await cacheCognitoTokens(_objectSpread(_objectSpread({}, authenticationResult), {}, {\n      username,\n      NewDeviceMetadata: await getNewDeviceMetadata({\n        userPoolId: authConfig.userPoolId,\n        userPoolEndpoint: authConfig.userPoolEndpoint,\n        newDeviceMetadata: authenticationResult.NewDeviceMetadata,\n        accessToken: authenticationResult.AccessToken\n      }),\n      signInDetails\n    }));\n    signInStore.dispatch({\n      type: 'RESET_STATE'\n    });\n    await dispatchSignedInHubEvent();\n    return {\n      isSignedIn: true,\n      nextStep: {\n        signInStep: 'DONE'\n      }\n    };\n  }\n  if (nextChallengeName === 'WEB_AUTHN') {\n    throw new AuthError({\n      name: AuthErrorCodes.SignInException,\n      message: 'Sequential WEB_AUTHN challenges returned from underlying service cannot be handled.'\n    });\n  }\n  return {\n    challengeName: nextChallengeName,\n    challengeParameters: nextChallengeParameters\n  };\n}\nexport { handleWebAuthnSignInResult };","map":{"version":3,"names":["handleWebAuthnSignInResult","challengeParameters","_Amplify$getConfig$Au","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","username","signInSession","signInDetails","challengeName","signInStore","getState","AuthError","name","AuthErrorCodes","SignInException","message","CREDENTIAL_REQUEST_OPTIONS","credentialRequestOptions","assertPasskeyError","PasskeyErrorCode","InvalidPasskeyAuthenticationOptions","cred","getPasskey","JSON","parse","respondToAuthChallenge","createRespondToAuthChallengeClient","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","userPoolEndpoint","ChallengeName","nextChallengeName","ChallengeParameters","nextChallengeParameters","AuthenticationResult","authenticationResult","Session","nextSession","region","getRegionFromUserPoolId","userPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","ConfirmSignIn","ChallengeResponses","USERNAME","CREDENTIAL","stringify","ClientId","userPoolClientId","setActiveSignInState","cacheCognitoTokens","_objectSpread","NewDeviceMetadata","getNewDeviceMetadata","newDeviceMetadata","accessToken","AccessToken","dispatch","type","dispatchSignedInHubEvent","isSignedIn","nextStep","signInStep"],"sources":["/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@aws-amplify/auth/src/client/flows/userAuth/handleWebAuthnSignInResult.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { AuthErrorCodes } from '../../../common/AuthErrorStrings';\nimport { createRespondToAuthChallengeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { createCognitoUserPoolEndpointResolver } from '../../../providers/cognito/factories';\nimport { cacheCognitoTokens } from '../../../providers/cognito/tokenProvider/cacheTokens';\nimport { dispatchSignedInHubEvent } from '../../../providers/cognito/utils/dispatchSignedInHubEvent';\nimport { setActiveSignInState, signInStore } from '../../../client/utils/store';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { getPasskey } from '../../utils/passkey';\nimport { PasskeyErrorCode, assertPasskeyError, } from '../../utils/passkey/errors';\nimport { AuthError } from '../../../errors/AuthError';\nimport { getNewDeviceMetadata } from '../../../providers/cognito/utils/getNewDeviceMetadata';\nexport async function handleWebAuthnSignInResult(challengeParameters) {\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { username, signInSession, signInDetails, challengeName } = signInStore.getState();\n    if (challengeName !== 'WEB_AUTHN' || !username) {\n        throw new AuthError({\n            name: AuthErrorCodes.SignInException,\n            message: 'Unable to proceed due to invalid sign in state.',\n        });\n    }\n    const { CREDENTIAL_REQUEST_OPTIONS: credentialRequestOptions } = challengeParameters;\n    assertPasskeyError(!!credentialRequestOptions, PasskeyErrorCode.InvalidPasskeyAuthenticationOptions);\n    const cred = await getPasskey(JSON.parse(credentialRequestOptions));\n    const respondToAuthChallenge = createRespondToAuthChallengeClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: authConfig.userPoolEndpoint,\n        }),\n    });\n    const { ChallengeName: nextChallengeName, ChallengeParameters: nextChallengeParameters, AuthenticationResult: authenticationResult, Session: nextSession, } = await respondToAuthChallenge({\n        region: getRegionFromUserPoolId(authConfig.userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn),\n    }, {\n        ChallengeName: 'WEB_AUTHN',\n        ChallengeResponses: {\n            USERNAME: username,\n            CREDENTIAL: JSON.stringify(cred),\n        },\n        ClientId: authConfig.userPoolClientId,\n        Session: signInSession,\n    });\n    setActiveSignInState({\n        signInSession: nextSession,\n        username,\n        challengeName: nextChallengeName,\n        signInDetails,\n    });\n    if (authenticationResult) {\n        await cacheCognitoTokens({\n            ...authenticationResult,\n            username,\n            NewDeviceMetadata: await getNewDeviceMetadata({\n                userPoolId: authConfig.userPoolId,\n                userPoolEndpoint: authConfig.userPoolEndpoint,\n                newDeviceMetadata: authenticationResult.NewDeviceMetadata,\n                accessToken: authenticationResult.AccessToken,\n            }),\n            signInDetails,\n        });\n        signInStore.dispatch({ type: 'RESET_STATE' });\n        await dispatchSignedInHubEvent();\n        return {\n            isSignedIn: true,\n            nextStep: { signInStep: 'DONE' },\n        };\n    }\n    if (nextChallengeName === 'WEB_AUTHN') {\n        throw new AuthError({\n            name: AuthErrorCodes.SignInException,\n            message: 'Sequential WEB_AUTHN challenges returned from underlying service cannot be handled.',\n        });\n    }\n    return {\n        challengeName: nextChallengeName,\n        challengeParameters: nextChallengeParameters,\n    };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAeO,eAAeA,0BAA0BA,CAACC,mBAAmB,EAAE;EAAA,IAAAC,qBAAA;EAClE,MAAMC,UAAU,IAAAD,qBAAA,GAAGE,OAAO,CAACC,SAAS,EAAE,CAACC,IAAI,cAAAJ,qBAAA,uBAAxBA,qBAAA,CAA0BK,OAAO;EACpDC,yBAAyB,CAACL,UAAU,CAAC;EACrC,MAAM;IAAEM,QAAQ;IAAEC,aAAa;IAAEC,aAAa;IAAEC;EAAa,CAAE,GAAGC,WAAW,CAACC,QAAQ,EAAE;EACxF,IAAIF,aAAa,KAAK,WAAW,IAAI,CAACH,QAAQ,EAAE;IAC5C,MAAM,IAAIM,SAAS,CAAC;MAChBC,IAAI,EAAEC,cAAc,CAACC,eAAe;MACpCC,OAAO,EAAE;IACrB,CAAS,CAAC;EACN;EACA,MAAM;IAAEC,0BAA0B,EAAEC;EAAwB,CAAE,GAAGpB,mBAAmB;EACpFqB,kBAAkB,CAAC,CAAC,CAACD,wBAAwB,EAAEE,gBAAgB,CAACC,mCAAmC,CAAC;EACpG,MAAMC,IAAI,GAAG,MAAMC,UAAU,CAACC,IAAI,CAACC,KAAK,CAACP,wBAAwB,CAAC,CAAC;EACnE,MAAMQ,sBAAsB,GAAGC,kCAAkC,CAAC;IAC9DC,gBAAgB,EAAEC,qCAAqC,CAAC;MACpDC,gBAAgB,EAAE9B,UAAU,CAAC+B;IACzC,CAAS;EACT,CAAK,CAAC;EACF,MAAM;IAAEC,aAAa,EAAEC,iBAAiB;IAAEC,mBAAmB,EAAEC,uBAAuB;IAAEC,oBAAoB,EAAEC,oBAAoB;IAAEC,OAAO,EAAEC;EAAW,CAAG,GAAG,MAAMb,sBAAsB,CAAC;IACvLc,MAAM,EAAEC,uBAAuB,CAACzC,UAAU,CAAC0C,UAAU,CAAC;IACtDC,cAAc,EAAEC,qBAAqB,CAACC,UAAU,CAACC,aAAa;EACtE,CAAK,EAAE;IACCd,aAAa,EAAE,WAAW;IAC1Be,kBAAkB,EAAE;MAChBC,QAAQ,EAAE1C,QAAQ;MAClB2C,UAAU,EAAEzB,IAAI,CAAC0B,SAAS,CAAC5B,IAAI;IAC3C,CAAS;IACD6B,QAAQ,EAAEnD,UAAU,CAACoD,gBAAgB;IACrCd,OAAO,EAAE/B;EACjB,CAAK,CAAC;EACF8C,oBAAoB,CAAC;IACjB9C,aAAa,EAAEgC,WAAW;IAC1BjC,QAAQ;IACRG,aAAa,EAAEwB,iBAAiB;IAChCzB;EACR,CAAK,CAAC;EACF,IAAI6B,oBAAoB,EAAE;IACtB,MAAMiB,kBAAkB,CAAAC,aAAA,CAAAA,aAAA,KACjBlB,oBAAoB;MACvB/B,QAAQ;MACRkD,iBAAiB,EAAE,MAAMC,oBAAoB,CAAC;QAC1Cf,UAAU,EAAE1C,UAAU,CAAC0C,UAAU;QACjCX,gBAAgB,EAAE/B,UAAU,CAAC+B,gBAAgB;QAC7C2B,iBAAiB,EAAErB,oBAAoB,CAACmB,iBAAiB;QACzDG,WAAW,EAAEtB,oBAAoB,CAACuB;MAClD,CAAa,CAAC;MACFpD;IAAa,EAChB,CAAC;IACFE,WAAW,CAACmD,QAAQ,CAAC;MAAEC,IAAI,EAAE;IAAa,CAAE,CAAC;IAC7C,MAAMC,wBAAwB,EAAE;IAChC,OAAO;MACHC,UAAU,EAAE,IAAI;MAChBC,QAAQ,EAAE;QAAEC,UAAU,EAAE;MAAM;IAC1C,CAAS;EACL;EACA,IAAIjC,iBAAiB,KAAK,WAAW,EAAE;IACnC,MAAM,IAAIrB,SAAS,CAAC;MAChBC,IAAI,EAAEC,cAAc,CAACC,eAAe;MACpCC,OAAO,EAAE;IACrB,CAAS,CAAC;EACN;EACA,OAAO;IACHP,aAAa,EAAEwB,iBAAiB;IAChCnC,mBAAmB,EAAEqC;EAC7B,CAAK;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}