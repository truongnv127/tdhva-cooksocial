{"ast":null,"code":"import _objectSpread from \"/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { getSignedHeaders } from './utils/getSignedHeaders.mjs';\nimport { getSigningValues } from './utils/getSigningValues.mjs';\nimport { HOST_HEADER, AMZ_DATE_HEADER, TOKEN_HEADER, SHA256_ALGORITHM_IDENTIFIER, AUTH_HEADER } from './constants.mjs';\nimport { getSignature } from './utils/getSignature.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Given a `HttpRequest`, returns a Signature Version 4 signed `HttpRequest`.\n *\n * @param request `HttpRequest` to be signed.\n * @param signRequestOptions `SignRequestOptions` object containing values used to construct the signature.\n * @returns A `HttpRequest` with authentication headers which can grant temporary access to AWS resources.\n */\nconst signRequest = (request, options) => {\n  const signingValues = getSigningValues(options);\n  const {\n    accessKeyId,\n    credentialScope,\n    longDate,\n    sessionToken\n  } = signingValues;\n  // create the request to sign\n  const headers = _objectSpread({}, request.headers);\n  headers[HOST_HEADER] = request.url.host;\n  headers[AMZ_DATE_HEADER] = longDate;\n  if (sessionToken) {\n    headers[TOKEN_HEADER] = sessionToken;\n  }\n  const requestToSign = _objectSpread(_objectSpread({}, request), {}, {\n    headers\n  });\n  // calculate and add the signature to the request\n  const signature = getSignature(requestToSign, signingValues);\n  const credentialEntry = \"Credential=\".concat(accessKeyId, \"/\").concat(credentialScope);\n  const signedHeadersEntry = \"SignedHeaders=\".concat(getSignedHeaders(headers));\n  const signatureEntry = \"Signature=\".concat(signature);\n  headers[AUTH_HEADER] = \"\".concat(SHA256_ALGORITHM_IDENTIFIER, \" \").concat(credentialEntry, \", \").concat(signedHeadersEntry, \", \").concat(signatureEntry);\n  return requestToSign;\n};\nexport { signRequest };","map":{"version":3,"names":["signRequest","request","options","signingValues","getSigningValues","accessKeyId","credentialScope","longDate","sessionToken","headers","_objectSpread","HOST_HEADER","url","host","AMZ_DATE_HEADER","TOKEN_HEADER","requestToSign","signature","getSignature","credentialEntry","concat","signedHeadersEntry","getSignedHeaders","signatureEntry","AUTH_HEADER","SHA256_ALGORITHM_IDENTIFIER"],"sources":["/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@aws-amplify/core/src/clients/middleware/signing/signer/signatureV4/signRequest.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getSignedHeaders } from './utils/getSignedHeaders';\nimport { getSigningValues } from './utils/getSigningValues';\nimport { AMZ_DATE_HEADER, AUTH_HEADER, HOST_HEADER, SHA256_ALGORITHM_IDENTIFIER, TOKEN_HEADER, } from './constants';\nimport { getSignature } from './utils/getSignature';\n/**\n * Given a `HttpRequest`, returns a Signature Version 4 signed `HttpRequest`.\n *\n * @param request `HttpRequest` to be signed.\n * @param signRequestOptions `SignRequestOptions` object containing values used to construct the signature.\n * @returns A `HttpRequest` with authentication headers which can grant temporary access to AWS resources.\n */\nexport const signRequest = (request, options) => {\n    const signingValues = getSigningValues(options);\n    const { accessKeyId, credentialScope, longDate, sessionToken } = signingValues;\n    // create the request to sign\n    const headers = { ...request.headers };\n    headers[HOST_HEADER] = request.url.host;\n    headers[AMZ_DATE_HEADER] = longDate;\n    if (sessionToken) {\n        headers[TOKEN_HEADER] = sessionToken;\n    }\n    const requestToSign = { ...request, headers };\n    // calculate and add the signature to the request\n    const signature = getSignature(requestToSign, signingValues);\n    const credentialEntry = `Credential=${accessKeyId}/${credentialScope}`;\n    const signedHeadersEntry = `SignedHeaders=${getSignedHeaders(headers)}`;\n    const signatureEntry = `Signature=${signature}`;\n    headers[AUTH_HEADER] =\n        `${SHA256_ALGORITHM_IDENTIFIER} ${credentialEntry}, ${signedHeadersEntry}, ${signatureEntry}`;\n    return requestToSign;\n};\n"],"mappings":";;;;;;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,WAAW,GAAGA,CAACC,OAAO,EAAEC,OAAO,KAAK;EAC7C,MAAMC,aAAa,GAAGC,gBAAgB,CAACF,OAAO,CAAC;EAC/C,MAAM;IAAEG,WAAW;IAAEC,eAAe;IAAEC,QAAQ;IAAEC;EAAY,CAAE,GAAGL,aAAa;EAClF;EACI,MAAMM,OAAO,GAAAC,aAAA,KAAQT,OAAO,CAACQ,OAAO,CAAE;EACtCA,OAAO,CAACE,WAAW,CAAC,GAAGV,OAAO,CAACW,GAAG,CAACC,IAAI;EACvCJ,OAAO,CAACK,eAAe,CAAC,GAAGP,QAAQ;EACnC,IAAIC,YAAY,EAAE;IACdC,OAAO,CAACM,YAAY,CAAC,GAAGP,YAAY;EACxC;EACA,MAAMQ,aAAa,GAAAN,aAAA,CAAAA,aAAA,KAAQT,OAAO;IAAEQ;EAAO,EAAE;EACjD;EACI,MAAMQ,SAAS,GAAGC,YAAY,CAACF,aAAa,EAAEb,aAAa,CAAC;EAC5D,MAAMgB,eAAe,iBAAAC,MAAA,CAAiBf,WAAW,OAAAe,MAAA,CAAId,eAAe,CAAE;EACtE,MAAMe,kBAAkB,oBAAAD,MAAA,CAAoBE,gBAAgB,CAACb,OAAO,CAAC,CAAE;EACvE,MAAMc,cAAc,gBAAAH,MAAA,CAAgBH,SAAS,CAAE;EAC/CR,OAAO,CAACe,WAAW,CAAC,MAAAJ,MAAA,CACbK,2BAA2B,OAAAL,MAAA,CAAID,eAAe,QAAAC,MAAA,CAAKC,kBAAkB,QAAAD,MAAA,CAAKG,cAAc,CAAE;EACjG,OAAOP,aAAa;AACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}