{"ast":null,"code":"import _objectSpread from \"/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { syncSessionStorage } from '@aws-amplify/core';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n// Minutes until stored session invalidates is defaulted to 3 minutes\n// to maintain parity with Amazon Cognito user pools API behavior\nconst MS_TO_EXPIRY = 3 * 60 * 1000;\nconst TGT_STATE = 'CognitoSignInState';\nconst SIGN_IN_STATE_KEYS = {\n  username: \"\".concat(TGT_STATE, \".username\"),\n  challengeName: \"\".concat(TGT_STATE, \".challengeName\"),\n  signInSession: \"\".concat(TGT_STATE, \".signInSession\"),\n  expiry: \"\".concat(TGT_STATE, \".expiry\")\n};\nconst signInReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_SIGN_IN_SESSION':\n      persistSignInState({\n        signInSession: action.value\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        signInSession: action.value\n      });\n    case 'SET_SIGN_IN_STATE':\n      persistSignInState(action.value);\n      return _objectSpread({}, action.value);\n    case 'SET_CHALLENGE_NAME':\n      persistSignInState({\n        challengeName: action.value\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        challengeName: action.value\n      });\n    case 'SET_USERNAME':\n      persistSignInState({\n        username: action.value\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        username: action.value\n      });\n    case 'SET_INITIAL_STATE':\n      return getInitialState();\n    case 'RESET_STATE':\n      clearPersistedSignInState();\n      return getDefaultState();\n    // this state is never reachable\n    default:\n      return state;\n  }\n};\nconst isExpired = expiryDate => {\n  const expiryTimestamp = Number(expiryDate);\n  const currentTimestamp = Date.now();\n  return expiryTimestamp <= currentTimestamp;\n};\nconst resetActiveSignInState = () => {\n  signInStore.dispatch({\n    type: 'RESET_STATE'\n  });\n};\nconst clearPersistedSignInState = () => {\n  for (const stateKey of Object.values(SIGN_IN_STATE_KEYS)) {\n    syncSessionStorage.removeItem(stateKey);\n  }\n};\nconst getDefaultState = () => ({\n  username: undefined,\n  challengeName: undefined,\n  signInSession: undefined\n});\n// Hydrate signInStore from syncSessionStorage if the session has not expired\nconst getInitialState = () => {\n  var _syncSessionStorage$g, _syncSessionStorage$g2, _syncSessionStorage$g3;\n  const expiry = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.expiry);\n  if (!expiry || isExpired(expiry)) {\n    clearPersistedSignInState();\n    return getDefaultState();\n  }\n  const username = (_syncSessionStorage$g = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.username)) !== null && _syncSessionStorage$g !== void 0 ? _syncSessionStorage$g : undefined;\n  const challengeName = (_syncSessionStorage$g2 = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.challengeName)) !== null && _syncSessionStorage$g2 !== void 0 ? _syncSessionStorage$g2 : undefined;\n  const signInSession = (_syncSessionStorage$g3 = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.signInSession)) !== null && _syncSessionStorage$g3 !== void 0 ? _syncSessionStorage$g3 : undefined;\n  return {\n    username,\n    challengeName,\n    signInSession\n  };\n};\nconst createStore = reducer => {\n  let currentState = reducer(getDefaultState(), {\n    type: 'SET_INITIAL_STATE'\n  });\n  return {\n    getState: () => currentState,\n    dispatch: action => {\n      currentState = reducer(currentState, action);\n    }\n  };\n};\nconst signInStore = createStore(signInReducer);\nfunction setActiveSignInState(state) {\n  signInStore.dispatch({\n    type: 'SET_SIGN_IN_STATE',\n    value: state\n  });\n}\n// Save local state into Session Storage\nconst persistSignInState = _ref => {\n  let {\n    challengeName,\n    signInSession,\n    username\n  } = _ref;\n  username && syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.username, username);\n  challengeName && syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.challengeName, challengeName);\n  if (signInSession) {\n    syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.signInSession, signInSession);\n    // Updates expiry when session is passed\n    syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.expiry, String(Date.now() + MS_TO_EXPIRY));\n  }\n};\nexport { persistSignInState, resetActiveSignInState, setActiveSignInState, signInStore };","map":{"version":3,"names":["MS_TO_EXPIRY","TGT_STATE","SIGN_IN_STATE_KEYS","username","concat","challengeName","signInSession","expiry","signInReducer","state","action","type","persistSignInState","value","_objectSpread","getInitialState","clearPersistedSignInState","getDefaultState","isExpired","expiryDate","expiryTimestamp","Number","currentTimestamp","Date","now","resetActiveSignInState","signInStore","dispatch","stateKey","Object","values","syncSessionStorage","removeItem","undefined","_syncSessionStorage$g","_syncSessionStorage$g2","_syncSessionStorage$g3","getItem","createStore","reducer","currentState","getState","setActiveSignInState","_ref","setItem","String"],"sources":["/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@aws-amplify/auth/src/client/utils/store/signInStore.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { syncSessionStorage } from '@aws-amplify/core';\n// Minutes until stored session invalidates is defaulted to 3 minutes\n// to maintain parity with Amazon Cognito user pools API behavior\nconst MS_TO_EXPIRY = 3 * 60 * 1000;\nconst TGT_STATE = 'CognitoSignInState';\nconst SIGN_IN_STATE_KEYS = {\n    username: `${TGT_STATE}.username`,\n    challengeName: `${TGT_STATE}.challengeName`,\n    signInSession: `${TGT_STATE}.signInSession`,\n    expiry: `${TGT_STATE}.expiry`,\n};\nconst signInReducer = (state, action) => {\n    switch (action.type) {\n        case 'SET_SIGN_IN_SESSION':\n            persistSignInState({ signInSession: action.value });\n            return {\n                ...state,\n                signInSession: action.value,\n            };\n        case 'SET_SIGN_IN_STATE':\n            persistSignInState(action.value);\n            return {\n                ...action.value,\n            };\n        case 'SET_CHALLENGE_NAME':\n            persistSignInState({ challengeName: action.value });\n            return {\n                ...state,\n                challengeName: action.value,\n            };\n        case 'SET_USERNAME':\n            persistSignInState({ username: action.value });\n            return {\n                ...state,\n                username: action.value,\n            };\n        case 'SET_INITIAL_STATE':\n            return getInitialState();\n        case 'RESET_STATE':\n            clearPersistedSignInState();\n            return getDefaultState();\n        // this state is never reachable\n        default:\n            return state;\n    }\n};\nconst isExpired = (expiryDate) => {\n    const expiryTimestamp = Number(expiryDate);\n    const currentTimestamp = Date.now();\n    return expiryTimestamp <= currentTimestamp;\n};\nexport const resetActiveSignInState = () => {\n    signInStore.dispatch({ type: 'RESET_STATE' });\n};\nconst clearPersistedSignInState = () => {\n    for (const stateKey of Object.values(SIGN_IN_STATE_KEYS)) {\n        syncSessionStorage.removeItem(stateKey);\n    }\n};\nconst getDefaultState = () => ({\n    username: undefined,\n    challengeName: undefined,\n    signInSession: undefined,\n});\n// Hydrate signInStore from syncSessionStorage if the session has not expired\nconst getInitialState = () => {\n    const expiry = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.expiry);\n    if (!expiry || isExpired(expiry)) {\n        clearPersistedSignInState();\n        return getDefaultState();\n    }\n    const username = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.username) ?? undefined;\n    const challengeName = (syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.challengeName) ?? undefined);\n    const signInSession = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.signInSession) ?? undefined;\n    return {\n        username,\n        challengeName,\n        signInSession,\n    };\n};\nconst createStore = reducer => {\n    let currentState = reducer(getDefaultState(), { type: 'SET_INITIAL_STATE' });\n    return {\n        getState: () => currentState,\n        dispatch: action => {\n            currentState = reducer(currentState, action);\n        },\n    };\n};\nexport const signInStore = createStore(signInReducer);\nexport function setActiveSignInState(state) {\n    signInStore.dispatch({\n        type: 'SET_SIGN_IN_STATE',\n        value: state,\n    });\n}\n// Save local state into Session Storage\nexport const persistSignInState = ({ challengeName, signInSession, username, }) => {\n    username && syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.username, username);\n    challengeName &&\n        syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.challengeName, challengeName);\n    if (signInSession) {\n        syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.signInSession, signInSession);\n        // Updates expiry when session is passed\n        syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.expiry, String(Date.now() + MS_TO_EXPIRY));\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}