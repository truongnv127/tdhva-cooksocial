{"ast":null,"code":"import { Amplify } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, AmplifyUrl } from '@aws-amplify/core/internals/utils';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { InitiateAuthException } from '../types/errors.mjs';\nimport { AuthErrorCodes } from '../../../common/AuthErrorStrings.mjs';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { USER_ALREADY_AUTHENTICATED_EXCEPTION } from '../../../errors/constants.mjs';\nimport { getCurrentUser } from '../apis/getCurrentUser.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { createInitiateAuthClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createInitiateAuthClient.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport { createRespondToAuthChallengeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.mjs';\nimport { createVerifySoftwareTokenClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createVerifySoftwareTokenClient.mjs';\nimport { createAssociateSoftwareTokenClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createAssociateSoftwareTokenClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { handleWebAuthnSignInResult } from '../../../client/flows/userAuth/handleWebAuthnSignInResult.mjs';\nimport { handlePasswordSRP } from '../../../client/flows/shared/handlePasswordSRP.mjs';\nimport { initiateSelectedChallenge } from '../../../client/flows/userAuth/handleSelectChallenge.mjs';\nimport { handleSelectChallengeWithPassword } from '../../../client/flows/userAuth/handleSelectChallengeWithPassword.mjs';\nimport { handleSelectChallengeWithPasswordSRP } from '../../../client/flows/userAuth/handleSelectChallengeWithPasswordSRP.mjs';\nimport '../../../client/utils/store/autoSignInStore.mjs';\nimport { signInStore } from '../../../client/utils/store/signInStore.mjs';\nimport { getAuthenticationHelper } from './srp/getAuthenticationHelper.mjs';\nimport './srp/constants.mjs';\nimport '@aws-crypto/sha256-js';\nimport { getUserContextData } from './userContextData.mjs';\nimport { handlePasswordVerifierChallenge } from './handlePasswordVerifierChallenge.mjs';\nimport { handleDeviceSRPAuth } from './handleDeviceSRPAuth.mjs';\nimport { retryOnResourceNotFoundException } from './retryOnResourceNotFoundException.mjs';\nimport { setActiveSignInUsername } from './setActiveSignInUsername.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst USER_ATTRIBUTES = 'userAttributes.';\nfunction isWebAuthnResultAuthSignInOutput(result) {\n  return 'isSignedIn' in result && 'nextStep' in result;\n}\nasync function handleCustomChallenge({\n  challengeResponse,\n  clientMetadata,\n  session,\n  username,\n  config,\n  tokenOrchestrator\n}) {\n  const {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = config;\n  const challengeResponses = {\n    USERNAME: username,\n    ANSWER: challengeResponse\n  };\n  const deviceMetadata = await tokenOrchestrator?.getDeviceMetadata(username);\n  if (deviceMetadata && deviceMetadata.deviceKey) {\n    challengeResponses.DEVICE_KEY = deviceMetadata.deviceKey;\n  }\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const jsonReq = {\n    ChallengeName: 'CUSTOM_CHALLENGE',\n    ChallengeResponses: challengeResponses,\n    Session: session,\n    ClientMetadata: clientMetadata,\n    ClientId: userPoolClientId,\n    UserContextData\n  };\n  const respondToAuthChallenge = createRespondToAuthChallengeClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const response = await respondToAuthChallenge({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)\n  }, jsonReq);\n  if (response.ChallengeName === 'DEVICE_SRP_AUTH') {\n    return handleDeviceSRPAuth({\n      username,\n      config,\n      clientMetadata,\n      session: response.Session,\n      tokenOrchestrator\n    });\n  }\n  return response;\n}\nasync function handleMFASetupChallenge({\n  challengeResponse,\n  username,\n  clientMetadata,\n  session,\n  deviceName,\n  config\n}) {\n  const {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = config;\n  if (challengeResponse === 'EMAIL') {\n    return {\n      ChallengeName: 'MFA_SETUP',\n      Session: session,\n      ChallengeParameters: {\n        MFAS_CAN_SETUP: '[\"EMAIL_OTP\"]'\n      },\n      $metadata: {}\n    };\n  }\n  if (challengeResponse === 'TOTP') {\n    return {\n      ChallengeName: 'MFA_SETUP',\n      Session: session,\n      ChallengeParameters: {\n        MFAS_CAN_SETUP: '[\"SOFTWARE_TOKEN_MFA\"]'\n      },\n      $metadata: {}\n    };\n  }\n  const challengeResponses = {\n    USERNAME: username\n  };\n  const isTOTPCode = /^\\d+$/.test(challengeResponse);\n  if (isTOTPCode) {\n    const verifySoftwareToken = createVerifySoftwareTokenClient({\n      endpointResolver: createCognitoUserPoolEndpointResolver({\n        endpointOverride: userPoolEndpoint\n      })\n    });\n    const {\n      Session\n    } = await verifySoftwareToken({\n      region: getRegionFromUserPoolId(userPoolId),\n      userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)\n    }, {\n      UserCode: challengeResponse,\n      Session: session,\n      FriendlyDeviceName: deviceName\n    });\n    signInStore.dispatch({\n      type: 'SET_SIGN_IN_SESSION',\n      value: Session\n    });\n    const jsonReq = {\n      ChallengeName: 'MFA_SETUP',\n      ChallengeResponses: challengeResponses,\n      Session,\n      ClientMetadata: clientMetadata,\n      ClientId: userPoolClientId\n    };\n    const respondToAuthChallenge = createRespondToAuthChallengeClient({\n      endpointResolver: createCognitoUserPoolEndpointResolver({\n        endpointOverride: userPoolEndpoint\n      })\n    });\n    return respondToAuthChallenge({\n      region: getRegionFromUserPoolId(userPoolId),\n      userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)\n    }, jsonReq);\n  }\n  const isEmail = challengeResponse.includes('@');\n  if (isEmail) {\n    challengeResponses.EMAIL = challengeResponse;\n    const jsonReq = {\n      ChallengeName: 'MFA_SETUP',\n      ChallengeResponses: challengeResponses,\n      Session: session,\n      ClientMetadata: clientMetadata,\n      ClientId: userPoolClientId\n    };\n    const respondToAuthChallenge = createRespondToAuthChallengeClient({\n      endpointResolver: createCognitoUserPoolEndpointResolver({\n        endpointOverride: userPoolEndpoint\n      })\n    });\n    return respondToAuthChallenge({\n      region: getRegionFromUserPoolId(userPoolId),\n      userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)\n    }, jsonReq);\n  }\n  throw new AuthError({\n    name: AuthErrorCodes.SignInException,\n    message: `Cannot proceed with MFA setup using challengeResponse: ${challengeResponse}`,\n    recoverySuggestion: 'Try passing \"EMAIL\", \"TOTP\", a valid email, or OTP code as the challengeResponse.'\n  });\n}\nasync function handleSelectMFATypeChallenge({\n  challengeResponse,\n  username,\n  clientMetadata,\n  session,\n  config\n}) {\n  const {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = config;\n  assertValidationError(challengeResponse === 'TOTP' || challengeResponse === 'SMS' || challengeResponse === 'EMAIL', AuthValidationErrorCode.IncorrectMFAMethod);\n  const challengeResponses = {\n    USERNAME: username,\n    ANSWER: mapMfaType(challengeResponse)\n  };\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const jsonReq = {\n    ChallengeName: 'SELECT_MFA_TYPE',\n    ChallengeResponses: challengeResponses,\n    Session: session,\n    ClientMetadata: clientMetadata,\n    ClientId: userPoolClientId,\n    UserContextData\n  };\n  const respondToAuthChallenge = createRespondToAuthChallengeClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  return respondToAuthChallenge({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)\n  }, jsonReq);\n}\nasync function handleCompleteNewPasswordChallenge({\n  challengeResponse,\n  clientMetadata,\n  session,\n  username,\n  requiredAttributes,\n  config\n}) {\n  const {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = config;\n  const challengeResponses = {\n    ...createAttributes(requiredAttributes),\n    NEW_PASSWORD: challengeResponse,\n    USERNAME: username\n  };\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const jsonReq = {\n    ChallengeName: 'NEW_PASSWORD_REQUIRED',\n    ChallengeResponses: challengeResponses,\n    ClientMetadata: clientMetadata,\n    Session: session,\n    ClientId: userPoolClientId,\n    UserContextData\n  };\n  const respondToAuthChallenge = createRespondToAuthChallengeClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  return respondToAuthChallenge({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)\n  }, jsonReq);\n}\nasync function handleUserPasswordAuthFlow(username, password, clientMetadata, config, tokenOrchestrator) {\n  const {\n    userPoolClientId,\n    userPoolId,\n    userPoolEndpoint\n  } = config;\n  const authParameters = {\n    USERNAME: username,\n    PASSWORD: password\n  };\n  const deviceMetadata = await tokenOrchestrator.getDeviceMetadata(username);\n  if (deviceMetadata && deviceMetadata.deviceKey) {\n    authParameters.DEVICE_KEY = deviceMetadata.deviceKey;\n  }\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const jsonReq = {\n    AuthFlow: 'USER_PASSWORD_AUTH',\n    AuthParameters: authParameters,\n    ClientMetadata: clientMetadata,\n    ClientId: userPoolClientId,\n    UserContextData\n  };\n  const initiateAuth = createInitiateAuthClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const response = await initiateAuth({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.SignIn)\n  }, jsonReq);\n  const activeUsername = response.ChallengeParameters?.USERNAME ?? response.ChallengeParameters?.USER_ID_FOR_SRP ?? username;\n  setActiveSignInUsername(activeUsername);\n  if (response.ChallengeName === 'DEVICE_SRP_AUTH') return handleDeviceSRPAuth({\n    username: activeUsername,\n    config,\n    clientMetadata,\n    session: response.Session,\n    tokenOrchestrator\n  });\n  return response;\n}\nasync function handleUserSRPAuthFlow(username, password, clientMetadata, config, tokenOrchestrator) {\n  return handlePasswordSRP({\n    username,\n    password,\n    clientMetadata,\n    config,\n    tokenOrchestrator,\n    authFlow: 'USER_SRP_AUTH'\n  });\n}\nasync function handleCustomAuthFlowWithoutSRP(username, clientMetadata, config, tokenOrchestrator) {\n  const {\n    userPoolClientId,\n    userPoolId,\n    userPoolEndpoint\n  } = config;\n  const authParameters = {\n    USERNAME: username\n  };\n  const deviceMetadata = await tokenOrchestrator.getDeviceMetadata(username);\n  if (deviceMetadata && deviceMetadata.deviceKey) {\n    authParameters.DEVICE_KEY = deviceMetadata.deviceKey;\n  }\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const jsonReq = {\n    AuthFlow: 'CUSTOM_AUTH',\n    AuthParameters: authParameters,\n    ClientMetadata: clientMetadata,\n    ClientId: userPoolClientId,\n    UserContextData\n  };\n  const initiateAuth = createInitiateAuthClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const response = await initiateAuth({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.SignIn)\n  }, jsonReq);\n  const activeUsername = response.ChallengeParameters?.USERNAME ?? username;\n  setActiveSignInUsername(activeUsername);\n  if (response.ChallengeName === 'DEVICE_SRP_AUTH') return handleDeviceSRPAuth({\n    username: activeUsername,\n    config,\n    clientMetadata,\n    session: response.Session,\n    tokenOrchestrator\n  });\n  return response;\n}\nasync function handleCustomSRPAuthFlow(username, password, clientMetadata, config, tokenOrchestrator) {\n  assertTokenProviderConfig(config);\n  const {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = config;\n  const userPoolName = userPoolId?.split('_')[1] || '';\n  const authenticationHelper = await getAuthenticationHelper(userPoolName);\n  const authParameters = {\n    USERNAME: username,\n    SRP_A: authenticationHelper.A.toString(16),\n    CHALLENGE_NAME: 'SRP_A'\n  };\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const jsonReq = {\n    AuthFlow: 'CUSTOM_AUTH',\n    AuthParameters: authParameters,\n    ClientMetadata: clientMetadata,\n    ClientId: userPoolClientId,\n    UserContextData\n  };\n  const initiateAuth = createInitiateAuthClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const {\n    ChallengeParameters: challengeParameters,\n    Session: session\n  } = await initiateAuth({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.SignIn)\n  }, jsonReq);\n  const activeUsername = challengeParameters?.USERNAME ?? username;\n  setActiveSignInUsername(activeUsername);\n  return retryOnResourceNotFoundException(handlePasswordVerifierChallenge, [password, challengeParameters, clientMetadata, session, authenticationHelper, config, tokenOrchestrator], activeUsername, tokenOrchestrator);\n}\nasync function getSignInResult(params) {\n  const {\n    challengeName,\n    challengeParameters,\n    availableChallenges\n  } = params;\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  switch (challengeName) {\n    case 'CUSTOM_CHALLENGE':\n      return {\n        isSignedIn: false,\n        nextStep: {\n          signInStep: 'CONFIRM_SIGN_IN_WITH_CUSTOM_CHALLENGE',\n          additionalInfo: challengeParameters\n        }\n      };\n    case 'MFA_SETUP':\n      {\n        const {\n          signInSession,\n          username\n        } = signInStore.getState();\n        const mfaSetupTypes = getMFATypes(parseMFATypes(challengeParameters.MFAS_CAN_SETUP)) || [];\n        const allowedMfaSetupTypes = getAllowedMfaSetupTypes(mfaSetupTypes);\n        const isTotpMfaSetupAvailable = allowedMfaSetupTypes.includes('TOTP');\n        const isEmailMfaSetupAvailable = allowedMfaSetupTypes.includes('EMAIL');\n        if (isTotpMfaSetupAvailable && isEmailMfaSetupAvailable) {\n          return {\n            isSignedIn: false,\n            nextStep: {\n              signInStep: 'CONTINUE_SIGN_IN_WITH_MFA_SETUP_SELECTION',\n              allowedMFATypes: allowedMfaSetupTypes\n            }\n          };\n        }\n        if (isEmailMfaSetupAvailable) {\n          return {\n            isSignedIn: false,\n            nextStep: {\n              signInStep: 'CONTINUE_SIGN_IN_WITH_EMAIL_SETUP'\n            }\n          };\n        }\n        if (isTotpMfaSetupAvailable) {\n          const associateSoftwareToken = createAssociateSoftwareTokenClient({\n            endpointResolver: createCognitoUserPoolEndpointResolver({\n              endpointOverride: authConfig.userPoolEndpoint\n            })\n          });\n          const {\n            Session,\n            SecretCode: secretCode\n          } = await associateSoftwareToken({\n            region: getRegionFromUserPoolId(authConfig.userPoolId)\n          }, {\n            Session: signInSession\n          });\n          signInStore.dispatch({\n            type: 'SET_SIGN_IN_SESSION',\n            value: Session\n          });\n          return {\n            isSignedIn: false,\n            nextStep: {\n              signInStep: 'CONTINUE_SIGN_IN_WITH_TOTP_SETUP',\n              totpSetupDetails: getTOTPSetupDetails(secretCode, username)\n            }\n          };\n        }\n        throw new AuthError({\n          name: AuthErrorCodes.SignInException,\n          message: `Cannot initiate MFA setup from available types: ${mfaSetupTypes}`\n        });\n      }\n    case 'NEW_PASSWORD_REQUIRED':\n      return {\n        isSignedIn: false,\n        nextStep: {\n          signInStep: 'CONFIRM_SIGN_IN_WITH_NEW_PASSWORD_REQUIRED',\n          missingAttributes: parseAttributes(challengeParameters.requiredAttributes)\n        }\n      };\n    case 'SELECT_MFA_TYPE':\n      return {\n        isSignedIn: false,\n        nextStep: {\n          signInStep: 'CONTINUE_SIGN_IN_WITH_MFA_SELECTION',\n          allowedMFATypes: getMFATypes(parseMFATypes(challengeParameters.MFAS_CAN_CHOOSE))\n        }\n      };\n    case 'SMS_OTP':\n    case 'SMS_MFA':\n      return {\n        isSignedIn: false,\n        nextStep: {\n          signInStep: 'CONFIRM_SIGN_IN_WITH_SMS_CODE',\n          codeDeliveryDetails: {\n            deliveryMedium: challengeParameters.CODE_DELIVERY_DELIVERY_MEDIUM,\n            destination: challengeParameters.CODE_DELIVERY_DESTINATION\n          }\n        }\n      };\n    case 'SOFTWARE_TOKEN_MFA':\n      return {\n        isSignedIn: false,\n        nextStep: {\n          signInStep: 'CONFIRM_SIGN_IN_WITH_TOTP_CODE'\n        }\n      };\n    case 'EMAIL_OTP':\n      return {\n        isSignedIn: false,\n        nextStep: {\n          signInStep: 'CONFIRM_SIGN_IN_WITH_EMAIL_CODE',\n          codeDeliveryDetails: {\n            deliveryMedium: challengeParameters.CODE_DELIVERY_DELIVERY_MEDIUM,\n            destination: challengeParameters.CODE_DELIVERY_DESTINATION\n          }\n        }\n      };\n    case 'WEB_AUTHN':\n      {\n        const result = await handleWebAuthnSignInResult(challengeParameters);\n        if (isWebAuthnResultAuthSignInOutput(result)) {\n          return result;\n        }\n        return getSignInResult(result);\n      }\n    case 'PASSWORD':\n    case 'PASSWORD_SRP':\n      return {\n        isSignedIn: false,\n        nextStep: {\n          signInStep: 'CONFIRM_SIGN_IN_WITH_PASSWORD'\n        }\n      };\n    case 'SELECT_CHALLENGE':\n      return {\n        isSignedIn: false,\n        nextStep: {\n          signInStep: 'CONTINUE_SIGN_IN_WITH_FIRST_FACTOR_SELECTION',\n          availableChallenges\n        }\n      };\n  }\n  // TODO: remove this error message for production apps\n  throw new AuthError({\n    name: AuthErrorCodes.SignInException,\n    message: 'An error occurred during the sign in process. ' + `${challengeName} challengeName returned by the underlying service was not addressed.`\n  });\n}\nfunction getTOTPSetupDetails(secretCode, username) {\n  return {\n    sharedSecret: secretCode,\n    getSetupUri: (appName, accountName) => {\n      const totpUri = `otpauth://totp/${appName}:${accountName ?? username}?secret=${secretCode}&issuer=${appName}`;\n      return new AmplifyUrl(totpUri);\n    }\n  };\n}\nfunction getSignInResultFromError(errorName) {\n  if (errorName === InitiateAuthException.PasswordResetRequiredException) {\n    return {\n      isSignedIn: false,\n      nextStep: {\n        signInStep: 'RESET_PASSWORD'\n      }\n    };\n  } else if (errorName === InitiateAuthException.UserNotConfirmedException) {\n    return {\n      isSignedIn: false,\n      nextStep: {\n        signInStep: 'CONFIRM_SIGN_UP'\n      }\n    };\n  }\n}\nfunction parseAttributes(attributes) {\n  if (!attributes) return [];\n  const parsedAttributes = JSON.parse(attributes).map(att => att.includes(USER_ATTRIBUTES) ? att.replace(USER_ATTRIBUTES, '') : att);\n  return parsedAttributes;\n}\nfunction createAttributes(attributes) {\n  if (!attributes) return {};\n  const newAttributes = {};\n  Object.entries(attributes).forEach(([key, value]) => {\n    if (value) newAttributes[`${USER_ATTRIBUTES}${key}`] = value;\n  });\n  return newAttributes;\n}\nasync function handleChallengeName(username, challengeName, session, challengeResponse, config, tokenOrchestrator, clientMetadata, options) {\n  const userAttributes = options?.userAttributes;\n  const deviceName = options?.friendlyDeviceName;\n  switch (challengeName) {\n    case 'WEB_AUTHN':\n    case 'SELECT_CHALLENGE':\n      if (challengeResponse === 'PASSWORD_SRP' || challengeResponse === 'PASSWORD') {\n        return {\n          ChallengeName: challengeResponse,\n          Session: session,\n          $metadata: {}\n        };\n      }\n      return initiateSelectedChallenge({\n        username,\n        session,\n        selectedChallenge: challengeResponse,\n        config,\n        clientMetadata\n      });\n    case 'SELECT_MFA_TYPE':\n      return handleSelectMFATypeChallenge({\n        challengeResponse,\n        clientMetadata,\n        session,\n        username,\n        config\n      });\n    case 'MFA_SETUP':\n      return handleMFASetupChallenge({\n        challengeResponse,\n        clientMetadata,\n        session,\n        username,\n        deviceName,\n        config\n      });\n    case 'NEW_PASSWORD_REQUIRED':\n      return handleCompleteNewPasswordChallenge({\n        challengeResponse,\n        clientMetadata,\n        session,\n        username,\n        requiredAttributes: userAttributes,\n        config\n      });\n    case 'CUSTOM_CHALLENGE':\n      return retryOnResourceNotFoundException(handleCustomChallenge, [{\n        challengeResponse,\n        clientMetadata,\n        session,\n        username,\n        config,\n        tokenOrchestrator\n      }], username, tokenOrchestrator);\n    case 'SMS_MFA':\n    case 'SOFTWARE_TOKEN_MFA':\n    case 'SMS_OTP':\n    case 'EMAIL_OTP':\n      return handleMFAChallenge({\n        challengeName,\n        challengeResponse,\n        clientMetadata,\n        session,\n        username,\n        config\n      });\n    case 'PASSWORD':\n      return handleSelectChallengeWithPassword(username, challengeResponse, clientMetadata, config, session);\n    case 'PASSWORD_SRP':\n      return handleSelectChallengeWithPasswordSRP(username, challengeResponse,\n      // This is the actual password\n      clientMetadata, config, session, tokenOrchestrator);\n  }\n  // TODO: remove this error message for production apps\n  throw new AuthError({\n    name: AuthErrorCodes.SignInException,\n    message: `An error occurred during the sign in process.\n\t\t${challengeName} challengeName returned by the underlying service was not addressed.`\n  });\n}\nfunction mapMfaType(mfa) {\n  let mfaType = 'SMS_MFA';\n  if (mfa === 'TOTP') mfaType = 'SOFTWARE_TOKEN_MFA';\n  if (mfa === 'EMAIL') mfaType = 'EMAIL_OTP';\n  return mfaType;\n}\nfunction getMFAType(type) {\n  if (type === 'SMS_MFA') return 'SMS';\n  if (type === 'SOFTWARE_TOKEN_MFA') return 'TOTP';\n  if (type === 'EMAIL_OTP') return 'EMAIL';\n  // TODO: log warning for unknown MFA type\n}\nfunction getMFATypes(types) {\n  if (!types) return undefined;\n  return types.map(getMFAType).filter(Boolean);\n}\nfunction parseMFATypes(mfa) {\n  if (!mfa) return [];\n  return JSON.parse(mfa);\n}\nfunction getAllowedMfaSetupTypes(availableMfaSetupTypes) {\n  return availableMfaSetupTypes.filter(authMfaType => authMfaType === 'EMAIL' || authMfaType === 'TOTP');\n}\nasync function assertUserNotAuthenticated() {\n  let authUser;\n  try {\n    authUser = await getCurrentUser();\n  } catch (error) {}\n  if (authUser && authUser.userId && authUser.username) {\n    throw new AuthError({\n      name: USER_ALREADY_AUTHENTICATED_EXCEPTION,\n      message: 'There is already a signed in user.',\n      recoverySuggestion: 'Call signOut before calling signIn again.'\n    });\n  }\n}\nfunction getActiveSignInUsername(username) {\n  const state = signInStore.getState();\n  return state.username ?? username;\n}\nasync function handleMFAChallenge({\n  challengeName,\n  challengeResponse,\n  clientMetadata,\n  session,\n  username,\n  config\n}) {\n  const {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = config;\n  const challengeResponses = {\n    USERNAME: username\n  };\n  if (challengeName === 'EMAIL_OTP') {\n    challengeResponses.EMAIL_OTP_CODE = challengeResponse;\n  }\n  if (challengeName === 'SMS_MFA') {\n    challengeResponses.SMS_MFA_CODE = challengeResponse;\n  }\n  if (challengeName === 'SMS_OTP') {\n    challengeResponses.SMS_OTP_CODE = challengeResponse;\n  }\n  if (challengeName === 'SOFTWARE_TOKEN_MFA') {\n    challengeResponses.SOFTWARE_TOKEN_MFA_CODE = challengeResponse;\n  }\n  const userContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const jsonReq = {\n    ChallengeName: challengeName,\n    ChallengeResponses: challengeResponses,\n    Session: session,\n    ClientMetadata: clientMetadata,\n    ClientId: userPoolClientId,\n    UserContextData: userContextData\n  };\n  const respondToAuthChallenge = createRespondToAuthChallengeClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  return respondToAuthChallenge({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)\n  }, jsonReq);\n}\nexport { assertUserNotAuthenticated, createAttributes, getActiveSignInUsername, getAllowedMfaSetupTypes, getMFAType, getMFATypes, getSignInResult, getSignInResultFromError, getTOTPSetupDetails, handleChallengeName, handleCompleteNewPasswordChallenge, handleCustomAuthFlowWithoutSRP, handleCustomChallenge, handleCustomSRPAuthFlow, handleMFAChallenge, handleMFASetupChallenge, handleSelectMFATypeChallenge, handleUserPasswordAuthFlow, handleUserSRPAuthFlow, mapMfaType, parseAttributes, parseMFATypes };","map":{"version":3,"names":["USER_ATTRIBUTES","isWebAuthnResultAuthSignInOutput","result","handleCustomChallenge","challengeResponse","clientMetadata","session","username","config","tokenOrchestrator","userPoolId","userPoolClientId","userPoolEndpoint","challengeResponses","USERNAME","ANSWER","deviceMetadata","getDeviceMetadata","deviceKey","DEVICE_KEY","UserContextData","getUserContextData","jsonReq","ChallengeName","ChallengeResponses","Session","ClientMetadata","ClientId","respondToAuthChallenge","createRespondToAuthChallengeClient","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","response","region","getRegionFromUserPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","ConfirmSignIn","handleDeviceSRPAuth","handleMFASetupChallenge","deviceName","ChallengeParameters","MFAS_CAN_SETUP","$metadata","isTOTPCode","test","verifySoftwareToken","createVerifySoftwareTokenClient","UserCode","FriendlyDeviceName","signInStore","dispatch","type","value","isEmail","includes","EMAIL","AuthError","name","AuthErrorCodes","SignInException","message","recoverySuggestion","handleSelectMFATypeChallenge","assertValidationError","AuthValidationErrorCode","IncorrectMFAMethod","mapMfaType","handleCompleteNewPasswordChallenge","requiredAttributes","createAttributes","NEW_PASSWORD","handleUserPasswordAuthFlow","password","authParameters","PASSWORD","AuthFlow","AuthParameters","initiateAuth","createInitiateAuthClient","SignIn","activeUsername","USER_ID_FOR_SRP","setActiveSignInUsername","handleUserSRPAuthFlow","handlePasswordSRP","authFlow","handleCustomAuthFlowWithoutSRP","handleCustomSRPAuthFlow","assertTokenProviderConfig","userPoolName","split","authenticationHelper","getAuthenticationHelper","SRP_A","A","toString","CHALLENGE_NAME","challengeParameters","retryOnResourceNotFoundException","handlePasswordVerifierChallenge","getSignInResult","params","challengeName","availableChallenges","authConfig","Amplify","getConfig","Auth","Cognito","isSignedIn","nextStep","signInStep","additionalInfo","signInSession","getState","mfaSetupTypes","getMFATypes","parseMFATypes","allowedMfaSetupTypes","getAllowedMfaSetupTypes","isTotpMfaSetupAvailable","isEmailMfaSetupAvailable","allowedMFATypes","associateSoftwareToken","createAssociateSoftwareTokenClient","SecretCode","secretCode","totpSetupDetails","getTOTPSetupDetails","missingAttributes","parseAttributes","MFAS_CAN_CHOOSE","codeDeliveryDetails","deliveryMedium","CODE_DELIVERY_DELIVERY_MEDIUM","destination","CODE_DELIVERY_DESTINATION","handleWebAuthnSignInResult","sharedSecret","getSetupUri","appName","accountName","totpUri","AmplifyUrl","getSignInResultFromError","errorName","InitiateAuthException","PasswordResetRequiredException","UserNotConfirmedException","attributes","parsedAttributes","JSON","parse","map","att","replace","newAttributes","Object","entries","forEach","key","handleChallengeName","options","userAttributes","friendlyDeviceName","initiateSelectedChallenge","selectedChallenge","handleMFAChallenge","handleSelectChallengeWithPassword","handleSelectChallengeWithPasswordSRP","mfa","mfaType","getMFAType","types","undefined","filter","Boolean","availableMfaSetupTypes","authMfaType","assertUserNotAuthenticated","authUser","getCurrentUser","error","userId","USER_ALREADY_AUTHENTICATED_EXCEPTION","getActiveSignInUsername","state","EMAIL_OTP_CODE","SMS_MFA_CODE","SMS_OTP_CODE","SOFTWARE_TOKEN_MFA_CODE","userContextData"],"sources":["/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/node_modules/@aws-amplify/auth/src/providers/cognito/utils/signInHelpers.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { AmplifyUrl, AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { AuthError } from '../../../errors/AuthError';\nimport { InitiateAuthException } from '../types/errors';\nimport { AuthErrorCodes } from '../../../common/AuthErrorStrings';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { USER_ALREADY_AUTHENTICATED_EXCEPTION } from '../../../errors/constants';\nimport { getCurrentUser } from '../apis/getCurrentUser';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { createAssociateSoftwareTokenClient, createInitiateAuthClient, createRespondToAuthChallengeClient, createVerifySoftwareTokenClient, } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { handleWebAuthnSignInResult } from '../../../client/flows/userAuth/handleWebAuthnSignInResult';\nimport { handlePasswordSRP } from '../../../client/flows/shared/handlePasswordSRP';\nimport { initiateSelectedChallenge } from '../../../client/flows/userAuth/handleSelectChallenge';\nimport { handleSelectChallengeWithPassword } from '../../../client/flows/userAuth/handleSelectChallengeWithPassword';\nimport { handleSelectChallengeWithPasswordSRP } from '../../../client/flows/userAuth/handleSelectChallengeWithPasswordSRP';\nimport { signInStore } from '../../../client/utils/store';\nimport { getAuthenticationHelper } from './srp';\nimport { getUserContextData } from './userContextData';\nimport { handlePasswordVerifierChallenge } from './handlePasswordVerifierChallenge';\nimport { handleDeviceSRPAuth } from './handleDeviceSRPAuth';\nimport { retryOnResourceNotFoundException } from './retryOnResourceNotFoundException';\nimport { setActiveSignInUsername } from './setActiveSignInUsername';\nconst USER_ATTRIBUTES = 'userAttributes.';\nfunction isWebAuthnResultAuthSignInOutput(result) {\n    return 'isSignedIn' in result && 'nextStep' in result;\n}\nexport async function handleCustomChallenge({ challengeResponse, clientMetadata, session, username, config, tokenOrchestrator, }) {\n    const { userPoolId, userPoolClientId, userPoolEndpoint } = config;\n    const challengeResponses = {\n        USERNAME: username,\n        ANSWER: challengeResponse,\n    };\n    const deviceMetadata = await tokenOrchestrator?.getDeviceMetadata(username);\n    if (deviceMetadata && deviceMetadata.deviceKey) {\n        challengeResponses.DEVICE_KEY = deviceMetadata.deviceKey;\n    }\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const jsonReq = {\n        ChallengeName: 'CUSTOM_CHALLENGE',\n        ChallengeResponses: challengeResponses,\n        Session: session,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n        UserContextData,\n    };\n    const respondToAuthChallenge = createRespondToAuthChallengeClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const response = await respondToAuthChallenge({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn),\n    }, jsonReq);\n    if (response.ChallengeName === 'DEVICE_SRP_AUTH') {\n        return handleDeviceSRPAuth({\n            username,\n            config,\n            clientMetadata,\n            session: response.Session,\n            tokenOrchestrator,\n        });\n    }\n    return response;\n}\nexport async function handleMFASetupChallenge({ challengeResponse, username, clientMetadata, session, deviceName, config, }) {\n    const { userPoolId, userPoolClientId, userPoolEndpoint } = config;\n    if (challengeResponse === 'EMAIL') {\n        return {\n            ChallengeName: 'MFA_SETUP',\n            Session: session,\n            ChallengeParameters: {\n                MFAS_CAN_SETUP: '[\"EMAIL_OTP\"]',\n            },\n            $metadata: {},\n        };\n    }\n    if (challengeResponse === 'TOTP') {\n        return {\n            ChallengeName: 'MFA_SETUP',\n            Session: session,\n            ChallengeParameters: {\n                MFAS_CAN_SETUP: '[\"SOFTWARE_TOKEN_MFA\"]',\n            },\n            $metadata: {},\n        };\n    }\n    const challengeResponses = {\n        USERNAME: username,\n    };\n    const isTOTPCode = /^\\d+$/.test(challengeResponse);\n    if (isTOTPCode) {\n        const verifySoftwareToken = createVerifySoftwareTokenClient({\n            endpointResolver: createCognitoUserPoolEndpointResolver({\n                endpointOverride: userPoolEndpoint,\n            }),\n        });\n        const { Session } = await verifySoftwareToken({\n            region: getRegionFromUserPoolId(userPoolId),\n            userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn),\n        }, {\n            UserCode: challengeResponse,\n            Session: session,\n            FriendlyDeviceName: deviceName,\n        });\n        signInStore.dispatch({\n            type: 'SET_SIGN_IN_SESSION',\n            value: Session,\n        });\n        const jsonReq = {\n            ChallengeName: 'MFA_SETUP',\n            ChallengeResponses: challengeResponses,\n            Session,\n            ClientMetadata: clientMetadata,\n            ClientId: userPoolClientId,\n        };\n        const respondToAuthChallenge = createRespondToAuthChallengeClient({\n            endpointResolver: createCognitoUserPoolEndpointResolver({\n                endpointOverride: userPoolEndpoint,\n            }),\n        });\n        return respondToAuthChallenge({\n            region: getRegionFromUserPoolId(userPoolId),\n            userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn),\n        }, jsonReq);\n    }\n    const isEmail = challengeResponse.includes('@');\n    if (isEmail) {\n        challengeResponses.EMAIL = challengeResponse;\n        const jsonReq = {\n            ChallengeName: 'MFA_SETUP',\n            ChallengeResponses: challengeResponses,\n            Session: session,\n            ClientMetadata: clientMetadata,\n            ClientId: userPoolClientId,\n        };\n        const respondToAuthChallenge = createRespondToAuthChallengeClient({\n            endpointResolver: createCognitoUserPoolEndpointResolver({\n                endpointOverride: userPoolEndpoint,\n            }),\n        });\n        return respondToAuthChallenge({\n            region: getRegionFromUserPoolId(userPoolId),\n            userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn),\n        }, jsonReq);\n    }\n    throw new AuthError({\n        name: AuthErrorCodes.SignInException,\n        message: `Cannot proceed with MFA setup using challengeResponse: ${challengeResponse}`,\n        recoverySuggestion: 'Try passing \"EMAIL\", \"TOTP\", a valid email, or OTP code as the challengeResponse.',\n    });\n}\nexport async function handleSelectMFATypeChallenge({ challengeResponse, username, clientMetadata, session, config, }) {\n    const { userPoolId, userPoolClientId, userPoolEndpoint } = config;\n    assertValidationError(challengeResponse === 'TOTP' ||\n        challengeResponse === 'SMS' ||\n        challengeResponse === 'EMAIL', AuthValidationErrorCode.IncorrectMFAMethod);\n    const challengeResponses = {\n        USERNAME: username,\n        ANSWER: mapMfaType(challengeResponse),\n    };\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const jsonReq = {\n        ChallengeName: 'SELECT_MFA_TYPE',\n        ChallengeResponses: challengeResponses,\n        Session: session,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n        UserContextData,\n    };\n    const respondToAuthChallenge = createRespondToAuthChallengeClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    return respondToAuthChallenge({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn),\n    }, jsonReq);\n}\nexport async function handleCompleteNewPasswordChallenge({ challengeResponse, clientMetadata, session, username, requiredAttributes, config, }) {\n    const { userPoolId, userPoolClientId, userPoolEndpoint } = config;\n    const challengeResponses = {\n        ...createAttributes(requiredAttributes),\n        NEW_PASSWORD: challengeResponse,\n        USERNAME: username,\n    };\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const jsonReq = {\n        ChallengeName: 'NEW_PASSWORD_REQUIRED',\n        ChallengeResponses: challengeResponses,\n        ClientMetadata: clientMetadata,\n        Session: session,\n        ClientId: userPoolClientId,\n        UserContextData,\n    };\n    const respondToAuthChallenge = createRespondToAuthChallengeClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    return respondToAuthChallenge({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn),\n    }, jsonReq);\n}\nexport async function handleUserPasswordAuthFlow(username, password, clientMetadata, config, tokenOrchestrator) {\n    const { userPoolClientId, userPoolId, userPoolEndpoint } = config;\n    const authParameters = {\n        USERNAME: username,\n        PASSWORD: password,\n    };\n    const deviceMetadata = await tokenOrchestrator.getDeviceMetadata(username);\n    if (deviceMetadata && deviceMetadata.deviceKey) {\n        authParameters.DEVICE_KEY = deviceMetadata.deviceKey;\n    }\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const jsonReq = {\n        AuthFlow: 'USER_PASSWORD_AUTH',\n        AuthParameters: authParameters,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n        UserContextData,\n    };\n    const initiateAuth = createInitiateAuthClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const response = await initiateAuth({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.SignIn),\n    }, jsonReq);\n    const activeUsername = response.ChallengeParameters?.USERNAME ??\n        response.ChallengeParameters?.USER_ID_FOR_SRP ??\n        username;\n    setActiveSignInUsername(activeUsername);\n    if (response.ChallengeName === 'DEVICE_SRP_AUTH')\n        return handleDeviceSRPAuth({\n            username: activeUsername,\n            config,\n            clientMetadata,\n            session: response.Session,\n            tokenOrchestrator,\n        });\n    return response;\n}\nexport async function handleUserSRPAuthFlow(username, password, clientMetadata, config, tokenOrchestrator) {\n    return handlePasswordSRP({\n        username,\n        password,\n        clientMetadata,\n        config,\n        tokenOrchestrator,\n        authFlow: 'USER_SRP_AUTH',\n    });\n}\nexport async function handleCustomAuthFlowWithoutSRP(username, clientMetadata, config, tokenOrchestrator) {\n    const { userPoolClientId, userPoolId, userPoolEndpoint } = config;\n    const authParameters = {\n        USERNAME: username,\n    };\n    const deviceMetadata = await tokenOrchestrator.getDeviceMetadata(username);\n    if (deviceMetadata && deviceMetadata.deviceKey) {\n        authParameters.DEVICE_KEY = deviceMetadata.deviceKey;\n    }\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const jsonReq = {\n        AuthFlow: 'CUSTOM_AUTH',\n        AuthParameters: authParameters,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n        UserContextData,\n    };\n    const initiateAuth = createInitiateAuthClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const response = await initiateAuth({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.SignIn),\n    }, jsonReq);\n    const activeUsername = response.ChallengeParameters?.USERNAME ?? username;\n    setActiveSignInUsername(activeUsername);\n    if (response.ChallengeName === 'DEVICE_SRP_AUTH')\n        return handleDeviceSRPAuth({\n            username: activeUsername,\n            config,\n            clientMetadata,\n            session: response.Session,\n            tokenOrchestrator,\n        });\n    return response;\n}\nexport async function handleCustomSRPAuthFlow(username, password, clientMetadata, config, tokenOrchestrator) {\n    assertTokenProviderConfig(config);\n    const { userPoolId, userPoolClientId, userPoolEndpoint } = config;\n    const userPoolName = userPoolId?.split('_')[1] || '';\n    const authenticationHelper = await getAuthenticationHelper(userPoolName);\n    const authParameters = {\n        USERNAME: username,\n        SRP_A: authenticationHelper.A.toString(16),\n        CHALLENGE_NAME: 'SRP_A',\n    };\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const jsonReq = {\n        AuthFlow: 'CUSTOM_AUTH',\n        AuthParameters: authParameters,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n        UserContextData,\n    };\n    const initiateAuth = createInitiateAuthClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const { ChallengeParameters: challengeParameters, Session: session } = await initiateAuth({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.SignIn),\n    }, jsonReq);\n    const activeUsername = challengeParameters?.USERNAME ?? username;\n    setActiveSignInUsername(activeUsername);\n    return retryOnResourceNotFoundException(handlePasswordVerifierChallenge, [\n        password,\n        challengeParameters,\n        clientMetadata,\n        session,\n        authenticationHelper,\n        config,\n        tokenOrchestrator,\n    ], activeUsername, tokenOrchestrator);\n}\nexport async function getSignInResult(params) {\n    const { challengeName, challengeParameters, availableChallenges } = params;\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    switch (challengeName) {\n        case 'CUSTOM_CHALLENGE':\n            return {\n                isSignedIn: false,\n                nextStep: {\n                    signInStep: 'CONFIRM_SIGN_IN_WITH_CUSTOM_CHALLENGE',\n                    additionalInfo: challengeParameters,\n                },\n            };\n        case 'MFA_SETUP': {\n            const { signInSession, username } = signInStore.getState();\n            const mfaSetupTypes = getMFATypes(parseMFATypes(challengeParameters.MFAS_CAN_SETUP)) || [];\n            const allowedMfaSetupTypes = getAllowedMfaSetupTypes(mfaSetupTypes);\n            const isTotpMfaSetupAvailable = allowedMfaSetupTypes.includes('TOTP');\n            const isEmailMfaSetupAvailable = allowedMfaSetupTypes.includes('EMAIL');\n            if (isTotpMfaSetupAvailable && isEmailMfaSetupAvailable) {\n                return {\n                    isSignedIn: false,\n                    nextStep: {\n                        signInStep: 'CONTINUE_SIGN_IN_WITH_MFA_SETUP_SELECTION',\n                        allowedMFATypes: allowedMfaSetupTypes,\n                    },\n                };\n            }\n            if (isEmailMfaSetupAvailable) {\n                return {\n                    isSignedIn: false,\n                    nextStep: {\n                        signInStep: 'CONTINUE_SIGN_IN_WITH_EMAIL_SETUP',\n                    },\n                };\n            }\n            if (isTotpMfaSetupAvailable) {\n                const associateSoftwareToken = createAssociateSoftwareTokenClient({\n                    endpointResolver: createCognitoUserPoolEndpointResolver({\n                        endpointOverride: authConfig.userPoolEndpoint,\n                    }),\n                });\n                const { Session, SecretCode: secretCode } = await associateSoftwareToken({ region: getRegionFromUserPoolId(authConfig.userPoolId) }, {\n                    Session: signInSession,\n                });\n                signInStore.dispatch({\n                    type: 'SET_SIGN_IN_SESSION',\n                    value: Session,\n                });\n                return {\n                    isSignedIn: false,\n                    nextStep: {\n                        signInStep: 'CONTINUE_SIGN_IN_WITH_TOTP_SETUP',\n                        totpSetupDetails: getTOTPSetupDetails(secretCode, username),\n                    },\n                };\n            }\n            throw new AuthError({\n                name: AuthErrorCodes.SignInException,\n                message: `Cannot initiate MFA setup from available types: ${mfaSetupTypes}`,\n            });\n        }\n        case 'NEW_PASSWORD_REQUIRED':\n            return {\n                isSignedIn: false,\n                nextStep: {\n                    signInStep: 'CONFIRM_SIGN_IN_WITH_NEW_PASSWORD_REQUIRED',\n                    missingAttributes: parseAttributes(challengeParameters.requiredAttributes),\n                },\n            };\n        case 'SELECT_MFA_TYPE':\n            return {\n                isSignedIn: false,\n                nextStep: {\n                    signInStep: 'CONTINUE_SIGN_IN_WITH_MFA_SELECTION',\n                    allowedMFATypes: getMFATypes(parseMFATypes(challengeParameters.MFAS_CAN_CHOOSE)),\n                },\n            };\n        case 'SMS_OTP':\n        case 'SMS_MFA':\n            return {\n                isSignedIn: false,\n                nextStep: {\n                    signInStep: 'CONFIRM_SIGN_IN_WITH_SMS_CODE',\n                    codeDeliveryDetails: {\n                        deliveryMedium: challengeParameters.CODE_DELIVERY_DELIVERY_MEDIUM,\n                        destination: challengeParameters.CODE_DELIVERY_DESTINATION,\n                    },\n                },\n            };\n        case 'SOFTWARE_TOKEN_MFA':\n            return {\n                isSignedIn: false,\n                nextStep: {\n                    signInStep: 'CONFIRM_SIGN_IN_WITH_TOTP_CODE',\n                },\n            };\n        case 'EMAIL_OTP':\n            return {\n                isSignedIn: false,\n                nextStep: {\n                    signInStep: 'CONFIRM_SIGN_IN_WITH_EMAIL_CODE',\n                    codeDeliveryDetails: {\n                        deliveryMedium: challengeParameters.CODE_DELIVERY_DELIVERY_MEDIUM,\n                        destination: challengeParameters.CODE_DELIVERY_DESTINATION,\n                    },\n                },\n            };\n        case 'WEB_AUTHN': {\n            const result = await handleWebAuthnSignInResult(challengeParameters);\n            if (isWebAuthnResultAuthSignInOutput(result)) {\n                return result;\n            }\n            return getSignInResult(result);\n        }\n        case 'PASSWORD':\n        case 'PASSWORD_SRP':\n            return {\n                isSignedIn: false,\n                nextStep: {\n                    signInStep: 'CONFIRM_SIGN_IN_WITH_PASSWORD',\n                },\n            };\n        case 'SELECT_CHALLENGE':\n            return {\n                isSignedIn: false,\n                nextStep: {\n                    signInStep: 'CONTINUE_SIGN_IN_WITH_FIRST_FACTOR_SELECTION',\n                    availableChallenges,\n                },\n            };\n        case 'ADMIN_NO_SRP_AUTH':\n            break;\n        case 'DEVICE_PASSWORD_VERIFIER':\n            break;\n        case 'DEVICE_SRP_AUTH':\n            break;\n        case 'PASSWORD_VERIFIER':\n            break;\n    }\n    // TODO: remove this error message for production apps\n    throw new AuthError({\n        name: AuthErrorCodes.SignInException,\n        message: 'An error occurred during the sign in process. ' +\n            `${challengeName} challengeName returned by the underlying service was not addressed.`,\n    });\n}\nexport function getTOTPSetupDetails(secretCode, username) {\n    return {\n        sharedSecret: secretCode,\n        getSetupUri: (appName, accountName) => {\n            const totpUri = `otpauth://totp/${appName}:${accountName ?? username}?secret=${secretCode}&issuer=${appName}`;\n            return new AmplifyUrl(totpUri);\n        },\n    };\n}\nexport function getSignInResultFromError(errorName) {\n    if (errorName === InitiateAuthException.PasswordResetRequiredException) {\n        return {\n            isSignedIn: false,\n            nextStep: { signInStep: 'RESET_PASSWORD' },\n        };\n    }\n    else if (errorName === InitiateAuthException.UserNotConfirmedException) {\n        return {\n            isSignedIn: false,\n            nextStep: { signInStep: 'CONFIRM_SIGN_UP' },\n        };\n    }\n}\nexport function parseAttributes(attributes) {\n    if (!attributes)\n        return [];\n    const parsedAttributes = JSON.parse(attributes).map(att => att.includes(USER_ATTRIBUTES) ? att.replace(USER_ATTRIBUTES, '') : att);\n    return parsedAttributes;\n}\nexport function createAttributes(attributes) {\n    if (!attributes)\n        return {};\n    const newAttributes = {};\n    Object.entries(attributes).forEach(([key, value]) => {\n        if (value)\n            newAttributes[`${USER_ATTRIBUTES}${key}`] = value;\n    });\n    return newAttributes;\n}\nexport async function handleChallengeName(username, challengeName, session, challengeResponse, config, tokenOrchestrator, clientMetadata, options) {\n    const userAttributes = options?.userAttributes;\n    const deviceName = options?.friendlyDeviceName;\n    switch (challengeName) {\n        case 'WEB_AUTHN':\n        case 'SELECT_CHALLENGE':\n            if (challengeResponse === 'PASSWORD_SRP' ||\n                challengeResponse === 'PASSWORD') {\n                return {\n                    ChallengeName: challengeResponse,\n                    Session: session,\n                    $metadata: {},\n                };\n            }\n            return initiateSelectedChallenge({\n                username,\n                session,\n                selectedChallenge: challengeResponse,\n                config,\n                clientMetadata,\n            });\n        case 'SELECT_MFA_TYPE':\n            return handleSelectMFATypeChallenge({\n                challengeResponse,\n                clientMetadata,\n                session,\n                username,\n                config,\n            });\n        case 'MFA_SETUP':\n            return handleMFASetupChallenge({\n                challengeResponse,\n                clientMetadata,\n                session,\n                username,\n                deviceName,\n                config,\n            });\n        case 'NEW_PASSWORD_REQUIRED':\n            return handleCompleteNewPasswordChallenge({\n                challengeResponse,\n                clientMetadata,\n                session,\n                username,\n                requiredAttributes: userAttributes,\n                config,\n            });\n        case 'CUSTOM_CHALLENGE':\n            return retryOnResourceNotFoundException(handleCustomChallenge, [\n                {\n                    challengeResponse,\n                    clientMetadata,\n                    session,\n                    username,\n                    config,\n                    tokenOrchestrator,\n                },\n            ], username, tokenOrchestrator);\n        case 'SMS_MFA':\n        case 'SOFTWARE_TOKEN_MFA':\n        case 'SMS_OTP':\n        case 'EMAIL_OTP':\n            return handleMFAChallenge({\n                challengeName,\n                challengeResponse,\n                clientMetadata,\n                session,\n                username,\n                config,\n            });\n        case 'PASSWORD':\n            return handleSelectChallengeWithPassword(username, challengeResponse, clientMetadata, config, session);\n        case 'PASSWORD_SRP':\n            return handleSelectChallengeWithPasswordSRP(username, challengeResponse, // This is the actual password\n            clientMetadata, config, session, tokenOrchestrator);\n    }\n    // TODO: remove this error message for production apps\n    throw new AuthError({\n        name: AuthErrorCodes.SignInException,\n        message: `An error occurred during the sign in process.\n\t\t${challengeName} challengeName returned by the underlying service was not addressed.`,\n    });\n}\nexport function mapMfaType(mfa) {\n    let mfaType = 'SMS_MFA';\n    if (mfa === 'TOTP')\n        mfaType = 'SOFTWARE_TOKEN_MFA';\n    if (mfa === 'EMAIL')\n        mfaType = 'EMAIL_OTP';\n    return mfaType;\n}\nexport function getMFAType(type) {\n    if (type === 'SMS_MFA')\n        return 'SMS';\n    if (type === 'SOFTWARE_TOKEN_MFA')\n        return 'TOTP';\n    if (type === 'EMAIL_OTP')\n        return 'EMAIL';\n    // TODO: log warning for unknown MFA type\n}\nexport function getMFATypes(types) {\n    if (!types)\n        return undefined;\n    return types.map(getMFAType).filter(Boolean);\n}\nexport function parseMFATypes(mfa) {\n    if (!mfa)\n        return [];\n    return JSON.parse(mfa);\n}\nexport function getAllowedMfaSetupTypes(availableMfaSetupTypes) {\n    return availableMfaSetupTypes.filter(authMfaType => authMfaType === 'EMAIL' || authMfaType === 'TOTP');\n}\nexport async function assertUserNotAuthenticated() {\n    let authUser;\n    try {\n        authUser = await getCurrentUser();\n    }\n    catch (error) { }\n    if (authUser && authUser.userId && authUser.username) {\n        throw new AuthError({\n            name: USER_ALREADY_AUTHENTICATED_EXCEPTION,\n            message: 'There is already a signed in user.',\n            recoverySuggestion: 'Call signOut before calling signIn again.',\n        });\n    }\n}\nexport function getActiveSignInUsername(username) {\n    const state = signInStore.getState();\n    return state.username ?? username;\n}\nexport async function handleMFAChallenge({ challengeName, challengeResponse, clientMetadata, session, username, config, }) {\n    const { userPoolId, userPoolClientId, userPoolEndpoint } = config;\n    const challengeResponses = {\n        USERNAME: username,\n    };\n    if (challengeName === 'EMAIL_OTP') {\n        challengeResponses.EMAIL_OTP_CODE = challengeResponse;\n    }\n    if (challengeName === 'SMS_MFA') {\n        challengeResponses.SMS_MFA_CODE = challengeResponse;\n    }\n    if (challengeName === 'SMS_OTP') {\n        challengeResponses.SMS_OTP_CODE = challengeResponse;\n    }\n    if (challengeName === 'SOFTWARE_TOKEN_MFA') {\n        challengeResponses.SOFTWARE_TOKEN_MFA_CODE = challengeResponse;\n    }\n    const userContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const jsonReq = {\n        ChallengeName: challengeName,\n        ChallengeResponses: challengeResponses,\n        Session: session,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n        UserContextData: userContextData,\n    };\n    const respondToAuthChallenge = createRespondToAuthChallengeClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    return respondToAuthChallenge({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn),\n    }, jsonReq);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}