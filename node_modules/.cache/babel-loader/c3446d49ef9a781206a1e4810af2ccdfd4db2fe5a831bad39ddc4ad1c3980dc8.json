{"ast":null,"code":"import '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../types/errors.mjs';\nimport { createRespondToAuthChallengeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\nimport '@aws-amplify/core';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { assertDeviceMetadata } from './types.mjs';\nimport { getAuthenticationHelper } from './srp/getAuthenticationHelper.mjs';\nimport './srp/constants.mjs';\nimport { getNowString } from './srp/getNowString.mjs';\nimport { getSignatureString } from './srp/getSignatureString.mjs';\nimport BigInteger from './srp/BigInteger/BigInteger.mjs';\nimport { getUserContextData } from './userContextData.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nasync function handleDeviceSRPAuth(_ref) {\n  let {\n    username,\n    config,\n    clientMetadata,\n    session,\n    tokenOrchestrator\n  } = _ref;\n  const {\n    userPoolId,\n    userPoolEndpoint\n  } = config;\n  const clientId = config.userPoolClientId;\n  const deviceMetadata = await (tokenOrchestrator === null || tokenOrchestrator === void 0 ? void 0 : tokenOrchestrator.getDeviceMetadata(username));\n  assertDeviceMetadata(deviceMetadata);\n  const authenticationHelper = await getAuthenticationHelper(deviceMetadata.deviceGroupKey);\n  const challengeResponses = {\n    USERNAME: username,\n    SRP_A: authenticationHelper.A.toString(16),\n    DEVICE_KEY: deviceMetadata.deviceKey\n  };\n  const jsonReqResponseChallenge = {\n    ChallengeName: 'DEVICE_SRP_AUTH',\n    ClientId: clientId,\n    ChallengeResponses: challengeResponses,\n    ClientMetadata: clientMetadata,\n    Session: session\n  };\n  const respondToAuthChallenge = createRespondToAuthChallengeClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const {\n    ChallengeParameters: respondedChallengeParameters,\n    Session\n  } = await respondToAuthChallenge({\n    region: getRegionFromUserPoolId(userPoolId)\n  }, jsonReqResponseChallenge);\n  return handleDevicePasswordVerifier(username, respondedChallengeParameters, clientMetadata, Session, authenticationHelper, config, tokenOrchestrator);\n}\nasync function handleDevicePasswordVerifier(username, challengeParameters, clientMetadata, session, authenticationHelper, _ref2, tokenOrchestrator) {\n  var _challengeParameters$;\n  let {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = _ref2;\n  const deviceMetadata = await (tokenOrchestrator === null || tokenOrchestrator === void 0 ? void 0 : tokenOrchestrator.getDeviceMetadata(username));\n  assertDeviceMetadata(deviceMetadata);\n  const serverBValue = new BigInteger(challengeParameters === null || challengeParameters === void 0 ? void 0 : challengeParameters.SRP_B, 16);\n  const salt = new BigInteger(challengeParameters === null || challengeParameters === void 0 ? void 0 : challengeParameters.SALT, 16);\n  const {\n    deviceKey\n  } = deviceMetadata;\n  const {\n    deviceGroupKey\n  } = deviceMetadata;\n  const hkdf = await authenticationHelper.getPasswordAuthenticationKey({\n    username: deviceMetadata.deviceKey,\n    password: deviceMetadata.randomPassword,\n    serverBValue,\n    salt\n  });\n  const dateNow = getNowString();\n  const challengeResponses = {\n    USERNAME: (_challengeParameters$ = challengeParameters === null || challengeParameters === void 0 ? void 0 : challengeParameters.USERNAME) !== null && _challengeParameters$ !== void 0 ? _challengeParameters$ : username,\n    PASSWORD_CLAIM_SECRET_BLOCK: challengeParameters === null || challengeParameters === void 0 ? void 0 : challengeParameters.SECRET_BLOCK,\n    TIMESTAMP: dateNow,\n    PASSWORD_CLAIM_SIGNATURE: getSignatureString({\n      username: deviceKey,\n      userPoolName: deviceGroupKey,\n      challengeParameters,\n      dateNow,\n      hkdf\n    }),\n    DEVICE_KEY: deviceKey\n  };\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const jsonReqResponseChallenge = {\n    ChallengeName: 'DEVICE_PASSWORD_VERIFIER',\n    ClientId: userPoolClientId,\n    ChallengeResponses: challengeResponses,\n    Session: session,\n    ClientMetadata: clientMetadata,\n    UserContextData\n  };\n  const respondToAuthChallenge = createRespondToAuthChallengeClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  return respondToAuthChallenge({\n    region: getRegionFromUserPoolId(userPoolId)\n  }, jsonReqResponseChallenge);\n}\nexport { handleDeviceSRPAuth };","map":{"version":3,"names":["handleDeviceSRPAuth","_ref","username","config","clientMetadata","session","tokenOrchestrator","userPoolId","userPoolEndpoint","clientId","userPoolClientId","deviceMetadata","getDeviceMetadata","assertDeviceMetadata","authenticationHelper","getAuthenticationHelper","deviceGroupKey","challengeResponses","USERNAME","SRP_A","A","toString","DEVICE_KEY","deviceKey","jsonReqResponseChallenge","ChallengeName","ClientId","ChallengeResponses","ClientMetadata","Session","respondToAuthChallenge","createRespondToAuthChallengeClient","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","ChallengeParameters","respondedChallengeParameters","region","getRegionFromUserPoolId","handleDevicePasswordVerifier","challengeParameters","_ref2","_challengeParameters$","serverBValue","BigInteger","SRP_B","salt","SALT","hkdf","getPasswordAuthenticationKey","password","randomPassword","dateNow","getNowString","PASSWORD_CLAIM_SECRET_BLOCK","SECRET_BLOCK","TIMESTAMP","PASSWORD_CLAIM_SIGNATURE","getSignatureString","userPoolName","UserContextData","getUserContextData"],"sources":["/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@aws-amplify/auth/src/providers/cognito/utils/handleDeviceSRPAuth.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { createRespondToAuthChallengeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { assertDeviceMetadata } from './types';\nimport { getAuthenticationHelper, getNowString, getSignatureString, } from './srp';\nimport { BigInteger } from './srp/BigInteger';\nimport { getUserContextData } from './userContextData';\nexport async function handleDeviceSRPAuth({ username, config, clientMetadata, session, tokenOrchestrator, }) {\n    const { userPoolId, userPoolEndpoint } = config;\n    const clientId = config.userPoolClientId;\n    const deviceMetadata = await tokenOrchestrator?.getDeviceMetadata(username);\n    assertDeviceMetadata(deviceMetadata);\n    const authenticationHelper = await getAuthenticationHelper(deviceMetadata.deviceGroupKey);\n    const challengeResponses = {\n        USERNAME: username,\n        SRP_A: authenticationHelper.A.toString(16),\n        DEVICE_KEY: deviceMetadata.deviceKey,\n    };\n    const jsonReqResponseChallenge = {\n        ChallengeName: 'DEVICE_SRP_AUTH',\n        ClientId: clientId,\n        ChallengeResponses: challengeResponses,\n        ClientMetadata: clientMetadata,\n        Session: session,\n    };\n    const respondToAuthChallenge = createRespondToAuthChallengeClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const { ChallengeParameters: respondedChallengeParameters, Session } = await respondToAuthChallenge({ region: getRegionFromUserPoolId(userPoolId) }, jsonReqResponseChallenge);\n    return handleDevicePasswordVerifier(username, respondedChallengeParameters, clientMetadata, Session, authenticationHelper, config, tokenOrchestrator);\n}\nasync function handleDevicePasswordVerifier(username, challengeParameters, clientMetadata, session, authenticationHelper, { userPoolId, userPoolClientId, userPoolEndpoint }, tokenOrchestrator) {\n    const deviceMetadata = await tokenOrchestrator?.getDeviceMetadata(username);\n    assertDeviceMetadata(deviceMetadata);\n    const serverBValue = new BigInteger(challengeParameters?.SRP_B, 16);\n    const salt = new BigInteger(challengeParameters?.SALT, 16);\n    const { deviceKey } = deviceMetadata;\n    const { deviceGroupKey } = deviceMetadata;\n    const hkdf = await authenticationHelper.getPasswordAuthenticationKey({\n        username: deviceMetadata.deviceKey,\n        password: deviceMetadata.randomPassword,\n        serverBValue,\n        salt,\n    });\n    const dateNow = getNowString();\n    const challengeResponses = {\n        USERNAME: challengeParameters?.USERNAME ?? username,\n        PASSWORD_CLAIM_SECRET_BLOCK: challengeParameters?.SECRET_BLOCK,\n        TIMESTAMP: dateNow,\n        PASSWORD_CLAIM_SIGNATURE: getSignatureString({\n            username: deviceKey,\n            userPoolName: deviceGroupKey,\n            challengeParameters,\n            dateNow,\n            hkdf,\n        }),\n        DEVICE_KEY: deviceKey,\n    };\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const jsonReqResponseChallenge = {\n        ChallengeName: 'DEVICE_PASSWORD_VERIFIER',\n        ClientId: userPoolClientId,\n        ChallengeResponses: challengeResponses,\n        Session: session,\n        ClientMetadata: clientMetadata,\n        UserContextData,\n    };\n    const respondToAuthChallenge = createRespondToAuthChallengeClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    return respondToAuthChallenge({ region: getRegionFromUserPoolId(userPoolId) }, jsonReqResponseChallenge);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}