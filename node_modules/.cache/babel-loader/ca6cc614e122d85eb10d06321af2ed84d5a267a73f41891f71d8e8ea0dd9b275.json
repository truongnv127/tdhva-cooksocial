{"ast":null,"code":"import { base64Encoder, getDeviceName } from '@aws-amplify/core/internals/utils';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../types/errors.mjs';\nimport { createConfirmDeviceClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmDeviceClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\nimport '@aws-amplify/core';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { getAuthenticationHelper } from './srp/getAuthenticationHelper.mjs';\nimport { getBytesFromHex } from './srp/getBytesFromHex.mjs';\nimport '@aws-crypto/sha256-js';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * This function is used to kick off the device management flow.\n *\n * If an error is thrown while generating a hash device or calling the `ConfirmDevice`\n * client, then this API will ignore the error and return undefined. Otherwise the authentication\n * flow will not complete and the user won't be able to be signed in.\n *\n * @returns DeviceMetadata | undefined\n */\nasync function getNewDeviceMetadata({\n  userPoolId,\n  userPoolEndpoint,\n  newDeviceMetadata,\n  accessToken\n}) {\n  if (!newDeviceMetadata) return undefined;\n  const userPoolName = userPoolId.split('_')[1] || '';\n  const authenticationHelper = await getAuthenticationHelper(userPoolName);\n  const deviceKey = newDeviceMetadata?.DeviceKey;\n  const deviceGroupKey = newDeviceMetadata?.DeviceGroupKey;\n  try {\n    await authenticationHelper.generateHashDevice(deviceGroupKey ?? '', deviceKey ?? '');\n  } catch (errGenHash) {\n    // TODO: log error here\n    return undefined;\n  }\n  const deviceSecretVerifierConfig = {\n    Salt: base64Encoder.convert(getBytesFromHex(authenticationHelper.getSaltToHashDevices())),\n    PasswordVerifier: base64Encoder.convert(getBytesFromHex(authenticationHelper.getVerifierDevices()))\n  };\n  const randomPassword = authenticationHelper.getRandomPassword();\n  try {\n    const confirmDevice = createConfirmDeviceClient({\n      endpointResolver: createCognitoUserPoolEndpointResolver({\n        endpointOverride: userPoolEndpoint\n      })\n    });\n    await confirmDevice({\n      region: getRegionFromUserPoolId(userPoolId)\n    }, {\n      AccessToken: accessToken,\n      DeviceName: await getDeviceName(),\n      DeviceKey: newDeviceMetadata?.DeviceKey,\n      DeviceSecretVerifierConfig: deviceSecretVerifierConfig\n    });\n    return {\n      deviceKey,\n      deviceGroupKey,\n      randomPassword\n    };\n  } catch (error) {\n    // TODO: log error here\n    return undefined;\n  }\n}\nexport { getNewDeviceMetadata };","map":{"version":3,"names":["getNewDeviceMetadata","userPoolId","userPoolEndpoint","newDeviceMetadata","accessToken","undefined","userPoolName","split","authenticationHelper","getAuthenticationHelper","deviceKey","DeviceKey","deviceGroupKey","DeviceGroupKey","generateHashDevice","errGenHash","deviceSecretVerifierConfig","Salt","base64Encoder","convert","getBytesFromHex","getSaltToHashDevices","PasswordVerifier","getVerifierDevices","randomPassword","getRandomPassword","confirmDevice","createConfirmDeviceClient","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","region","getRegionFromUserPoolId","AccessToken","DeviceName","getDeviceName","DeviceSecretVerifierConfig","error"],"sources":["/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/node_modules/@aws-amplify/auth/src/providers/cognito/utils/getNewDeviceMetadata.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { base64Encoder, getDeviceName, } from '@aws-amplify/core/internals/utils';\nimport { createConfirmDeviceClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { getAuthenticationHelper, getBytesFromHex } from './srp';\n/**\n * This function is used to kick off the device management flow.\n *\n * If an error is thrown while generating a hash device or calling the `ConfirmDevice`\n * client, then this API will ignore the error and return undefined. Otherwise the authentication\n * flow will not complete and the user won't be able to be signed in.\n *\n * @returns DeviceMetadata | undefined\n */\nexport async function getNewDeviceMetadata({ userPoolId, userPoolEndpoint, newDeviceMetadata, accessToken, }) {\n    if (!newDeviceMetadata)\n        return undefined;\n    const userPoolName = userPoolId.split('_')[1] || '';\n    const authenticationHelper = await getAuthenticationHelper(userPoolName);\n    const deviceKey = newDeviceMetadata?.DeviceKey;\n    const deviceGroupKey = newDeviceMetadata?.DeviceGroupKey;\n    try {\n        await authenticationHelper.generateHashDevice(deviceGroupKey ?? '', deviceKey ?? '');\n    }\n    catch (errGenHash) {\n        // TODO: log error here\n        return undefined;\n    }\n    const deviceSecretVerifierConfig = {\n        Salt: base64Encoder.convert(getBytesFromHex(authenticationHelper.getSaltToHashDevices())),\n        PasswordVerifier: base64Encoder.convert(getBytesFromHex(authenticationHelper.getVerifierDevices())),\n    };\n    const randomPassword = authenticationHelper.getRandomPassword();\n    try {\n        const confirmDevice = createConfirmDeviceClient({\n            endpointResolver: createCognitoUserPoolEndpointResolver({\n                endpointOverride: userPoolEndpoint,\n            }),\n        });\n        await confirmDevice({ region: getRegionFromUserPoolId(userPoolId) }, {\n            AccessToken: accessToken,\n            DeviceName: await getDeviceName(),\n            DeviceKey: newDeviceMetadata?.DeviceKey,\n            DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n        });\n        return {\n            deviceKey,\n            deviceGroupKey,\n            randomPassword,\n        };\n    }\n    catch (error) {\n        // TODO: log error here\n        return undefined;\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,oBAAoBA,CAAC;EAAEC,UAAU;EAAEC,gBAAgB;EAAEC,iBAAiB;EAAEC;AAAW,CAAG,EAAE;EAC1G,IAAI,CAACD,iBAAiB,EAClB,OAAOE,SAAS;EACpB,MAAMC,YAAY,GAAGL,UAAU,CAACM,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;EACnD,MAAMC,oBAAoB,GAAG,MAAMC,uBAAuB,CAACH,YAAY,CAAC;EACxE,MAAMI,SAAS,GAAGP,iBAAiB,EAAEQ,SAAS;EAC9C,MAAMC,cAAc,GAAGT,iBAAiB,EAAEU,cAAc;EACxD,IAAI;IACA,MAAML,oBAAoB,CAACM,kBAAkB,CAACF,cAAc,IAAI,EAAE,EAAEF,SAAS,IAAI,EAAE,CAAC;EACxF,EACA,OAAOK,UAAU,EAAE;IACvB;IACQ,OAAOV,SAAS;EACpB;EACA,MAAMW,0BAA0B,GAAG;IAC/BC,IAAI,EAAEC,aAAa,CAACC,OAAO,CAACC,eAAe,CAACZ,oBAAoB,CAACa,oBAAoB,EAAE,CAAC,CAAC;IACzFC,gBAAgB,EAAEJ,aAAa,CAACC,OAAO,CAACC,eAAe,CAACZ,oBAAoB,CAACe,kBAAkB,EAAE,CAAC;EAC1G,CAAK;EACD,MAAMC,cAAc,GAAGhB,oBAAoB,CAACiB,iBAAiB,EAAE;EAC/D,IAAI;IACA,MAAMC,aAAa,GAAGC,yBAAyB,CAAC;MAC5CC,gBAAgB,EAAEC,qCAAqC,CAAC;QACpDC,gBAAgB,EAAE5B;MAClC,CAAa;IACb,CAAS,CAAC;IACF,MAAMwB,aAAa,CAAC;MAAEK,MAAM,EAAEC,uBAAuB,CAAC/B,UAAU;IAAC,CAAE,EAAE;MACjEgC,WAAW,EAAE7B,WAAW;MACxB8B,UAAU,EAAE,MAAMC,aAAa,EAAE;MACjCxB,SAAS,EAAER,iBAAiB,EAAEQ,SAAS;MACvCyB,0BAA0B,EAAEpB;IACxC,CAAS,CAAC;IACF,OAAO;MACHN,SAAS;MACTE,cAAc;MACdY;IACZ,CAAS;EACL,EACA,OAAOa,KAAK,EAAE;IAClB;IACQ,OAAOhC,SAAS;EACpB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}