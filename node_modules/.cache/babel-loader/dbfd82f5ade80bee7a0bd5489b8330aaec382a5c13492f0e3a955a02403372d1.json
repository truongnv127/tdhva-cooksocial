{"ast":null,"code":"import _objectSpread from \"/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { signRequest } from '../clients/middleware/signing/signer/signatureV4/signRequest.mjs';\nimport { presignUrl } from '../clients/middleware/signing/signer/signatureV4/presignUrl.mjs';\nimport { TOKEN_QUERY_PARAM } from '../clients/middleware/signing/signer/signatureV4/constants.mjs';\nimport '@aws-crypto/sha256-js';\nimport '@smithy/util-hex-encoding';\nimport { AmplifyUrl } from '../utils/amplifyUrl/index.mjs';\nimport { DateUtils } from './DateUtils.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst IOT_SERVICE_NAME = 'iotdevicegateway';\n// Best practice regex to parse the service and region from an AWS endpoint\nconst AWS_ENDPOINT_REGEX = /([^.]+)\\.(?:([^.]*)\\.)?amazonaws\\.com(.cn)?$/;\n/**\n * This class is intended to be deprecated and replaced by `signRequest` and `presignUrl` functions from\n * `clients/middleware/signing/signer/signatureV4`.\n *\n * TODO: refactor the logics here into `signRequest` and `presignUrl` functions and remove this class.\n *\n * @internal\n * @deprecated\n */\nclass Signer {\n  /**\n  * Sign a HTTP request, add 'Authorization' header to request param\n  * @method sign\n  * @memberof Signer\n  * @static\n  *\n  * @param {object} request - HTTP request object\n  <pre>\n  request: {\n      method: GET | POST | PUT ...\n      url: ...,\n      headers: {\n          header1: ...\n      },\n      data: data\n  }\n  </pre>\n  * @param {object} access_info - AWS access credential info\n  <pre>\n  access_info: {\n      access_key: ...,\n      secret_key: ...,\n      session_token: ...\n  }\n  </pre>\n  * @param {object} [service_info] - AWS service type and region, optional,\n  *                                  if not provided then parse out from url\n  <pre>\n  service_info: {\n      service: ...,\n      region: ...\n  }\n  </pre>\n  *\n  * @returns {object} Signed HTTP request\n  */\n  static sign(request, accessInfo, serviceInfo) {\n    request.headers = request.headers || {};\n    if (request.body && !request.data) {\n      throw new Error('The attribute \"body\" was found on the request object. Please use the attribute \"data\" instead.');\n    }\n    const requestToSign = _objectSpread(_objectSpread({}, request), {}, {\n      body: request.data,\n      url: new AmplifyUrl(request.url)\n    });\n    const options = getOptions(requestToSign, accessInfo, serviceInfo);\n    const signedRequest = signRequest(requestToSign, options);\n    // Prior to using `signRequest`, Signer accepted urls as strings and outputted urls as string. Coerce the property\n    // back to a string so as not to disrupt consumers of Signer.\n    signedRequest.url = signedRequest.url.toString();\n    // HTTP headers should be case insensitive but, to maintain parity with the previous Signer implementation and\n    // limit the impact of this implementation swap, replace lowercased headers with title cased ones.\n    signedRequest.headers.Authorization = signedRequest.headers.authorization;\n    signedRequest.headers['X-Amz-Security-Token'] = signedRequest.headers['x-amz-security-token'];\n    delete signedRequest.headers.authorization;\n    delete signedRequest.headers['x-amz-security-token'];\n    return signedRequest;\n  }\n  static signUrl(urlOrRequest, accessInfo, serviceInfo, expiration) {\n    const urlToSign = typeof urlOrRequest === 'object' ? urlOrRequest.url : urlOrRequest;\n    const method = typeof urlOrRequest === 'object' ? urlOrRequest.method : 'GET';\n    const body = typeof urlOrRequest === 'object' ? urlOrRequest.body : undefined;\n    const presignable = {\n      body,\n      method,\n      url: new AmplifyUrl(urlToSign)\n    };\n    const options = getOptions(presignable, accessInfo, serviceInfo, expiration);\n    const signedUrl = presignUrl(presignable, options);\n    if (accessInfo.session_token && !sessionTokenRequiredInSigning(options.signingService)) {\n      signedUrl.searchParams.append(TOKEN_QUERY_PARAM, accessInfo.session_token);\n    }\n    return signedUrl.toString();\n  }\n}\nconst getOptions = (request, accessInfo, serviceInfo, expiration) => {\n  const {\n    access_key,\n    secret_key,\n    session_token\n  } = accessInfo !== null && accessInfo !== void 0 ? accessInfo : {};\n  const {\n    region: urlRegion,\n    service: urlService\n  } = parseServiceInfo(request.url);\n  const {\n    region = urlRegion,\n    service = urlService\n  } = serviceInfo !== null && serviceInfo !== void 0 ? serviceInfo : {};\n  const credentials = _objectSpread({\n    accessKeyId: access_key,\n    secretAccessKey: secret_key\n  }, sessionTokenRequiredInSigning(service) ? {\n    sessionToken: session_token\n  } : {});\n  return _objectSpread({\n    credentials,\n    signingDate: DateUtils.getDateWithClockOffset(),\n    signingRegion: region,\n    signingService: service\n  }, expiration && {\n    expiration\n  });\n};\nconst parseServiceInfo = url => {\n  var _host$match;\n  const {\n    host\n  } = url;\n  const matched = (_host$match = host.match(AWS_ENDPOINT_REGEX)) !== null && _host$match !== void 0 ? _host$match : [];\n  let parsed = matched.slice(1, 3);\n  if (parsed[1] === 'es') {\n    // Elastic Search\n    parsed = parsed.reverse();\n  }\n  return {\n    service: parsed[0],\n    region: parsed[1]\n  };\n};\n// IoT service does not allow the session token in the canonical request\n// https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\nconst sessionTokenRequiredInSigning = service => service !== IOT_SERVICE_NAME;\nexport { Signer };","map":{"version":3,"names":["IOT_SERVICE_NAME","AWS_ENDPOINT_REGEX","Signer","sign","request","accessInfo","serviceInfo","headers","body","data","Error","requestToSign","_objectSpread","url","AmplifyUrl","options","getOptions","signedRequest","signRequest","toString","Authorization","authorization","signUrl","urlOrRequest","expiration","urlToSign","method","undefined","presignable","signedUrl","presignUrl","session_token","sessionTokenRequiredInSigning","signingService","searchParams","append","TOKEN_QUERY_PARAM","access_key","secret_key","region","urlRegion","service","urlService","parseServiceInfo","credentials","accessKeyId","secretAccessKey","sessionToken","signingDate","DateUtils","getDateWithClockOffset","signingRegion","_host$match","host","matched","match","parsed","slice","reverse"],"sources":["/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@aws-amplify/core/src/Signer/Signer.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { TOKEN_QUERY_PARAM, presignUrl, signRequest, } from '../clients/middleware/signing/signer/signatureV4';\nimport { AmplifyUrl } from '../utils/amplifyUrl';\nimport { DateUtils } from './DateUtils';\nconst IOT_SERVICE_NAME = 'iotdevicegateway';\n// Best practice regex to parse the service and region from an AWS endpoint\nconst AWS_ENDPOINT_REGEX = /([^.]+)\\.(?:([^.]*)\\.)?amazonaws\\.com(.cn)?$/;\n/**\n * This class is intended to be deprecated and replaced by `signRequest` and `presignUrl` functions from\n * `clients/middleware/signing/signer/signatureV4`.\n *\n * TODO: refactor the logics here into `signRequest` and `presignUrl` functions and remove this class.\n *\n * @internal\n * @deprecated\n */\nexport class Signer {\n    /**\n    * Sign a HTTP request, add 'Authorization' header to request param\n    * @method sign\n    * @memberof Signer\n    * @static\n    *\n    * @param {object} request - HTTP request object\n    <pre>\n    request: {\n        method: GET | POST | PUT ...\n        url: ...,\n        headers: {\n            header1: ...\n        },\n        data: data\n    }\n    </pre>\n    * @param {object} access_info - AWS access credential info\n    <pre>\n    access_info: {\n        access_key: ...,\n        secret_key: ...,\n        session_token: ...\n    }\n    </pre>\n    * @param {object} [service_info] - AWS service type and region, optional,\n    *                                  if not provided then parse out from url\n    <pre>\n    service_info: {\n        service: ...,\n        region: ...\n    }\n    </pre>\n    *\n    * @returns {object} Signed HTTP request\n    */\n    static sign(request, accessInfo, serviceInfo) {\n        request.headers = request.headers || {};\n        if (request.body && !request.data) {\n            throw new Error('The attribute \"body\" was found on the request object. Please use the attribute \"data\" instead.');\n        }\n        const requestToSign = {\n            ...request,\n            body: request.data,\n            url: new AmplifyUrl(request.url),\n        };\n        const options = getOptions(requestToSign, accessInfo, serviceInfo);\n        const signedRequest = signRequest(requestToSign, options);\n        // Prior to using `signRequest`, Signer accepted urls as strings and outputted urls as string. Coerce the property\n        // back to a string so as not to disrupt consumers of Signer.\n        signedRequest.url = signedRequest.url.toString();\n        // HTTP headers should be case insensitive but, to maintain parity with the previous Signer implementation and\n        // limit the impact of this implementation swap, replace lowercased headers with title cased ones.\n        signedRequest.headers.Authorization = signedRequest.headers.authorization;\n        signedRequest.headers['X-Amz-Security-Token'] =\n            signedRequest.headers['x-amz-security-token'];\n        delete signedRequest.headers.authorization;\n        delete signedRequest.headers['x-amz-security-token'];\n        return signedRequest;\n    }\n    static signUrl(urlOrRequest, accessInfo, serviceInfo, expiration) {\n        const urlToSign = typeof urlOrRequest === 'object' ? urlOrRequest.url : urlOrRequest;\n        const method = typeof urlOrRequest === 'object' ? urlOrRequest.method : 'GET';\n        const body = typeof urlOrRequest === 'object' ? urlOrRequest.body : undefined;\n        const presignable = {\n            body,\n            method,\n            url: new AmplifyUrl(urlToSign),\n        };\n        const options = getOptions(presignable, accessInfo, serviceInfo, expiration);\n        const signedUrl = presignUrl(presignable, options);\n        if (accessInfo.session_token &&\n            !sessionTokenRequiredInSigning(options.signingService)) {\n            signedUrl.searchParams.append(TOKEN_QUERY_PARAM, accessInfo.session_token);\n        }\n        return signedUrl.toString();\n    }\n}\nconst getOptions = (request, accessInfo, serviceInfo, expiration) => {\n    const { access_key, secret_key, session_token } = accessInfo ?? {};\n    const { region: urlRegion, service: urlService } = parseServiceInfo(request.url);\n    const { region = urlRegion, service = urlService } = serviceInfo ?? {};\n    const credentials = {\n        accessKeyId: access_key,\n        secretAccessKey: secret_key,\n        ...(sessionTokenRequiredInSigning(service)\n            ? { sessionToken: session_token }\n            : {}),\n    };\n    return {\n        credentials,\n        signingDate: DateUtils.getDateWithClockOffset(),\n        signingRegion: region,\n        signingService: service,\n        ...(expiration && { expiration }),\n    };\n};\nconst parseServiceInfo = (url) => {\n    const { host } = url;\n    const matched = host.match(AWS_ENDPOINT_REGEX) ?? [];\n    let parsed = matched.slice(1, 3);\n    if (parsed[1] === 'es') {\n        // Elastic Search\n        parsed = parsed.reverse();\n    }\n    return {\n        service: parsed[0],\n        region: parsed[1],\n    };\n};\n// IoT service does not allow the session token in the canonical request\n// https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\nconst sessionTokenRequiredInSigning = (service) => service !== IOT_SERVICE_NAME;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}