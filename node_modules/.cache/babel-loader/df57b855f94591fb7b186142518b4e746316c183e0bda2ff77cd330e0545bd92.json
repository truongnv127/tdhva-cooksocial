{"ast":null,"code":"import { assertUserNotAuthenticated } from '../utils/signInHelpers.mjs';\nimport { signInWithCustomAuth } from './signInWithCustomAuth.mjs';\nimport { signInWithCustomSRPAuth } from './signInWithCustomSRPAuth.mjs';\nimport { signInWithSRP } from './signInWithSRP.mjs';\nimport { signInWithUserPassword } from './signInWithUserPassword.mjs';\nimport { signInWithUserAuth } from './signInWithUserAuth.mjs';\nimport { resetAutoSignIn } from './autoSignIn.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Signs a user in\n *\n * @param input -  The SignInInput object\n * @returns SignInOutput\n * @throws service: {@link InitiateAuthException }, {@link RespondToAuthChallengeException }\n *  - Cognito service errors thrown during the sign-in process.\n * @throws validation: {@link AuthValidationErrorCode  } - Validation errors thrown when either username or password\n *  are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function signIn(input) {\n  var _input$options;\n  // Here we want to reset the store but not reassign the callback.\n  // The callback is reset when the underlying promise resolves or rejects.\n  // With the advent of session based sign in, this guarantees that the signIn API initiates a new auth flow,\n  // regardless of whether it is called for a user currently engaged in an active auto sign in session.\n  resetAutoSignIn(false);\n  const authFlowType = (_input$options = input.options) === null || _input$options === void 0 ? void 0 : _input$options.authFlowType;\n  await assertUserNotAuthenticated();\n  switch (authFlowType) {\n    case 'USER_SRP_AUTH':\n      return signInWithSRP(input);\n    case 'USER_PASSWORD_AUTH':\n      return signInWithUserPassword(input);\n    case 'CUSTOM_WITHOUT_SRP':\n      return signInWithCustomAuth(input);\n    case 'CUSTOM_WITH_SRP':\n      return signInWithCustomSRPAuth(input);\n    case 'USER_AUTH':\n      return signInWithUserAuth(input);\n    default:\n      return signInWithSRP(input);\n  }\n}\nexport { signIn };","map":{"version":3,"names":["signIn","input","_input$options","resetAutoSignIn","authFlowType","options","assertUserNotAuthenticated","signInWithSRP","signInWithUserPassword","signInWithCustomAuth","signInWithCustomSRPAuth","signInWithUserAuth"],"sources":["/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@aws-amplify/auth/src/providers/cognito/apis/signIn.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { assertUserNotAuthenticated } from '../utils/signInHelpers';\nimport { signInWithCustomAuth } from './signInWithCustomAuth';\nimport { signInWithCustomSRPAuth } from './signInWithCustomSRPAuth';\nimport { signInWithSRP } from './signInWithSRP';\nimport { signInWithUserPassword } from './signInWithUserPassword';\nimport { signInWithUserAuth } from './signInWithUserAuth';\nimport { resetAutoSignIn } from './autoSignIn';\n/**\n * Signs a user in\n *\n * @param input -  The SignInInput object\n * @returns SignInOutput\n * @throws service: {@link InitiateAuthException }, {@link RespondToAuthChallengeException }\n *  - Cognito service errors thrown during the sign-in process.\n * @throws validation: {@link AuthValidationErrorCode  } - Validation errors thrown when either username or password\n *  are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function signIn(input) {\n    // Here we want to reset the store but not reassign the callback.\n    // The callback is reset when the underlying promise resolves or rejects.\n    // With the advent of session based sign in, this guarantees that the signIn API initiates a new auth flow,\n    // regardless of whether it is called for a user currently engaged in an active auto sign in session.\n    resetAutoSignIn(false);\n    const authFlowType = input.options?.authFlowType;\n    await assertUserNotAuthenticated();\n    switch (authFlowType) {\n        case 'USER_SRP_AUTH':\n            return signInWithSRP(input);\n        case 'USER_PASSWORD_AUTH':\n            return signInWithUserPassword(input);\n        case 'CUSTOM_WITHOUT_SRP':\n            return signInWithCustomAuth(input);\n        case 'CUSTOM_WITH_SRP':\n            return signInWithCustomSRPAuth(input);\n        case 'USER_AUTH':\n            return signInWithUserAuth(input);\n        default:\n            return signInWithSRP(input);\n    }\n}\n"],"mappings":";;;;;;;;AAAA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,MAAMA,CAACC,KAAK,EAAE;EAAA,IAAAC,cAAA;EACpC;EACA;EACA;EACA;EACIC,eAAe,CAAC,KAAK,CAAC;EACtB,MAAMC,YAAY,IAAAF,cAAA,GAAGD,KAAK,CAACI,OAAO,cAAAH,cAAA,uBAAbA,cAAA,CAAeE,YAAY;EAChD,MAAME,0BAA0B,EAAE;EAClC,QAAQF,YAAY;IAChB,KAAK,eAAe;MAChB,OAAOG,aAAa,CAACN,KAAK,CAAC;IAC/B,KAAK,oBAAoB;MACrB,OAAOO,sBAAsB,CAACP,KAAK,CAAC;IACxC,KAAK,oBAAoB;MACrB,OAAOQ,oBAAoB,CAACR,KAAK,CAAC;IACtC,KAAK,iBAAiB;MAClB,OAAOS,uBAAuB,CAACT,KAAK,CAAC;IACzC,KAAK,WAAW;MACZ,OAAOU,kBAAkB,CAACV,KAAK,CAAC;IACpC;MACI,OAAOM,aAAa,CAACN,KAAK,CAAC;EACvC;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}