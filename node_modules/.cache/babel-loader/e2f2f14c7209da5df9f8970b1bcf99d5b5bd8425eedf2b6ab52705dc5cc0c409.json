{"ast":null,"code":"import { ConsoleLogger, Amplify, clearCredentials, Hub, defaultStorage } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, assertOAuthConfig, AMPLIFY_SYMBOL, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport '../utils/refreshAuthTokens.mjs';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport '../tokenProvider/errorHelpers.mjs';\nimport { DefaultOAuthStore } from '../utils/signInWithRedirectStore.mjs';\nimport { tokenOrchestrator } from '../tokenProvider/tokenProvider.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { assertAuthTokens, assertAuthTokensWithRefreshToken } from '../utils/types.mjs';\nimport '@aws-crypto/sha256-js';\nimport { handleOAuthSignOut } from '../utils/oauth/handleOAuthSignOut.mjs';\nimport { OAUTH_SIGNOUT_EXCEPTION } from '../../../errors/constants.mjs';\nimport '../../../Errors.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../types/Auth.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport { createRevokeTokenClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRevokeTokenClient.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../types/errors.mjs';\nimport { createGlobalSignOutClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createGlobalSignOutClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst logger = new ConsoleLogger('Auth');\n/**\n * Signs a user out\n *\n * @param input - The SignOutInput object\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function signOut(input) {\n  var _Amplify$getConfig$Au;\n  const cognitoConfig = (_Amplify$getConfig$Au = Amplify.getConfig().Auth) === null || _Amplify$getConfig$Au === void 0 ? void 0 : _Amplify$getConfig$Au.Cognito;\n  assertTokenProviderConfig(cognitoConfig);\n  if (input !== null && input !== void 0 && input.global) {\n    await globalSignOut(cognitoConfig);\n  } else {\n    await clientSignOut(cognitoConfig);\n  }\n  let hasOAuthConfig;\n  try {\n    assertOAuthConfig(cognitoConfig);\n    hasOAuthConfig = true;\n  } catch (err) {\n    hasOAuthConfig = false;\n  }\n  if (hasOAuthConfig) {\n    var _await$handleOAuthSig, _input$oauth;\n    const oAuthStore = new DefaultOAuthStore(defaultStorage);\n    oAuthStore.setAuthConfig(cognitoConfig);\n    const {\n      type\n    } = (_await$handleOAuthSig = await handleOAuthSignOut(cognitoConfig, oAuthStore, tokenOrchestrator, input === null || input === void 0 || (_input$oauth = input.oauth) === null || _input$oauth === void 0 ? void 0 : _input$oauth.redirectUrl)) !== null && _await$handleOAuthSig !== void 0 ? _await$handleOAuthSig : {};\n    if (type === 'error') {\n      throw new AuthError({\n        name: OAUTH_SIGNOUT_EXCEPTION,\n        message: \"An error occurred when attempting to log out from OAuth provider.\"\n      });\n    }\n  } else {\n    // complete sign out\n    tokenOrchestrator.clearTokens();\n    await clearCredentials();\n    Hub.dispatch('auth', {\n      event: 'signedOut'\n    }, 'Auth', AMPLIFY_SYMBOL);\n  }\n}\nasync function clientSignOut(cognitoConfig) {\n  try {\n    const {\n      userPoolEndpoint,\n      userPoolId,\n      userPoolClientId\n    } = cognitoConfig;\n    const authTokens = await tokenOrchestrator.getTokenStore().loadTokens();\n    assertAuthTokensWithRefreshToken(authTokens);\n    if (isSessionRevocable(authTokens.accessToken)) {\n      const revokeToken = createRevokeTokenClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n          endpointOverride: userPoolEndpoint\n        })\n      });\n      await revokeToken({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.SignOut)\n      }, {\n        ClientId: userPoolClientId,\n        Token: authTokens.refreshToken\n      });\n    }\n  } catch (err) {\n    // this shouldn't throw\n    logger.debug('Client signOut error caught but will proceed with token removal');\n  }\n}\nasync function globalSignOut(cognitoConfig) {\n  try {\n    const {\n      userPoolEndpoint,\n      userPoolId\n    } = cognitoConfig;\n    const authTokens = await tokenOrchestrator.getTokenStore().loadTokens();\n    assertAuthTokens(authTokens);\n    const globalSignOutClient = createGlobalSignOutClient({\n      endpointResolver: createCognitoUserPoolEndpointResolver({\n        endpointOverride: userPoolEndpoint\n      })\n    });\n    await globalSignOutClient({\n      region: getRegionFromUserPoolId(userPoolId),\n      userAgentValue: getAuthUserAgentValue(AuthAction.SignOut)\n    }, {\n      AccessToken: authTokens.accessToken.toString()\n    });\n  } catch (err) {\n    // it should not throw\n    logger.debug('Global signOut error caught but will proceed with token removal');\n  }\n}\nconst isSessionRevocable = token => {\n  var _token$payload;\n  return !!(token !== null && token !== void 0 && (_token$payload = token.payload) !== null && _token$payload !== void 0 && _token$payload.origin_jti);\n};\nexport { signOut };","map":{"version":3,"names":["logger","ConsoleLogger","signOut","input","_Amplify$getConfig$Au","cognitoConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","global","globalSignOut","clientSignOut","hasOAuthConfig","assertOAuthConfig","err","_await$handleOAuthSig","_input$oauth","oAuthStore","DefaultOAuthStore","defaultStorage","setAuthConfig","type","handleOAuthSignOut","tokenOrchestrator","oauth","redirectUrl","AuthError","name","OAUTH_SIGNOUT_EXCEPTION","message","clearTokens","clearCredentials","Hub","dispatch","event","AMPLIFY_SYMBOL","userPoolEndpoint","userPoolId","userPoolClientId","authTokens","getTokenStore","loadTokens","assertAuthTokensWithRefreshToken","isSessionRevocable","accessToken","revokeToken","createRevokeTokenClient","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","region","getRegionFromUserPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","SignOut","ClientId","Token","refreshToken","debug","assertAuthTokens","globalSignOutClient","createGlobalSignOutClient","AccessToken","toString","token","_token$payload","payload","origin_jti"],"sources":["/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@aws-amplify/auth/src/providers/cognito/apis/signOut.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify, ConsoleLogger, Hub, clearCredentials, defaultStorage, } from '@aws-amplify/core';\nimport { AMPLIFY_SYMBOL, AuthAction, assertOAuthConfig, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { tokenOrchestrator } from '../tokenProvider';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { assertAuthTokens, assertAuthTokensWithRefreshToken, } from '../utils/types';\nimport { handleOAuthSignOut } from '../utils/oauth';\nimport { DefaultOAuthStore } from '../utils/signInWithRedirectStore';\nimport { AuthError } from '../../../errors/AuthError';\nimport { OAUTH_SIGNOUT_EXCEPTION } from '../../../errors/constants';\nimport { createGlobalSignOutClient, createRevokeTokenClient, } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\nconst logger = new ConsoleLogger('Auth');\n/**\n * Signs a user out\n *\n * @param input - The SignOutInput object\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function signOut(input) {\n    const cognitoConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(cognitoConfig);\n    if (input?.global) {\n        await globalSignOut(cognitoConfig);\n    }\n    else {\n        await clientSignOut(cognitoConfig);\n    }\n    let hasOAuthConfig;\n    try {\n        assertOAuthConfig(cognitoConfig);\n        hasOAuthConfig = true;\n    }\n    catch (err) {\n        hasOAuthConfig = false;\n    }\n    if (hasOAuthConfig) {\n        const oAuthStore = new DefaultOAuthStore(defaultStorage);\n        oAuthStore.setAuthConfig(cognitoConfig);\n        const { type } = (await handleOAuthSignOut(cognitoConfig, oAuthStore, tokenOrchestrator, input?.oauth?.redirectUrl)) ?? {};\n        if (type === 'error') {\n            throw new AuthError({\n                name: OAUTH_SIGNOUT_EXCEPTION,\n                message: `An error occurred when attempting to log out from OAuth provider.`,\n            });\n        }\n    }\n    else {\n        // complete sign out\n        tokenOrchestrator.clearTokens();\n        await clearCredentials();\n        Hub.dispatch('auth', { event: 'signedOut' }, 'Auth', AMPLIFY_SYMBOL);\n    }\n}\nasync function clientSignOut(cognitoConfig) {\n    try {\n        const { userPoolEndpoint, userPoolId, userPoolClientId } = cognitoConfig;\n        const authTokens = await tokenOrchestrator.getTokenStore().loadTokens();\n        assertAuthTokensWithRefreshToken(authTokens);\n        if (isSessionRevocable(authTokens.accessToken)) {\n            const revokeToken = createRevokeTokenClient({\n                endpointResolver: createCognitoUserPoolEndpointResolver({\n                    endpointOverride: userPoolEndpoint,\n                }),\n            });\n            await revokeToken({\n                region: getRegionFromUserPoolId(userPoolId),\n                userAgentValue: getAuthUserAgentValue(AuthAction.SignOut),\n            }, {\n                ClientId: userPoolClientId,\n                Token: authTokens.refreshToken,\n            });\n        }\n    }\n    catch (err) {\n        // this shouldn't throw\n        logger.debug('Client signOut error caught but will proceed with token removal');\n    }\n}\nasync function globalSignOut(cognitoConfig) {\n    try {\n        const { userPoolEndpoint, userPoolId } = cognitoConfig;\n        const authTokens = await tokenOrchestrator.getTokenStore().loadTokens();\n        assertAuthTokens(authTokens);\n        const globalSignOutClient = createGlobalSignOutClient({\n            endpointResolver: createCognitoUserPoolEndpointResolver({\n                endpointOverride: userPoolEndpoint,\n            }),\n        });\n        await globalSignOutClient({\n            region: getRegionFromUserPoolId(userPoolId),\n            userAgentValue: getAuthUserAgentValue(AuthAction.SignOut),\n        }, {\n            AccessToken: authTokens.accessToken.toString(),\n        });\n    }\n    catch (err) {\n        // it should not throw\n        logger.debug('Global signOut error caught but will proceed with token removal');\n    }\n}\nconst isSessionRevocable = (token) => !!token?.payload?.origin_jti;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}