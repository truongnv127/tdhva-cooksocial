{"ast":null,"code":"import _objectSpread from \"/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { getUserContextData } from '../utils/userContextData.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../types/errors.mjs';\nimport { createResendConfirmationCodeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createResendConfirmationCodeClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Resend the confirmation code while signing up\n *\n * @param input -  The ResendSignUpCodeInput object\n * @returns ResendSignUpCodeOutput\n * @throws service: {@link ResendConfirmationException } - Cognito service errors thrown when resending the code.\n * @throws validation: {@link AuthValidationErrorCode } - Validation errors thrown either username are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function resendSignUpCode(input) {\n  var _Amplify$getConfig$Au, _input$options;\n  const {\n    username\n  } = input;\n  assertValidationError(!!username, AuthValidationErrorCode.EmptySignUpUsername);\n  const authConfig = (_Amplify$getConfig$Au = Amplify.getConfig().Auth) === null || _Amplify$getConfig$Au === void 0 ? void 0 : _Amplify$getConfig$Au.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolClientId,\n    userPoolId,\n    userPoolEndpoint\n  } = authConfig;\n  const clientMetadata = (_input$options = input.options) === null || _input$options === void 0 ? void 0 : _input$options.clientMetadata;\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const resendConfirmationCode = createResendConfirmationCodeClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const {\n    CodeDeliveryDetails\n  } = await resendConfirmationCode({\n    region: getRegionFromUserPoolId(authConfig.userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ResendSignUpCode)\n  }, {\n    Username: username,\n    ClientMetadata: clientMetadata,\n    ClientId: authConfig.userPoolClientId,\n    UserContextData\n  });\n  const {\n    DeliveryMedium,\n    AttributeName,\n    Destination\n  } = _objectSpread({}, CodeDeliveryDetails);\n  return {\n    destination: Destination,\n    deliveryMedium: DeliveryMedium,\n    attributeName: AttributeName ? AttributeName : undefined\n  };\n}\nexport { resendSignUpCode };","map":{"version":3,"names":["resendSignUpCode","input","_Amplify$getConfig$Au","_input$options","username","assertValidationError","AuthValidationErrorCode","EmptySignUpUsername","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","userPoolClientId","userPoolId","userPoolEndpoint","clientMetadata","options","UserContextData","getUserContextData","resendConfirmationCode","createResendConfirmationCodeClient","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","CodeDeliveryDetails","region","getRegionFromUserPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","ResendSignUpCode","Username","ClientMetadata","ClientId","DeliveryMedium","AttributeName","Destination","_objectSpread","destination","deliveryMedium","attributeName","undefined"],"sources":["/home/truongnvops/Documents/Project_AWS/tdhva-cooksocial/frontend/node_modules/@aws-amplify/auth/src/providers/cognito/apis/resendSignUpCode.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { getUserContextData } from '../utils/userContextData';\nimport { createResendConfirmationCodeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\n/**\n * Resend the confirmation code while signing up\n *\n * @param input -  The ResendSignUpCodeInput object\n * @returns ResendSignUpCodeOutput\n * @throws service: {@link ResendConfirmationException } - Cognito service errors thrown when resending the code.\n * @throws validation: {@link AuthValidationErrorCode } - Validation errors thrown either username are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function resendSignUpCode(input) {\n    const { username } = input;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptySignUpUsername);\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolClientId, userPoolId, userPoolEndpoint } = authConfig;\n    const clientMetadata = input.options?.clientMetadata;\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const resendConfirmationCode = createResendConfirmationCodeClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const { CodeDeliveryDetails } = await resendConfirmationCode({\n        region: getRegionFromUserPoolId(authConfig.userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ResendSignUpCode),\n    }, {\n        Username: username,\n        ClientMetadata: clientMetadata,\n        ClientId: authConfig.userPoolClientId,\n        UserContextData,\n    });\n    const { DeliveryMedium, AttributeName, Destination } = {\n        ...CodeDeliveryDetails,\n    };\n    return {\n        destination: Destination,\n        deliveryMedium: DeliveryMedium,\n        attributeName: AttributeName\n            ? AttributeName\n            : undefined,\n    };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,gBAAgBA,CAACC,KAAK,EAAE;EAAA,IAAAC,qBAAA,EAAAC,cAAA;EAC1C,MAAM;IAAEC;EAAQ,CAAE,GAAGH,KAAK;EAC1BI,qBAAqB,CAAC,CAAC,CAACD,QAAQ,EAAEE,uBAAuB,CAACC,mBAAmB,CAAC;EAC9E,MAAMC,UAAU,IAAAN,qBAAA,GAAGO,OAAO,CAACC,SAAS,EAAE,CAACC,IAAI,cAAAT,qBAAA,uBAAxBA,qBAAA,CAA0BU,OAAO;EACpDC,yBAAyB,CAACL,UAAU,CAAC;EACrC,MAAM;IAAEM,gBAAgB;IAAEC,UAAU;IAAEC;EAAgB,CAAE,GAAGR,UAAU;EACrE,MAAMS,cAAc,IAAAd,cAAA,GAAGF,KAAK,CAACiB,OAAO,cAAAf,cAAA,uBAAbA,cAAA,CAAec,cAAc;EACpD,MAAME,eAAe,GAAGC,kBAAkB,CAAC;IACvChB,QAAQ;IACRW,UAAU;IACVD;EACR,CAAK,CAAC;EACF,MAAMO,sBAAsB,GAAGC,kCAAkC,CAAC;IAC9DC,gBAAgB,EAAEC,qCAAqC,CAAC;MACpDC,gBAAgB,EAAET;IAC9B,CAAS;EACT,CAAK,CAAC;EACF,MAAM;IAAEU;EAAmB,CAAE,GAAG,MAAML,sBAAsB,CAAC;IACzDM,MAAM,EAAEC,uBAAuB,CAACpB,UAAU,CAACO,UAAU,CAAC;IACtDc,cAAc,EAAEC,qBAAqB,CAACC,UAAU,CAACC,gBAAgB;EACzE,CAAK,EAAE;IACCC,QAAQ,EAAE7B,QAAQ;IAClB8B,cAAc,EAAEjB,cAAc;IAC9BkB,QAAQ,EAAE3B,UAAU,CAACM,gBAAgB;IACrCK;EACR,CAAK,CAAC;EACF,MAAM;IAAEiB,cAAc;IAAEC,aAAa;IAAEC;EAAW,CAAE,GAAAC,aAAA,KAC7Cb,mBAAmB,CACzB;EACD,OAAO;IACHc,WAAW,EAAEF,WAAW;IACxBG,cAAc,EAAEL,cAAc;IAC9BM,aAAa,EAAEL,aAAA,GACTA,aAAA,GACAM;EACd,CAAK;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}